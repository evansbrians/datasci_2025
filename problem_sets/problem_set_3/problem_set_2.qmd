---
title: "Problem set 3: Global CO~2~"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

<!-- knitr setup --> 

```{r knitr_setup, include = FALSE}
options(knitr.table.format = "html")

knitr::opts_chunk$set(eval = FALSE)

library(tidyverse)
```

<hr>
![](https://i.pinimg.com/originals/cf/1a/48/cf1a4890987a1a2475caee9a858c8601.jpg){.intro_image}

My problem sets have a reputation for being pretty difficult. Here, I intend to train you on how to complete them with as little pain as possible (and with minimal points taken off). "Training" tips and tricks will be shared in a [gray box]{style="border: 1px solid #999999; background-color: #efefef; padding: 2px;"} with a spy icon (<i class="fas fa-user-secret fa-1x"></i>; *as above*). Portions of this problem set in which user input is required are highlighted in a [&nbsp;blue box with a dark blue border on the left]{style="border-left: 8px solid #292093; background-color: #e6ffff; padding: 2px;"}.

### Grading

The points allotted for each question are provided in highlighted red bold text (e.g., <span class = "score">[1.0]</span>) within the question itself. When applicable, total points for a question may represent the sum of individually graded components, which are provided in red text (e.g., <span class = "subscore">[1.0]</span>).

Points may be deducted from each question's total: 

* [[50% per violation]]{class="subscore"} Use only functions listed in "Functions that you may use in this assignment";
* [[50%]]{class="subscore"} Include only assignments specified in the question;
* [[10%]]{class="subscore"} Ensure that all code is properly indented;
* [[10%]]{class="subscore"} Ensure that the class of your response is consistent with the wording of the question (e.g., if you are asked to return a "value" or "vector", ensure that the resultant object is not a data frame).

*Note: The maximum deduction is the total points value for a given question*


:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Click the blue button below to view the functions that you may use in completing this problem set. Make sure that you know what each function does (use `?[function name]` if you do not). Do not use any functions outside of this list!
:::

<!-- Note, the below is an accordion, which was styled in the css section -->

:::: Accordion
<button class="accordion">Functions that you may use in this assignment</button>

:::: {.panel}
<br>

**Important!** Primitive functions and functions in the *base* package are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *readr*, and *tidyr* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, the `%>%` function is imported by the *dplyr* (core tidyverse) library.

In this assignment, you may **only** use the following R functions in your submitted R script (but you may use additional functions to explore the data):

* `.Primitive, ()`
* `.Primitive, []`
* `.Primitive, $`
* `.Primitive, =`
* `.Primitive, ==`
* `.Primitive, /`
* `.Primitive, c`
* `base::%in%`
* `base::library`
* `base::list2env`
* `base::mean`
* `dplyr::n`
* `dplyr::summarize`
* `ggplot2::aes`
* `ggplot2::coord_flip`
* `ggplot2::element_blank`
* `ggplot2::element_line`
* `ggplot2::geom_boxplot`
* `ggplot2::ggplot`
* `ggplot2::scale_y_continuous`
* `ggplot2::theme`
* `magrittr::%>%`
* `readr::read_rds`
* `tidyr::pivot_longer`
:::

:::

## About the data 

This problem set will use `district_birds.rds`, a tidy dataset that contains a subset of records from the Smithsonian Migratory Bird Center's <a href="https://nationalzoo.si.edu/migratory-birds/neighborhood-nestwatch">Neighborhood Nestwatch</a> (NN) program. NN is a community science project where scientists visits backyards, neighborhoods, and schools to conduct bird banding demonstrations and sample bird populations. The data include tables for sites, visits, point counts, and capture events, and a table that provides natural history information for observed birds. Geographic coordinate values have been jittered to protect the privacy of NN participants. 

In this lesson, we will only be working only with the `capture` dataset. These data describe information collected when a wild bird has been captured and released. Variables in this table include:

* `capture_id` (character): The primary key of the table;
* `visit_id` (character): A foreign key to the `visits` table;
* `band_number` (character): A unique numeric identifier for an aluminum band placed on a bird;
* `color_combo` (character): A combination of color bands that are added to some birds for quick identification of individuals;
* `spp` (character): A four-letter code for the species banded (see the `birds` table)
* `sex` (character): The sex of the bird (F = female, M = male, U = unknown);
* `age` (character): A code for the age class of the bird (e.g., HY = "Hatch year", AHY = "After hatch year");
* `wing` (numeric, double): The length of a bird's wing, in millimeters;
* `tl` (numeric, double): The length of a bird's tail, in millimeters;
* `mass` (numeric, double): The mass of the bird, in grams;
* `bp_cp` (character): A code for the breeding condition of a bird (bp = "brood patch", cp = "cloacal protuberance");
* `fat` (character): An ordinal code for how much fat the bird is carrying.


## Getting started (gimme questions)

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i>  Remember that it’s best practice to start with a clean R Studio session (i.e., close any script files, remove objects from your global environment, and clear your history).
:::

I always start my assignments off with some easy points for naming your file, providing your name and the date, and loading any necessary libraries.

:::{class="now_you"}
1\. [[1.0]]{class="score"} Save this document to your project folder with naming convention "problem_set_2_[last
name]_[first name].R". For example, I would name my file `problem_set_2_evans_brian.R`.

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Be very careful with the naming convention of your file and follow the instructions to-the-letter!
:::

2\. [[0.50]]{class="score"} Attach the tidyverse metapackage to your current R session.

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> You may find that other libraries are needed to complete this problem set -- if this is the case, call a function from that package rather than loading the full library (e.g., `dplyr::mutate()`).
:::
:::

## Straightforward questions

After you have completed the first round of gimme questions, the next set of questions that you will address are pretty straightforward -- they are *nearly* identical to coding steps that you have taken when completing the videos or tutorials. These will make up the bulk of the questions in most problem sets.

For example ...

:::{class="now_you"}
3\. [[0.50]]{class="score"} The data file `district_birds.rds` is structured as a list object. As
parsimoniously as possible, modify the below by assigning the names of each of the individual list items to the global environment in a single chained analysis.

```{r q4_read_assign, eval = FALSE}
my_list <-
  read_rds("data/raw/district_birds.rds")

sites <- my_list$sites

visits <- my_list$visits

counts <- my_list$counts

captures <- my_list$captures

birds <- my_list$birds
```
:::

You can typically recognize a straightforward question, because they will almost directly reflect a process that you completed in one of the lessons!

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> It pays to keep track of when a function was first used (or used elsewhere in new ways). The answer to the above question was covered in the tutorial "Reshaping data frames" and in the video lesson "Tidy data".
:::

:::{class="now_you"}
4\. [[1.0]]{class="score"} The code block below uses a nested coding structure to calculate the average mass of American robins ("AMRO"). Replace the below with a code block in which each step in the process is connected by a pipe. *Note: There a lot of possible ways to answer this question correctly!*

```{r q5_nested_to_pipe, eval = FALSE}
mean(
  captures[captures$spp == "AMRO", ]$mass,
  na.rm = TRUE)
```

*Note: `na.rm = TRUE` is an argument of `mean()` that removes `NA` values from the calculation.*
:::

The "straightforward questions" typically ask you to dig into the material that you have been provided. The goal of these questions is largely for you to be able to self-assess your understanding of the material that we perceive to be especially important. For example, I’m really a fan of adhering to “best practices in R coding” …

:::{class="now_you"}
5\. [[2.0]]{class="score"} The code block below generates a box plot that illustrates the
distribution of bird mass by species. Without removing comments or changing the code output, modify the code block such that it follows the conventions our course style guide (*Hint: There are 10 violations total*).

```{r q6_best_practices, eval = FALSE}
captures[captures $spp%in% c("CACH" , "CARW", "GRCA", "NOCA"), ] %>% 
  # Initiate plot:
  ggplot() +
  
  # Define aesthetics and geometry:
  aes(x=spp, y = mass) + geom_boxplot(fill = "#88ccee") +
  
  # Define scale:
  
  scale_y_continuous(
    limits = c(0,75), 
    expand = c(0, 0))+
  
  # Flip axes:
  
  coord_flip() +
  
  # Define theme:
  
  theme(panel.background = element_blank(), axis.line = element_line(color = "black"), 
        panel.grid.major.x = element_line(color = "#dcdcdc"))
```
:::

"Straightfoward questions" may, however, ask you to do conduct operations that are similar to those that you have done before but in new ways! For example ...

:::{class="now_you"}
6\. [[1.0]]{class="score"} A US nickel weighs 5 grams. The following code calculates the mean mass of Carolina Chickadees (`spp`: "CACH") in US nickels (i.e., How many nickels does a Carolina Chickadee weigh?). Modify the below such that it completes the operation in a chained analysis where no assignments are added to the global environment.

```{r q9_cach_nickels}
# Subset data to Carolina chickadees:

cach <-
  captures[captures$spp == "CACH", ]

# Extract the mass variable from the data:

cach_mass <-
  cach$mass

# Calculate the mean of mass measurements:

mean_cach_mass <-
  mean(cach_mass, na.rm = TRUE)

# Convert the mean to US nickels:

mean_cach_mass / 5
```
:::


## Integrated questions

While the goals of the "straightforward questions" are to get you to read the material carefully and examine your ability to understand the material as it was presented, the goal of the integrated question goes a bit further. Here, we seek to assess whether you are able to *integrate* content that you have learned across multiple lessons.

For example, the following draws on content from ***Preliminary lesson 1.4*** and lesson ***2.1. Reshaping data frames***. 

:::{class="now_you"}
7\. [[1.5]]{class="score"} The code block below attempts to provide a tibble data frame that describes the number of captures and average mass of three bird species (Gray catbird: "GRCA", Northern Cardinal: "NOCA", Song sparrow: "SOSP").  Unfortunately, there are operational errors (three of them) in the code -- please fix them!

```{r q7_fixing_problems, eval = FALSE}
captures[captures$spp == c("GRCA" , "NOCA", "SOSP"), ]  %>% 
  summarize(
    captures,
    n_birds = n(),
    mass = mean(mass, na.rm = TRUE))
```
:::

More typically, integrated questions are meant to mirror real-world scenarios that we often experience when working with data in R. The wording of such questions may be a bit vague (or at least less paint-by-numbers). For example ...

:::{class="now_you"}

8\. [[2.5]]{class="score"} Without assigning any names to the global environment, generate a box plot (`geom_boxplot()`) [[0.50]]{class="subscore"} that describes the distribution of mass *and* wing measurements [[1.0]]{class="subscore"} of American robins (spp: "AMRO") [[0.50]]{class="subscore"}. For full credit:

* [[0.25]]{class="subscore"} Remove the gray plot background 
* [[0.25]]{class="subscore"} Add gray axis lines

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> To address this question, I suggest the following work flow (in brief):

1. First try to visualize how the answer will look. 
2. After considering what the answer will look like, I write out or draw a schema (on a whiteboard or with pencil and paper) that outlines the steps needed to achieve that result. For example, how must your data be structured such that the both `wing` and `mass` are treated as a single variable?
3. Append your schema with the functions that can be used for each step.
4. Convert your appended schema to code.
5. Test to see that it worked!
:::

:::

<hr>

<!-- Note: The below is the javascript that I use to make the accordion button work -->

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>
