---
title: "Problem set 3: Global CO~2~"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

<!-- knitr setup --> 

```{r knitr_setup, include = FALSE}
options(knitr.table.format = "html")

knitr::opts_chunk$set(eval = FALSE)

library(tidyverse)
```

<hr>

In this exercise, you will explore data compiled by the <a href = "https://databank.worldbank.org/home.aspx" target = "_blank">World Bank DataBank</a> that provides information on the emissions of greenhouse gases and the populations of countries around the world.

### Grading

The points allotted for each question are provided in highlighted red bold text (e.g., [[1.0]]{class="score"}) within the question itself. When applicable, total points for a question may represent the sum of individually graded components, which are provided in red text (e.g., [[1.0]]{class="score"}).

Points may be deducted from each question's total: 

* [[50% per violation]]{class="subscore"} Use only functions listed in "Functions that you may use in this assignment";
* [[50%]]{class="subscore"} Include only assignments specified in the question;
* [[50% per violation]]{class="subscore"} Include only relative file paths to files on your hard drive;
* [[10%]]{class="subscore"} Ensure that your code follows the conventions of our course style guide;
* [[10%]]{class="subscore"} Ensure that the class of your response is consistent with the wording of the question (e.g., if you are asked to return a "value" or "vector", ensure that the resultant object is not a data frame).

*Note: The maximum deduction is the total points value for a given question*

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Click the blue button below to view the functions that you may use in completing this problem set. Make sure that you know what each function does (use `?[function name]` if you do not). Do not use any functions outside of this list!
:::

<!-- Note, the below is an accordion, which was styled in the css section -->

:::: Accordion
<button class="accordion">Functions that you may use in this assignment</button>

:::: {.panel}

**Important!** Primitive functions and functions in the *base* package are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *readr*, and *tidyr* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, the `%>%` function is imported by the *dplyr* (core tidyverse) library.

In this assignment, you may **only** use the following R functions in your submitted R script (but you may use additional functions to explore the data):

* `.Primitive, ()`
* `.Primitive, =`
* `.Primitive, <-`
* `.Primitive, :`
* `.Primitive, ==`
* `.Primitive, *`
* `.Primitive, !`
* `.Primitive, as.numeric`
* `.Primitive, c`
* `base::library`
* `dplyr::filter`
* `dplyr::inner_join`
* `dplyr::left_join`
* `dplyr::mutate`
* `dplyr::n`
* `dplyr::select`
* `dplyr::slice_max`
* `ggplot2::+`
* `ggplot2::aes`
* `ggplot2::element_rect`
* `ggplot2::geom_line`
* `ggplot2::geom_point`
* `ggplot2::ggplot`
* `ggplot2::labs`
* `ggplot2::scale_x_continuous`
* `ggplot2::scale_y_continuous`
* `ggplot2::theme`
* `magrittr::%>%`
* `readr::read_csv`
* `tidyr::drop_na`
* `tidyr::pivot_longer`

:::

:::

## About the data 

This problem set will use the following files:

[world_bank_countries.csv]{.mono}: A csv file that provides country reference information from the World Bank. Variables include:

* [country_code]{.mono}, character: A three-letter code assigned to each country
* [country_name]{.mono}, character: A name (in English) for each country
* [country_region]{.mono}, character: The general region where each country is located
* [country_georegion]{.mono}, character: A finer-scale region with the larger region
* [land_area]{.mono}, double numeric: The area of a country, in square kilometers


[API_SP.POP.TOTL_DS2_en_csv_v2_2763937.csv]{.mono}: Can you believe that this is the *actual* name of the file? These data were also retrieved from the World Bank and represent the population of each country from 1960 through 2020. These are the raw data and have not been altered in any way. Variables include:

* [Country Name]{.mono}, character: A name (in English) for each country
* [Country Code]{.mono}, character: A three-letter code assigned to each country
* [Indicator Name]{.mono}, character: The variable being measured for each country
* [Indicator Code]{.mono}, character: A code representing the variable being measured
* [1960 ... 2020]{.mono}, numeric: The population of each country in a given year (year as columns)
* [...66]{.mono}, logical: A junk column that suggests these data were compiled using Microsoft Excel

[API_EN.ATM.CO2E.PC_DS2_en_csv_v2_2764620.csv]{.mono}: These data were also retrieved from the World Bank and represent the *per capita* CO~2~ emissions of each country from 1960 through 2020. These are the raw data and have not been altered in any way. Variables include:

* [Country Name]{.mono}, character: A name (in English) for each country
* [Country Code]{.mono}, character: A three-letter code assigned to each country
* [Indicator Name]{.mono}, character: The variable being measured for each country
* [Indicator Code]{.mono}, character: A code representing the variable being measured
* [1960 ... 2020]{.mono}, numeric: The *per capita*  CO~2~ emissions of each country in a given year (year as columns)
* [...66]{.mono}, logical: A junk column that suggests these data were compiled using Microsoft Excel

## Setup

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i>  Remember that it is best practice to start with a clean R Studio session (i.e., close any script files, remove objects from your global environment, and clear your history).
:::

:::{class="now_you"}
1\. [[1.0]]{class="score"} Save this document to your project folder with naming convention "problem_set_3_[last
name]_[first name].R". For example, I would name my file `problem_set_3_evans_brian.R`.

2\. [[0.50]]{class="score"} Attach the tidyverse metapackage to your current R session.

:::

## Read and pre-process the data

:::{class="now_you"}
3\. [[1.0]]{class="score"}  The following code reads in `world_bank_countries.csv` and assigns the name `countries` to your global environment. Please modify this code such that it follows best management practices in code formatting.

```{r q03, message = FALSE, warning = FALSE}
countries=read_csv("data/raw/world_bank_countries.csv")%>%select(!country_region)
```

4\. [[1.0]]{class="score"} The code below reads in and wrangles the data successfully, but not parsimoniously. Modify the code such that the process below is completed in a chained analysis in which only the name associated with the final object, `world_pop`, is assigned to your global environment (i.e., the code block should not include intermediate assignments).

```{r q04, message = FALSE, warning = FALSE}
# Read in population data:

world_pop_raw <-
  read_csv(
    'data/raw/API_SP.POP.TOTL_DS2_en_csv_v2_2763937.csv', 
    skip = 3)

# Subset to columns of interest:

world_pop_column_subset <-
  select(
    world_pop_raw,
    
    # Rename Country Code column to remove space:
    
    country_code = `Country Code`,
    
    # Subset to other columns of interest:
    
    `1960`:`2020`)


# Make the data tidy by pivoting to a long form table:

world_pop_long <-
  pivot_longer(
    world_pop_column_subset,
    names_to = 'year',
    values_to = 'population',
    `1960`:`2020`)

# Finally, convert the year column to numeric:

world_pop <-
  mutate(
    world_pop_long,
    year = as.numeric(year))
```

:::

*Note: Why did I include "skip = 3" as one of my arguments? You might want to look at what happens when you do not include a skip argument. If this is confusing, please revisit the video lecture and tutorial on reading and writing data.*

*Also note: Back ticks (e.g.,* `1960`*) are needed when columns start with a number or contain a space.*

:::{class="now_you"}

5\. [[1.0]]{class="score"} In a chained analysis with no intermediate assignments:

* [[0.3]]{class="subscore"} Read in the CO~2~ data (`API_EN.ATM.CO2E.PC_DS2_en_csv_v2_2764620.csv`)
* [[0.3]]{class="subscore"} Wrangle the data such that the resultant tibble contains (only) the variables `country_code`, `year`, and `co2` (as above)
* [[0.3]]{class="subscore"} Convert the class of the `year` variable to numeric
* [[0.2]]{class="subscore"} Globally assign the data frame to the name `co2`

:::

We can see that the data are not tidy. Recall the tidy rule that every level of observation forms a table. The population table and the CO~2~ table are the same level of observation -- each characterize some attribute of the country on a given year. As such, the data should be stored in the same table.  We'll need to join the tables together.

:::{class="now_you"}

6\. [[1.0]]{class="score"} Join the population and CO~2~ tibbles [[0.8]]{class="subscore"}. Globally assign the resultant object to the name `population_co2` [[0.2]]{class="subscore"}. *Hint: You will have to be careful here, because the two tibbles contain two common columns that define the observation!*

:::

## Subset and visualize total CO~2~ emissions

Our final goal will be to visualize the change in per capita CO~2~ emissions from 1960-2018 for the countries that emitted the most total CO~2~ in 2018 (the last year for which we have emissions data). *Note: CO~2~ data are provided in per capita emissions -- metric tons of CO~2~ per person.* 

:::{class="now_you"}
7\. [[2.0]]{class="score"} Modify the data frame assigned to `populations_co2` such that `co2` values represent the *total* emissions ([[0.3]]{class="subscore"}; Note: the total emissions for a given country is the per capita emissions times the population) and the data frame is:

* [[0.3]]{class="subscore"} Subset to the year 2018
* [[0.3]]{class="subscore"} Arranged from the highest to lowest CO~2~ total emissions in 2018 
* [[0.3]]{class="subscore"} Subset to **only** countries with records in the `countries` data frame
* [[0.3]]{class="subscore"} Subset to **only** the 5 countries with the most CO~2~ emissions (and also satisfy the conditions above)
* [[0.3]]{class="subscore"} Subset to  **only** the fields `country_code`, `country_name`, and `total_co2`
* [[0.2]]{class="subscore"} Globally assigned to the name `top_emitters_2018`


8\. [[2.5]]{class="score"}  Using `population_co2` and `top_emitters_2018`, generate a ggplot that shows the **per capita** CO~2~ emissions from 1960 to 2018 for the five countries that had the highest **total** CO~2~ emissions in 2018. Plot the data such that:

* [[0.25]]{class="subscore"} The data being plotted are the per capita emissions from 1960-2018 for the top five emitting countries
* [[0.25]]{class="subscore"} Evaluation of the plotting code does not produce any warning messages
* [[0.25]]{class="subscore"} Your x-aesthetic is year and is labeled "Year"
* [[0.25]]{class="subscore"} Your y-aesthetic is co_2 and is labeled "Carbon dioxide emissions (metric tons/person)"
* [[0.25]]{class="subscore"} Your color aesthetic is country_name and is labeled "Country" (*Hint: It's often easier to modify the data going into a `ggplot` than inside of a `ggplot` function*)
* [[0.25]]{class="subscore"} Your plot includes point and line geometries
* [[0.25]]{class="subscore"} The x-axis ranges from 1960 to 2020
* [[0.25]]{class="subscore"} The y-axis ranges from 0 to 30
* [[0.25]]{class="subscore"} The plot includes a descriptive title
* [[0.25]]{class="subscore"} The background of the plot is white and contains no grid lines
:::


<hr>

<!-- Note: The below is the javascript that I use to make the accordion button work -->

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>
