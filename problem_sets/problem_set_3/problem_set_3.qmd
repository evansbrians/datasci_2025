---
title: "Problem set 3: Counting caterpillars"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

<!-- knitr setup --> 

```{r knitr_setup, include = FALSE}
options(knitr.table.format = "html")

knitr::opts_chunk$set(eval = FALSE)

library(tidyverse)
```

<hr>

![](../../images/tara_counting_caterpillars.jpg){.intro_image}

In this exercise, you will explore data from the participatory science project [*Caterpillars Count!*](https://caterpillarscount.unc.edu/){target="_blank"}. The primary goal of this project, which was developed by macroecologist Dr. Allen Hurlbert, is to explore the temporal and spatial distribution of arthropods across North America. Our very own Tara Snedgen leads the Smithsonian Migratory Bird Center's *Caterpillars Count!* sampling team.

Data were provided by Caterpillars Count! and the many participants who contribute to its foliage arthropod monitoring program.

**Citation**: *Caterpillars Count!. 2025. Foliage Arthropod Data. Data type: Raw data. 05/29/2002 - 03/12/2025 for Site: All sites. Chapel Hill, North Carolina, USA. Data set accessed 03/25/2025 at [https://caterpillarscount.unc.edu/](https://caterpillarscount.unc.edu/){target="blank"}.*

## Grading

The points allotted for each question are provided in highlighted red bold text (e.g., [[1.0]]{class="score"}) within the question itself. When applicable, total points for a question may represent the sum of individually graded components, which are provided in red text (e.g., [[1.0]]{class="score"}).

Points may be deducted from each question's total: 

* [[50% per violation]]{class="subscore"} Use only functions that are listed in "Functions that you may use in this assignment";
* [[50%]]{class="subscore"} Do not include any assignments other than those specified in a question;
* [[25%]]{class="subscore"} Do not use numeric column indexing for extracting data from data frames or named lists (e.g. `my_df[[1]]`);
* [[10%]]{class="subscore"} Code parsimony;
* [[10%]]{class="subscore"} Adhere to the formatting rules in **Lesson 3.5: Course Style Guide, part 3**;
* [[10%]]{class="subscore"} Ensure that the class of your response is consistent with the wording of the question (e.g., if you are asked to return a "value" or "vector", ensure that the resultant object is not a data frame).

*Note: The maximum deduction is the total points value for a given question*

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Click the blue button below to view the functions that you may use in completing this problem set. Make sure that you know what each function does (use `?[function name]` if you do not). Do not use any functions outside of this list!
:::

<!-- Note, the below is an accordion, which was styled in the css section -->

:::: Accordion
<button class="accordion">Functions that you may use in this assignment</button>

:::: {.panel}

**Important!** Primitive functions and functions in the *base* package are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *readr*, and *tidyr* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, the `%>%` function is imported by the *dplyr* (core tidyverse) library.

In this assignment, you may **only** use the following R functions in your submitted R script (but you may use additional functions to explore the data):

* `.Primitive, (...)`
* `.Primitive, <-`
* `.Primitive, =`
* `.Primitive, :`
* `.Primitive, ==`
* `.Primitive, !`
* `.Primitive, c`
* `.Primitive, sum`
* `base::%in%`
* `base::library`
* `base::list2Env`
* `base::mean`
* `dplyr::arrange`
* `dplyr::desc`
* `dplyr::filter`
* `dplyr::full_join`
* `dplyr::inner_join`
* `dplyr::left_join`
* `dplyr::mutate`
* `dplyr::n`
* `dplyr::pull`
* `dplyr::select`
* `dplyr::semi_join`
* `dplyr::summarize`
* `ggplot2::+`
* `ggplot2::aes`
* `ggplot2::geom_bar`
* `ggplot2::ggplot`
* `ggplot2::labs`
* `ggplot2::scale_y_continuous`
* `lubridate::year`
* `magrittr::%>%`
* `readr::read_rds`
* `tidyr::replace_na`

:::

:::

## About the data 

:::: Accordion
<button class="accordion">Data for this assignment</button>

:::: {.panel}

This problem set will use the file `caterpillars_count.rds`, a tidy dataset that contains the following list items:

`sites`: Site-level information.

* [site_name]{.mono}, character: The name of the study site.
* [site_description]{.mono}, character: Description of the site
* [latitude]{.mono}, character: The latitudinal coordinates of a site, in decimal degrees.
* [longitude]{.mono}, character: The longitudinal coordinates of a site, in decimal degrees.
* [region]{.mono}, double numeric: The area of a country, in square kilometers

`survey_locations`: Information about the survey location, where each location represents a branch on a given tree.

* [survey_location]{.mono}, character: A unique three-letter code specifying a particular survey branch.
* [site_name]{.mono}, character: The name of the study site.
* [plant]{.mono}, character: Plant species of the survey branch.

`surveys`: Each survey is a sampling event conducted on a given date with a given observation method.

* [survey_id]{.mono}, character: A unique code representing a sampling event.
* [survey_location]{.mono}, character: A unique three-letter code specifying a particular survey branch.
* [date]{.mono}, character: The date that a survey occurred
* [observation_method]{.mono}, character: The survey method, either "Visual" or "Beat sheet"

`observations`: Each observation is an arthropod order and the quantity of individuals within that order observed during a given survey.

* [survey_id]{.mono}, character: A unique code representing a sampling event.
* [arthropod]{.mono}, character: The arthropod order that was observed during a survey.
* [arthropod_quantity]{.mono}, character: The number of arthropods of a given order observed during a survey.

:::

:::

## Setup

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i>  Remember that it is best practice to start with a clean R Studio session (i.e., close any script files, remove objects from your global environment, and clear your history).
:::

:::{class="now_you"}

1\. [[0.50]]{class="score"} Before opening your script file for this problem set, change the name of
the `problem_set_3.R` to "problem_set_3_[last name]_[first name].R" using a snake case naming convention. For example, Tara would name her file `problem_set_3_snedgen_tara.R`. *Note: You will submit this script file as your assignment*.

:::

:::{class="now_you"}

2\. [[0.50]]{class="score"} Open the script file in RStudio and attach the tidyverse metapackage to your current R session.

:::

:::{class="now_you"}

3\. [[1.0]]{class="score"}  Read in the `caterpillars_count.rds` and assign the names of the list to the global environment.

:::

:::{class="now_you"}

4\. [[1.0]]{class="score"} Subset the `sites` data frame to where `region` is `DC` (District of Columbia), `MD` (Maryland), or `VA` (Virginia and globally assign the name `sites_dmv` to the resultant object.

:::

## Exploring data within a single table

The names in your global environment are associated with objects that represent levels of observation. Each of these objects contains valuable information about this study!

:::{class="now_you"}

5\. [[1.0]]{class="score"} How many caterpillars has Caterpillars Count counted? Please provide your answer as a one-value numeric vector.

:::

:::{class="now_you"}

6\. [[1.0]]{class="score"} Create a summary table that displays the number of surveys by year and arrange from the highest to lowest number of surveys per year.

:::

## Exploring data across two tables

Tidy data often require us to conduct joins that allow us to work with information organized at different levels of observation.

:::{class="now_you"}

7\. [[2.0]]{class="score"} Using `sites_dmv`, subset the `survey_locations` data frame to those that are located within sites in the District of Columbia, Maryland, or Virginia. For full credit, please complete this such that:

* No columns are added to, or removed from, `survey_locations`;
* The `filter` function is not used to subset rows;
* The `select` function is not used to subset columns.

:::

:::{class="now_you"}

8\. [[2.5]]{class="score"}  Please generate a summary table that provides the average (mean) number of caterpillars observed in "Beat sheet" and "Visual" surveys (`observation_method`). 

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Zeros are important!

To properly address this question you will have to do something about surveys in which no caterpillars were observed. Excluding zero values will lead to very inflated count data!

:::
:::



## Exploring data across multiple tables

It is sometimes the case that one level of observation is distantly connected to the information stored in another level of observation. This requires us to chain joins across a series of tables. This is an incredibly common occurrence when working with databases!

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Recommendations for conducting complex database-like operations:

* I suggest using scratch paper to map out your process before attempting to code your way through problems like these:
    * Visualize what you want your end result to look like.
    * Determine which tables contain the rows or columns that you want in your resultant object. 
    * Write out your order of operations.
    * Identify matching key columns between the tables being joined.
    * Determine the appropriate target and source table for each join. Recall that, typically, the target table contains the foreign key that is associated with the primary key of the source table.
    * Consider which type of join (or joins) to use -- make sure you know the different classes of joins and what each one does!
* When you go to code it:
    * Add a brief comment before each step describing what that step does.
    * Subset rows and columns to those of interest prior to conducting joins.
    * Pipe your way through each individual stage of the process to ensure that it has the desired outcome.

:::

:::{class="now_you"}

9\. [[2.5]]{class="score"} Please generate a bar plot that displays the number of surveys conducted in the District of Columbia, Maryland, and Virginia in 2024. Plot your data such that:

* Your x-aesthetic is region and is labeled "Region";
* Your y-axis is labeled "Count";
* The y-axis ranges from 0 to 2500;
* The plot includes a descriptive title.

:::

:::{class="now_you"}

10\. [[2.5]]{class="score"} Please generate a summary table that provides the total number of arthropods counted per state in the District of Columbia, Maryland, and Virginia in 2024.

:::


<hr>

<!-- Note: The below is the javascript that I use to make the accordion button work -->

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>
