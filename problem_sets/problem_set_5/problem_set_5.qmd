---
title: "Problem set 5: District cats"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

<!-- knitr setup --> 

```{r knitr_setup, include = FALSE}
options(knitr.table.format = "html")

knitr::opts_chunk$set(eval = FALSE)

library(tidyverse)
```

<hr>

![](https://lh3.googleusercontent.com/SYglWoOIpXr92kWX0StEOWYHiCuhrlbEEHWEnum1PyjpTnfy5Q5nts8rqLYLc384QREgdzi086HUlOMYvRZR7VBJ4PmkktHrOlfBRKDaE1VOcjeCL0SXZuXu1jvflyXC5ZbcZy50sNw=w600-h315-p-k?source=screenshot.guru){.intro_image}

In this exercise, you will explore data associated with a study of outdoor cat abundance in metropolitan Washington D.C. ([Bennett and Evans et al. 2021](https://www.frontiersin.org/articles/10.3389/fevo.2021.643845/full?utm_source=S-TWT&utm_medium=SNET&utm_campaign=ECO_FEVO_XXXXXXXX_auto-dlvrit){target="_blank"}). In this study, we wanted to determine which land cover and socioeconomic variables were most predictive of outdoor cat abundance. Our team walked linear transects in neighborhoods across greater Washington D.C. and counted all of the outdoor cats and other mammals that we observed. We derived land cover data from Multi-Resolution Land Characteristics Consortium (USGS) and socioeconomic data from the US Census Bureau. 

Here, you will join us in our study by exploring cat abundance within a subset of our data.

## Grading

The points allotted for each question are provided in highlighted red bold text (e.g., [[1.0]]{class="score"}) within the question itself. When applicable, total points for a question may represent the sum of individually graded components, which are provided in red text (e.g., [[1.0]]{class="subscore"}).

Points may be deducted from each question's total: 

* [[50% per violation]]{class="subscore"} Use only functions that are listed in "Functions that you may use in this assignment";
* [[50%]]{class="subscore"} Do not include any assignments other than those specified in a question;
* [[25%]]{class="subscore"} Do not use numeric column indexing for extracting data from data frames or named lists (e.g. `my_df[[1]]`);
* [[10%]]{class="subscore"} Code parsimony;
* [[10%]]{class="subscore"} Adhere to the formatting rules in **Lesson 3.5: Course Style Guide, part 3**;
* [[10%]]{class="subscore"} Ensure that the class of your response is consistent with the wording of the question (e.g., if you are asked to return a "value" or "vector", ensure that the resultant object is not a data frame).

*Note: The maximum deduction is the total points value for a given question*

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Click the blue button below to view the functions that you may use in completing this problem set. Make sure that you know what each function does (use `?[function name]` if you do not). Do not use any functions outside of this list!
:::

<!-- Note, the below is an accordion, which was styled in the css section -->

::: Accordion
<button class="accordion">Functions that you may use in this assignment</button>

::: {.panel}

**Important!** Primitive functions and functions in the *base* package are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *purrr*, *readr*, and *tidyr* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, the `%>%` function is imported by the *dplyr* (core tidyverse) library. Regex metacharacters are not R functions and may be used as needed!

In this assignment, you may **only** use the following R functions in your submitted R script (but you may use additional functions to explore the data):

* `.Primitive, ()`
* `.Primitive, <-`
* `.Primitive, =`
* `.Primitive, :`
* `.Primitive, ~`
* `.Primitive, <=`
* `.Primitive, >`
* `.Primitive, ==`.
* `.Primitive, /`.
* `.Primitive, as.numeric`
* `.Primitive, c`
* `.Primitive, sum`
* `base::is.na`
* `base::library`
* `dplyr::across`
* `dplyr::case_when`
* `dplyr::filter`
* `dplyr::full_join`
* `dplyr::if_else`
* `dplyr::left_join`
* `dplyr::mutate`
* `dplyr::summarize`
* `forcats::fct_relevel`
* `ggplot2::+`
* `ggplot2::aes`
* `ggplot2::element_blank`
* `ggplot2::element_blank`
* `ggplot2::element_rect`
* `ggplot2::element_text`
* `ggplot2::geom_bar`
* `ggplot2::ggplot`
* `ggplot2::labs`
* `ggplot2::scale_y_continuous`
* `ggplot2::theme`
* `lubridate::as_date`
* `magrittr::%>%`
* `purrr::pluck`
* `readr::read_rds`
* `stringr::str_replace`
* `tidyr::unite`

:::

:::

## About the data 

:::: Accordion
<button class="accordion">Metadata for this assignment</button>

:::: {.panel}

To explore socioeconomic and land cover predictors of outdoor cat abundance, we conducted distance sampling along linear transects (length = 100 meters). The data include the following files:

**[sites]{.mono}**: Information about the sites that were visited

* [site_id]{.mono}, character: Primary key
* [percent_impervious]{.mono}, character: Proportion of impervious surface (e.g., pavement, rooftops) within 100 m of the center of the geographic site center
* [percent_college]{.mono}, character: Proportion of adults with at least an associate degree within a site's US Census tract
* [population_density]{.mono}, character: People per km^2^ within a site's US Census tract
* [median_income]{.mono}, character: Median household income within a site's US Census tract

**[visits]{.mono}**: Information on a visit to a site on a given day

* [visit_id]{.mono}, character: Primary key
* [site_id]{.mono}, character: Foreign key to the ]{.mono}sites]{.mono} table
* [year]{.mono}, numeric: The year a site was visited
* [month]{.mono}, character: The full name of the month in which a site was visited
* [day]{.mono}, numeric: The day of the month in which a site was visited
    
**[detections]{.mono}**: Information of observations recorded during a transect count

* [detection_id]{.mono}, character: Primary key
* [visit_id]{.mono}, character: Foreign key to the ]{.mono}visits]{.mono} table
* [species]{.mono}, character: The type of animal that was detected, which should be cats, dogs, and squirrels
* [count]{.mono}, numeric: The number of animals detected on a given visit and at a given distance from the transect line
* [distance]{.mono}, numeric: The distance, in meters, between the transect line and the detected animal

Note: The remaining files are what I call **lifelines**. The names of these files are equivalent to those that you are asked to assign during the problem set. If you get stuck on a given question, please feel free to use a lifeline file to help you solve the subsequent questions!

:::

:::

## Setup

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i>  Remember that it is best practice to start with a clean R Studio session (i.e., close any script files, remove objects from your global environment, and clear your history).
:::

::: now_you

1\. [[0.50]]{class="score"} Before opening your script file for this problem set, change the name of `problem_set_5.R` to "problem_set_5_[last name]_[first name].R" using a snake case naming convention. *Note: You will submit this script file as your assignment*.

:::

::: now_you

2\. [[0.25]]{class="score"} Open the script file in RStudio and attach the core tidyverse packages to your current R session.

:::

::: now_you

3\. [[0.25]]{.score} Read in `district_cats.rds` and globally assign the list object to the name `dc_cats`.

:::

## Data tidying

Whenever you first receive a dataset, you must ensure that the data follow tidy data conventions. If they do not, you should always normalize the data prior to proceeding.

::: now_you

4\. [[1.0]]{.score} The table represented by the list item `visits` is unfortunately not tidy. Normalize this list item:

* Extract `visits` from `dc_cats`.
* Combine the columns `year`, `month`, and `day` into a single ISO 8601 formatted date class column.
* Globally assign the resultant object to the name `visits_tidy`.

:::

## Data cleaning

The data cleaning process comes after data tidying. Data cleaning does not represent fixing violations of tidy data rules (i.e., data normalization). Instead, this is the process in which we get to know the values in our data and search for and repair potential problems with the values themselves.

One problem that we often encounter is that a variable, or variables, may not be stored in the appropriate class or classes.

::: now_you

5\. [[1.5]]{.score} The data frame represented by the list item named `sites` has a primary key and a few columns of interest that should be numeric but are currently character vectors.

* Extract `sites` from `dc_cats`;
* As parsimoniously as possible, convert `percent_impervious` and `population_density` to numeric;
* Maintain only the primary key and the two columns that you converted to numeric;
* Globally assign the resultant object to the name `site_characteristics`.

:::

All sorts of things can go wrong when we are dealing with character values! ...

::: now_you

6\. [[1.5]]{.score} The list item `detections` in the list `district_cats` contains misspellings, inconsistencies in the species column, and more information than we are currently interested in.

* As parsimoniously as possible, and without using `if_else()` or `case_when()`, repair the spelling within the `species` variable such that the values are provided as "cat", "dog" and "squirrel";
* Generate a summary table where the variable `count` displays the total count of animals observed per `species` and `visit_id`;
* Globally assign the resultant object to the name `observations`.

:::

## Derived variables

With our data tidy and clean, it is now time to think about our question. 

### Land cover

Among other things, our team is interested in how the presence of outdoor cats varies at different levels of human land use intensity. We use the proportion of impervious surface as a proxy measure of this and often bin the data into "rural", "low-intensity suburb", "high-intensity suburb", and "urban" land use classes

We will use the following table to classify the numeric values:

```{r class_table, echo = FALSE, eval = TRUE}
tribble(
  ~ "Impervious surface", ~"Classified land-use intensity",
  "0 - 15%", "Rural",
  "> 15 - 25%", "Low-intensity suburb",
  "> 25 - 40%", "High-intensity suburb",
  "> 40%", "Urban"
) %>% 
  knitr::kable(format = "html") %>% 
  kableExtra::kable_styling()
```

<br>

::: now_you

7\. [[1.5]]{.score} Classify `percent_impervious` in the data frame `site_characteristics` as described in the table above. In doing so:

* Assign the name `urban_intensity` to the derived column;
* Maintain only the fields `site_id` and `urban_intensity`; 
* Globally assign the resultant object to the name `land_use`.

:::

### Cat detections

Now it's time to think of cat occurrence. In this section you will summarize and visualize the number of visits where cats were observed. If you explore the data, you will notice that there were no cats observed during a lot of the visits!

::: now_you

8\. [[2.0]]{.score} Using `observations` and `visits_tidy` (or their lifelines):

* Create a column that contains the value 1 for visits where at least one cat was detected and the value 0 for visits where no cats were detected;
* Assign the name `presence_absence` to the derived variable;
* Maintain only the variables `visit_id`, `site_id`, and `presence_absence` in the resultant object;
* Globally assign the resultant summary table to the name `cat_occurrence`.

:::

::: {.now_you}

9\. [[1.5]]{.score} Let's visualize the proportion of visits with cat detections for each urban intensity class. Using `cat_occurrence` and `land_use` (or their lifelines), generate a bar plot where:

* The x-axis represents the classified urban intensity;
* The y-axis is the proportion of visits in which a cat was observed (number of visits where cats were present / total number of visits);
* The levels of `urban_intensity` are arranged in the order "Rural", "Low-intensity suburb", "High-intensity suburb" and "Urban";
* The x-axis is titled "Urban intensity", the y-axis is titled "Proportion of visits with cats present", and the plot is titled "Proportion of cat detections across urban intensity classes";
* The y-axis ranges from 0 to 0.8;
* You use three or more arguments of `theme()` to modify the theme elements of the plot however you like!

:::

<hr>

<!-- Note: The below is the javascript that I use to make the accordion button work -->

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>

