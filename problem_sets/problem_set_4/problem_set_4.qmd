---
title: "Problem set 4: Cicada emergence"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

<!-- knitr setup --> 

```{r knitr_setup, include = FALSE}
options(knitr.table.format = "html")

knitr::opts_chunk$set(eval = FALSE)

library(tidyverse)
```

<hr>

![](https://lh3.googleusercontent.com/1dfPLMi9HIkLg746ltRkcuGVwcCocA33wDJYovxvZbsIUNOzSzQyASJ7869x-w8H6R989ym_onoKfEoUfB9WQXsXziWvDAm67RLpqeyFOVaTT6lUTVhkoDtCO-gTQjrmDYZ29sO1zgo=w2400?source=screenshot.guru){.intro_image}

In the spring of 2021, the Brood X cicadas emerged throughout much of the Mid-Atlantic region of the United States. Brood X are periodical cicadas that spend most of their lives underground, emerge in the spring every 17 years, breed, and then die. In their adult form, they produce an incredibly loud song to attract mates.

Our team at the Smithsonian Migratory Bird Center deployed automated sound recording units (ARUs) throughout the District of Columbia, Maryland, and Virginia. Our goal for this study was to determine how bird song may vary in response to cicada noise along a gradient of anthropogenic noise and urban intensity.

In this exercise, you will explore cicada observations collected by iNaturalist community science participants. Early reports by participants helped us to determine the appropriate locations to place our ARUs.

## Grading

The points allotted for each question are provided in highlighted red bold text (e.g., [[1.0]]{class="score"}) within the question itself. When applicable, total points for a question may represent the sum of individually graded components, which are provided in red text (e.g., [[1.0]]{class="score"}).

Points may be deducted from each question's total: 

* [[50% per violation]]{class="subscore"} Use only functions that are listed in "Functions that you may use in this assignment";
* [[50%]]{class="subscore"} Do not include any assignments other than those specified in a question;
* [[25%]]{class="subscore"} Do not use numeric column indexing for extracting data from data frames or named lists (e.g. `my_df[[1]]`);
* [[10%]]{class="subscore"} Code parsimony;
* [[10%]]{class="subscore"} Adhere to the formatting rules in **Lesson 3.5: Course Style Guide, part 3**;
* [[10%]]{class="subscore"} Ensure that the class of your response is consistent with the wording of the question (e.g., if you are asked to return a "value" or "vector", ensure that the resultant object is not a data frame).

*Note: The maximum deduction is the total points value for a given question*

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Click the blue button below to view the functions that you may use in completing this problem set. Make sure that you know what each function does (use `?[function name]` if you do not). Do not use any functions outside of this list!
:::

<!-- Note, the below is an accordion, which was styled in the css section -->

:::: Accordion
<button class="accordion">Functions that you may use in this assignment</button>

:::: {.panel}

**Important!** Primitive functions and functions in the *base* package are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *purrr*, *readr*, and *tidyr* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, the `%>%` function is imported by the *dplyr* (core tidyverse) library. Regex metacharacters are not R functions and may be used as needed!

In this assignment, you may **only** use the following R functions in your submitted R script (but you may use additional functions to explore the data):

* `.Primitive, (...)`
* `.Primitive, <-`
* `.Primitive, =`
* `.Primitive, ==`
* `.Primitive, !`
* `.Primitive, >`
* `.Primitive, ~`
* `.Primitive, c`
* `.Primitive, is.na`
* `base::%in%`
* `base::library`
* `dplyr::arrange`
* `dplyr::desc`
* `dplyr::filter`
* `dplyr::n`
* `dplyr::pull`
* `dplyr::select`
* `dplyr::semi_join`
* `dplyr::slice_max`
* `dplyr::summarize`
* `ggplot2::+`
* `ggplot2:aes`
* `ggplot2::element_blank`
* `ggplot2::element_rect`
* `ggplot2::element_text`
* `ggplot2::expansion`
* `ggplot2::facet_wrap`
* `ggplot2::geom_density`
* `ggplot2::ggplot`
* `ggplot2::labs`
* `ggplot2::scale_fill_brewer`
* `ggplot2::scale_y_continuous`
* `ggplot2::theme`
* `magrittr::%>%`
* `purrr::keep`
* `purrr::pluck`
* `readr::read_rds`
* `stringr::str_detect`

:::

:::

## About the data 

:::: Accordion
<button class="accordion">Metadata for this assignment</button>

:::: {.panel}

This problem set will use the file `cicadas_2021.rds`. The data were originally downloaded using the *rinat* package and represent iNaturalist observations. The locations of observations were derived with Program R. The data are arranged as a list that contains the following data frames:

`brood_x`:

* [species]{.mono}, character: The scientific name (genus and species) of each species of brood X cicada.
* [common_name]{.mono}, character: The common name of each species of brood X cicada.

`cicada_observations_2021`:

* [datetime]{.mono}, datetime: The date and time in which an observation took place.
* [scientific_name]{.mono}, character: The genus and species (if known) observed.
* [address]{.mono}, character: The location in which an observation was made (based on the coordinates of the observation).
* [city]{.mono}, character: The US city in which an observation was made.
* [state]{.mono}, numeric: The US state in which an observation was made.
* [quality_grade]{.mono}, character: Whether the observation was verified by experts ("research" grade) or has not been able to be verified ("casual" grade).

:::
:::

## Setup

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i>  Remember that it is best practice to start with a clean R Studio session (i.e., close any script files, remove objects from your global environment, and clear your history).
:::

::: now_you

1\. [[0.50]]{class="score"} Before opening your script file for this problem set, change the name of `problem_set_4.R` to "problem_set_4_[last name]_[first name].R" using a snake case naming convention. *Note: You will submit this script file as your assignment*.

:::{class="mysecret"}

<i class="fas fa-user-secret fa-2x"></i>  For example, Tara would name her file `problem_set_4_snedgen_tara.R`. 

:::

:::

::: now_you

2\. [[0.50]]{class="score"} Open the script file in RStudio and attach the core tidyverse packages to your current R session.

:::

## Read and pre-process the data

The `cicadas_2021.rds` file represents iNaturalist observations of Brood X periodical cicadas from February through April of 2021.

::: now_you

3\. [[0.50]]{class="score"} Read in `data/raw/cicadas_2021.rds` and globally assign the list to the
name `cicada_list`.

:::

::: now_you

4\. [[1.50]]{.score}  In a single, chained analysis with no intermediate assignments:

* Subset `cicada_list` to `cicada_observations_2021`
* Without using `c()` or `%in%`, subset to observations in Maryland, Virginia, and the District of Columbia ("MD", "VA", and "DC");
* Subset to observations where data values are not `NA`;
* Subset to research grade observations (variable = `quality_grade`);
* Change the variable name `scientific_name` to `species`;
* Remove the columns `city`, `state`, and `quality_grade`;
* Globally assign the resultant object to the name `cicada_research_quality`.

:::

## Addressing cicada species

Brood X cicada are comprised of three species, *Magicicada cassini*, *Magicicada septendecim*, and *Magicicada septendecula* (*Note: See the list item `brood_x` in `cicada_list`). Any other `species` in `cicada_research_quality` either does not represent Brood X species or represents an observation that could only be identified to genus.

::: now_you

5\. [[1.0]]{.score} This study is focused on the three species of Brood X cicada. Without using `filter()` please:

* Subset `cicada_research_quality` to the three Brood X species;
* Globally assign the resultant object to the name `brood_x_observations`.

:::

## Help me select my sites!

I am looking for sites that our team can visit that will provide us with a lot of cicada song recordings!

### The park problem

We are only permitted to set up our automated recording units in area parks and outside of our lab at the Smithsonian's National Zoo and Conservation Biology Institute.

::: now_you

6\. [[1.50]]{.score} Unfortunately for us, "Park" is a common street name and there is a type
of road in the area called a "parkway" (which may be abbreviated as "pkwy"). Let's explore values in the `address` variable. *Without* using `filter()`, extract a vector of addresses from the data frame `brood_x_observations` such that the extracted values:

* Starts with the word "Park" or "park", *or*
* Contain the strings "Parkway", "parkway", "Pkwy", or "pkwy";
* Are globally assigned to the name `not_parks`.

:::

::: now_you

7\. [[1.0]]{.score} Subset `brood_x_observations` such that:

* The `address` variable contains "park", "Park", or "Zoo";
* The `address` is *not* found in the vector assigned to the name
  `not_parks`;
* The resultant object is a tibble data frame that is globally assigned to the name `brood_x_parks`.

:::

### Bang for our research buck

We want to visit the sites in our region that will hopefully yield the highest number of cicadas for our recordings!

::: {.now_you}

8\. [[1.0]]{.score} Using `brood_x_parks`, generate a summary table that:

* Provides the number of observations of brood X cicada within parks where more than 40 cicadas have been observed;
* Is arranged from the highest to lowest number of cicada observations;
* Is globally assigned to the name `brood_x_park_summary`.

:::

::: {.now_you}

9\. [[2.50]]{.score} We want to start placing our ARUs at the four locations with the greatest number of cicada observations and figure out which of those locations had the earliest emergence of brood X cicadas. We will use a density plot to visualize the time of emergence. Within a single piped code block, use `brood_x_park_summary` and `brood_x_parks` to:

* Subset `brood_x_parks` to the four parks with the greatest number of
  cicada observations;
* Subset the resultant object to the observations in April of 2021;
* Generate a density plot, in which:
  * The `date` variable is mapped to the x-axis;
  * The `species` variable is mapped to fill color;
  * The geometry of the plot represents the statistical density of
    observations of each species, with the transparency altered such that all
    species densities are visible;
  * Each park is placed within its own facet and all of the facets are positioned in a single column;
  * The position of values on the y-axis for each facet is determined by the range of density values within a given park;
  * The position of values on the x-axis does *not* vary by park;
  * The scale of the y-axis for a given park ranges from 0 to a value of 0.20 times above the maximum brood X observation density for that park;  
  * The color scale associated with `species` is determined using
    `scale_fill_brewer()`;
  * The plot is titled "Density distribution of Brood X cicada observations
    by date"
  * The x-axis is labeled "Date";
  * The y-axis is labeled "Density";
  * The legend is labeled "Species";
  * The panel background of the plot is white and has a black border;
  * No grid lines are displayed;
  * All text is in Times New Roman;
  * The plot title is in 16 pt font;
  * The facet strip text and axis titles are in 14 pt font;

:::
<hr>

<!-- Note: The below is the javascript that I use to make the accordion button work -->

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>
