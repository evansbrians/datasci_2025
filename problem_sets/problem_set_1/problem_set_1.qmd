---
title: "Problem set 1: R foundations"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

<!-- knitr setup --> 

```{r knitr_setup, include = FALSE}
options(knitr.table.format = "html")

knitr::opts_chunk$set(eval = FALSE)

library(tidyverse)
```

<hr>

![](../../images/amro.jpeg){.intro_image}

The Smithsonian Migratory Bird Center's [Neighborhood Nestwatch](https://nationalzoo.si.edu/migratory-birds/neighborhood-nestwatch){target="_blank"} program is a participatory science project associated with residential landscapes in the Eastern United States. Technicians visit a number of households, schools, and local parks to count birds, band birds, survey habitat features, and train participants on how to search for bird nests and marked individuals. In this exercise, we will explore point count data collected at Washington DC sites in 2018. I (Brian) am a principle investigator for this project, so we will be exploring Neighborhood Nestwatch a good bit throughout this course!

This exercise is an evaluation of your comprehension of preliminary course material and Module 1.

## Grading

The points allotted for each question are provided in highlighted red bold text (e.g., <span class = "score">[1.0]</span>) within the question itself. When applicable, total points for a question may represent the sum of individually graded components, which are provided in red text (e.g., <span class = "subscore">[1.0]</span>).

**Points may be deducted from each question's total:** 

* [[50% per violation]]{class="subscore"} Use only functions that are listed in "Functions that you may use in this assignment";
* [[50%]]{class="subscore"} Do not include any assignments other than those specified in a question;
* [[25%]]{class="subscore"} Do not use numeric column indexing for extracting data from data frames or named lists (e.g. `my_df[[1]]`);
* [[10%]]{class="subscore"} Adhere to the formatting rules in **Lesson 1.6: Course Style Guide, part 1**;
* [[10%]]{class="subscore"} Ensure that the class of your response is consistent with the wording of the question (e.g., if you are asked to return a "value" or "vector", ensure that the resultant object is not a data frame).

*Note: The maximum deduction is the total points value for a given question*

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Click the blue button below to view the functions that you may use in completing this problem set. Make sure that you know what each function does (use `?[function name]` if you do not). Do not use any functions outside of this list!
:::

:::: Accordion
<button class="accordion">Functions that you may use in this assignment</button>

:::: {.panel}
<br>
In this assignment, you may use **only** the following R functions in your answers (*Note: If you are unclear on what a given function does, use `?` to view the help file!*):

**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *tibble* and *tidyverse* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, the `%>%` function is imported by the *dplyr* (core tidyverse) library.

* `.Primitive, (...)`
* `.Primitive, <-`
* `.Primitive, =`
* `.Primitive, ::`
* `.Primitive, [...]`
* `.Primitive, [[...]]`
* `.Primitive, ==`
* `.Primitive, c`
* `.Primitive, class`
* `base::%in%`
* `base::factor`
* `base::levels`
* `base::library`
* `base::mean`
* `base::summary`
* `base::typeof`
* `base::unique`
* `dplyr::arrange`
* `dplyr::desc`
* `dplyr::rename`
* `dplyr::slice_head`
* `dplyr::slice_tail`
* `lobstr::ref`
* `magrittr::%>%`
* `readxl::read_excel`
* `utils::str`
::::

::::

## About the data 

This problem set will use `bird_counts.xlsx`, a Microsoft Excel file that contains a subset of records from the Smithsonian Migratory Bird Center's <a href="https://nationalzoo.si.edu/migratory-birds/neighborhood-nestwatch">Neighborhood Nestwatch</a> (NN) program. We will use data from the worksheet "point_count_observations", which describe the number of birds counted at a given site and provide natural history information for the counted birds. 

::: Accordion
<button class="accordion">Click this button to learn more!</button>

::: {.panel}

Variables in the "point_count_observations" worksheet of `bird_counts.xlsx` include:

* `site` (character): The location where birds were observed;
* `species` (character): A four-letter code for the species banded;
* `foraging` (character): Where a given species of bird spends most of its time foraging (aerial, bark, foliage, or ground);
* `diet` (character): The primary diet of a given species of bird (granivore, insectivore, omnivore, or nectarivore).
* `count` (numeric): The quantity of a given species observed during each point count. 

:::
:::

## Getting started

::: mysecret

<i class="fas fa-user-secret fa-2x"></i>  Remember that it is best practice to start with a clean R Studio session (i.e., close any script files, remove objects from your global environment, and clear your history).

:::

1\. [[1.0]]{.score} Before opening your script file for this problem set, change the name of the `problem_set_1.R` to "problem_set_1_[last name]_[first name].R" using a snake case naming convention. *Note: You will submit this script file as your assignment*.

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x" style="padding-right: 6px;"></i>  Hints: 

  * I would name my file `problem_set_1_evans_brian.R`.
  * See ***Preliminary Lesson one: R and RStudio*** and "Naming conventions" in **1.5 Assignments** for a definition of snake case.
:::

2\. [[0.5]]{.score} Open the script file in RStudio and attach the tidyverse metapackage to your current R session.

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x" style="padding-right: 6px;"></i>  Hint: See ***1.2 Getting started*** and "Package environments" in ***1.3 R Objects***.
:::

3\. [[1.0]]{.score} Using the *relative file path*, read in the worksheet "point_count_observations" from the Microsoft Excel file `data/raw/bird_counts.xlsx` as a data frame and assign the object to the name `bird_counts`. Make sure that your column names match the variables described in *About the data*!

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x" style="padding-right: 6px;"></i>  Hints: 

* See ***Preliminary Lesson one: R and RStudio*** (The environment)
* See ***1.3 R objects*** and ***1.4 Importing, exploring, and exporting data***
* See the variable definitions in *About the data* (Click the button).
:::

## Exploring your data

4\. [[1.0]]{.score} Explore the structure of `bird_counts`:

* [[0.25]]{.subscore} Write a line of code that generates a one-value character vector that describes how the object assigned to the name `bird_counts` is stored in your computer's memory.
* [[0.25]]{.subscore} Write a line of code that generates a character vector that describes the class of the object assigned to the name `bird_counts`.
* [[0.25]]{.subscore} Write a line of code that prints the structure of the object assigned to the name `bird_counts`.
* [[0.25]]{.subscore} Write a line of code that prints a reference tree for *all objects in your global environment* (i.e., how the data are stored in your computer's random access memory).

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x" style="padding-right: 6px;"></i>  Hint: See ***1.3 R Objects*** (bullet points 1-3) and ***1.5 Assignments*** (bullet point 4).
:::

5\. [[2.0]]{.score} Subset and arrange `bird_counts`:

* [[0.25]]{.subscore} Subset `bird_counts` to the first five rows.
* [[0.25]]{.subscore} Subset `bird_counts` to the last three rows.
* [[0.50]]{.subscore} Arrange the rows of `bird_counts` by the variable `count` in descending order.
* [[0.50]]{.subscore} Subset `bird_counts` to the species "CACH" (Carolina chickadee).
* [[0.50]]{.subscore} Subset `bird_counts` to the species "AMRO" (American robin), "GRCA" (Gray catbird), and "NOCA" (Northern cardinal). 

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x" style="padding-right: 6px;"></i>  Hints:

  * See ***1.4 Importing, exploring, and exporting data*** (bullet points 1-3)
  * See ***Preliminary lesson 4: Indexing*** and ***1.3 R Objects*** (bullet points 4-5)
  * Be careful when addressing bullet points 4-5 (and several questions below)! The extraction operator `$` is not among the functions that you may use for this lesson!
:::

6\. [[1.0]]{.score} Describe and modify the variables assigned to `bird_counts`:

* [[0.50]]{.subscore} The variable `diet` represents a character vector. Subset the data to a character vector of unique character values.
* [[0.25]]{.subscore} In a single line of code, generate a statistical summary for all of the variables in `bird_counts`.
* [[0.25]]{.subscore} Without the use of the `<-` function, change of the name of the variable `species` to `species_code`.

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x" style="padding-right: 6px;"></i>  Hints: 

* See ***Preliminary lesson 4: Indexing*** and ***1.3 R Objects*** (bullet point 1)
* See ***1.4 Importing, exploring, and exporting data*** (bullet points 1-2)
* See ***1.5 Assignments*** (bullet point 3).
:::

## Assignments

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x" style="padding-right: 6px;"></i>  Hint: See ***Preliminary lesson 4: Indexing***, ***1.3 R Objects***, and ***1.5 Assignments*** for each of the questions in this section.
:::

7\. [[1.0]]{.score} The code below represents a chained analysis — each step in the process is dependent on the output of a previous step. This is accomplished here by assigning the object generated at each step of the chain to a name.

```{r}
diets <- bird_counts$diet

diets_factor <- 
  factor(diets)

typeof(diets_factor)
```

* [[0.50]]{.subscore} Modify this operation such that only "Functions that you may use in this assignment" are used and the output is produced with a single, *nested* code block without assigning any names to your global environment.
* [[0.50]]{.subscore} Modify this operation such that only "Functions that you may use in this assignment" are used and the output is produced with a single, *piped* code block without assigning any names to your global environment.

8\. [[0.50]]{.score} Modify this operation such that only "Functions that you may use in this assignment" are used, there are no nested functions, and the output is produced with a single, piped code block with no global assignments:

```{r}
levels(
  factor(bird_counts$foraging)
)
```

9\. [[1.0]]{.score} The code below represents a chained analysis where the object produced at each step in the chain is assigned to a name. Modify this operation such that no names are assigned to the global environment and each step in the chain is connected by a pipe.

```{r}

bird_counts_chickadee <-
  bird_counts[bird_counts$species == "CACH", ]

chickadee_counts <- bird_counts_chickadee$count

mean(chickadee_counts)
```

## Code styling

10\. [[1.0]]{.score} The code below contains five violations of the "Course Style Guide". Without removing comments or changing the code output, modify the code block such that it follows the conventions of the style guide. 

```{r}
birdCountsSorted =
  bird_counts%>% 
  
  # Arrange by site and species, alphabetically:
  arrange(site,species)
```

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x" style="padding-right: 6px;"></i>  Hints: 

* See ***1.6 Course style guide***
* Only styling of the code must be modified!
* We have not arranged a data frame by two variables previously. If you find this usage confusing, please see `?arrange` for more information.
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>

