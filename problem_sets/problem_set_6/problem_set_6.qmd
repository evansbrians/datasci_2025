---
title: "Problem set 6: Iteration with District birds"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
project:
  execute-dir: project
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

<!-- knitr setup --> 

```{r knitr_setup, include = FALSE}
options(knitr.table.format = "html")

knitr::opts_chunk$set(eval = FALSE)

library(tidyverse)
```

<hr>

![](https://mybeautifulworldblog.com/wp-content/uploads/2015/06/carolina-wren-willow-dk7a2608c2a9-maria-de-bruyn-res.jpg){.intro_image}

In this exercise, you will (once again) be exploring data associated with a long-term study of songbird survival in metropolitan Washington D.C. ([Evans et al. 2015](https://esajournals.onlinelibrary.wiley.com/doi/abs/10.1890/14-0171.1){target="_blank"}). For this study, researchers banded and measured birds in parks and homeowner's yards throughout the Washington D.C. area. This problem set will evaluate your ability to understand the concepts covered in ***Module 6: Programming I (custom functions & iteration)*** while providing you more opportunities to enhance your understanding of content from previous modules. For the latter, I have provided questions that draw attention to elements of the earlier modules that may be particularly challenging. These include:

* Question 3: Subsetting vectors (***Lesson 4.4*** )
* Question 4: Joining data (***Lesson 3.4*** )
* Question 5: Advanced filtering techniques (***Lesson 4.2*** ) and factors (***Lesson 5.3*** )
* Question 10: Regex (***Lessons 4.3*** )

## Grading

The points allotted for each question are provided in highlighted red bold text (e.g., [[1.0]]{class="score"}) within the question itself. When applicable, total points for a question may represent the sum of individually graded components, which are provided in red text (e.g., [[1.0]]{class="subscore"}).

Points may be deducted from each question's total: 

* [[50% per violation]]{class="subscore"} Use only functions that are listed in "Functions that you may use in this assignment";
* [[50%]]{class="subscore"} Do not include any assignments other than those specified in a question;
* [[25%]]{class="subscore"} Do not use numeric column indexing for extracting data from data frames or named lists (e.g. `my_df[[1]]`);
* [[10%]]{class="subscore"} Code parsimony;
* [[10%]]{class="subscore"} Adhere to the formatting rules in **Lesson 3.5: Course Style Guide, part 3**;
* [[10%]]{class="subscore"} Ensure that the class of your response is consistent with the wording of the question (e.g., if you are asked to return a "value" or "vector", ensure that the resultant object is not a data frame).

*Note: The maximum deduction is the total points value for a given question*

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Click the blue button below to view the functions that you may use in completing this problem set. Make sure that you know what each function does (use `?[function name]` if you do not). Do not use any functions outside of this list!
:::

<!-- Note, the below is an accordion, which was styled in the css section -->

::: Accordion
<button class="accordion">Functions that you may use in this assignment</button>

::: {.panel}

::: mysecret

<i class="fas fa-user-secret fa-2x"></i> [**Important!**]{style="font-size: 1.25em; padding-left: 0.5em;"}

* Primitive functions, as well as functions in the *base*, *stats*, and *utils* packages, are loaded by default when you start an R session.
* Functions in *dplyr*, *ggplot2*, *lubridate*, *purrr*, *readr*, *stringr*, *tibble*, *tidyr*, and *tidyverse* are loaded with `library(tidyverse)`.
* The *magrittr* `%>%` and the *rlang* function `set_names` are made available with `library(tidyverse)`/
* The *tidyselect* function `select` must be referenced with `tidyselect:::select`.
* Regex metacharacters are not functions!

:::

**Important!** Primitive functions and functions in the *base* package are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *purrr*, *readr*, and *tidyr* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, the `%>%` function is imported by the *dplyr* (core tidyverse) library. Regex metacharacters are not R functions and may be used as needed!

In this assignment, you may **only** include the following pre-written R functions in your submitted R script or custom functions that you have written. You may use additional functions to explore the data but please do not include this in your submitted script.

* `.Primitive, (...)`
* `.Primitive, {...}`
* `.Primitive, {{...}}`
* `.Primitive, <-`
* `.Primitive, =`
* `.Primitive, :`
* `.Primitive, ~`
* `.Primitive, ==`
* `.Primitive, !=`
* `.Primitive, >`
* `.Primitive, c`
* `.Primitive, if(...) {...} else {...}`
* `base::function`
* `base::library`
* `base::list.files`
* `base::list2env`
* `base::max`
* `base::mean`
* `base::rm`
* `base::sort`
* `base::unique`
* `dplyr::arrange`
* `dplyr::bind_rows`
* `dplyr::desc`
* `dplyr::distinct`
* `dplyr::filter`
* `dplyr::if_all`
* `dplyr::if_any`
* `dplyr::left_join`
* `dplyr::mutate`
* `dplyr::n`
* `dplyr::pull`
* `dplyr::select`
* `forcats::fct_collapse`
* `forcats::fct_relevel`
* `lubridate::year`
* `magrittr::%>%`
* `purrr::map`
* `readr::read_rds`
* `rlang::set_names`
* `tidyselect:::select`

:::

:::

## About the data 

For this problem set, we will use the file [dc_birds.rds]{.mono}. The data are stored as a list with the following list items (click each button to see variable definitions):

The data are stored in a list with the name [dc_birds.rds]{.mono} that contains the following list items:

<button class="accordion">**[visits]{.mono}**: A tibble data frame that provides information on a visit to a site on a given day.</button>

::: panel

* [visit_id]{.mono}, character: Primary key representing a unique identifier for each visit
* [site_id]{.mono}, character: Foreign key to the [sites]{.mono} table
* [date]{.mono}, date: The date a site was visited

:::

<button class="accordion">**[birds]{.mono}**: A tibble data frame describing the bird species of the DC region and their life histories.</button>

::: panel

* [species]{.mono}, character: Primary key representing a unique identifier for each bird species (4 letter alpha code for a given species)
* [common_name]{.mono}, character: The US common name of the bird species
* [foraging]{.mono}, character: Where the bird typically feeds (foraging guild)
* [diet]{.mono}, character: The primary type of food the bird eats (dietary guild)

:::

<button class="accordion">**[measures]{.mono}**: A tibble data frame decribing measurements recorded for individual banded birds.</button>

::: panel

* [bird_id]{.mono}, character: Primary key representing a unique identifier for each bird
* [visit_id]{.mono}, character: Foreign key to the visits table
* [spp]{.mono}, character: Foreign key to the birds table
* [wing]{.mono}, numeric: The length of a bird's wing, in millimeters
* [age]{.mono}, character: The observed age of the bird during the banding event, classified as:
  * "AHY": Adult bird, after hatch year
  * "ASY": Adult bird, after second year
  * "HY": Juvenile bird, hatch year
  * "SY": Adult bird, second year
  * "U": Unknown
* [sex]{.mono}, character: The observed sex of the bird during the banding event, classified as:
  * "F": Female
  * "M": Male
  * "U": Unknown
* [mass]{.mono}, numeric: The mass of the bird, in grams

:::

*Note: [dc_birds.rds]{.mono} includes `sites` and `counts`, but those list items will not be used in the problem set!*

## Setup

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i>  Remember that it is best practice to start with a clean R Studio session (i.e., close any script files, remove objects from your global environment, and clear your history).
:::

::: now_you

1\. [[0.25]]{class="score"} Save this document to your project folder with naming convention "problem_set_6_[last name]_[first name].R". For example, Tara would name the file `problem_set_6_snedgen_tara.R`.

:::

::: now_you

2\. [[0.25]]{class="score"} Attach the tidyverse metapackage to your current R session.

:::

::: now_you

3\. [[0.50]]{.score} The data file for this problem set is `dc_birds.rds`. This is a list file comprised of five separate tibbles, assigned to the names: `birds`, `counts`, `measures`, `sites`, and `visits.` In a single, chained analysis:

* Read in the list;
* Subset to the list items `visits`, `birds`, and `measures`;
* Globally assign each list item name to your global environment.

:::

## Basic wrangling tools review

The data are tidy, but that can sometimes present interesting challenges! We often have to extract data from multiple tables in order to conduct meaningful explorations or prepare data for analysis.

::: now_you

4\. [[1.25]]{.score} In a chained analysis that utilizes `birds`, `visits`, and `measures`:

* Combine the data frames and subset the variables such that the resultant variables are `bird_id`, `common_name`, `site_id`, `date`, `age`, `sex`, `wing`, and `mass` (in that order).
* Globally assign the name `banding` to the resultant object.

*Hint: This will require multiple joins â€¦ carefully consider the primary and foreign keys for each join!*

In a separate code block from the above, remove the names `birds`, `measures`, and `visits` from your global environment.

:::

For this exploration of the data, we are only interested:

* Observations of the most commonly captured birds
* Birds of known sex and age
* Mass and wing measurement values that are *reasonably* correct.

::: now_you

5\. [[1.50]]{.score} Modify `banding` as parsimoniously as possible:

* Subset to species (`common_name`) with more than 100 observations;
* Using `if_all()` or `if_any()`, subset to observations where the `sex` and `age` of the bird is known (see variable descriptions above);
* Subset to observations in which `wing` measurements are greater than 40 mm;
* Subset to observations in which `mass` measurements are greater than 7 g;
* Modify the `age` variable, such that the age classes are a factor variable with the levels `juvenile` and `adult` (in that order; see variable descriptions above);
* Globally assign the name `banding_subset` to the resultant object.

*Hint: When you subset a variable using `filter()`, any rows with [NA]{.mono} values in the target variable are removed by default.*

In a separate code block from the above, remove the name `banding` from your global environment.

:::

## Custom functions

The code block below:

* Subsets `banding_subset` by row to the species (`common_name`) "Northern Cardinal";
* Extracts the numeric vector assigned to `mass`;
* Calculates the mean of the vector
* Prints a one-value numeric vector.


```{r}
banding_subset %>% 
  filter(common_name == "Northern Cardinal") %>% 
  pull(mass) %>% 
  mean()
```

::: now_you

6\. [[1.0]]{.score} Convert the above to a custom function that can be used to calculate the mean `mass` **or** `wing` of any species in `banding_subset`. Globally assign your function to the name `mean_species_var`.

**Extra credit** [[0.25]]{.subscore}! Modify the function such that it is not necessary to use quotation marks around `mass` or `wing` when it is used.

:::

### A different arrangement

The function `arrange` sorts the rows of a data frame by a variable or variables. The function is a more powerful/flexible version of the base R function `sort`. 

```{r}
banding_subset %>% 
  arrange(common_name)
```

One aspect of `arrange()` that Tara and I find annoying, however, is that you need to nest an additional function `desc()` to arrange rows descending order:

```{r}
banding_subset %>% 
  arrange(
    desc(common_name)
  )
```

You can, of course, use a negative symbol to sort the data frame by descending numeric values:

```{r}
# Arrange a numeric vector with a negative operator:

banding_subset %>% 
  arrange(-wing)

# Arrange a numeric vector with `desc()`:

banding_subset %>% 
  arrange(
    desc(wing)
  )
```

But neither Tara nor I like the inconsistency! Let's make our own custom function ...

::: now_you

7\. [[1.50]]{.score} Create a custom function that arranges *any* data frame in ascending *or* descending order by *any* variable in that object.

* The function should include the following arguments:
    * The data being sorted
    * The variable being sorted
    * The direction of arrangement (i.e., ascending or descending) (*Hint: See Lesson 6.3 Control flow if else*)
* The default behavior of the function should arrange the data in ascending order.
* Assign the function to the name `my_arrange`.
* Test the function in ascending and descending order with the `common_name` variable in `banding_subset`.
* Test the function in ascending and descending order with the `wing` variable in `banding_subset`.

:::

## Iteration

### Converting `for` loops to `map()`

The following for loop calculates the average mass of each species in
`banding_subset` and returns a tibble:

```{r, eval = FALSE}
# Generate a unique vector of species, arranged alphabetically:

species <-
  banding_subset %>% 
  pull(common_name) %>% 
  unique() %>% 
  sort()

# Create an output container to store the results of the for loop:

out_container <-
  vector(
    "list",
    length = length(species)
  )

# Iterate across species with a for loop:

for(i in seq_along(species)) {
  out_container[[i]] <-
    banding_subset %>% 
    filter(
      common_name == species[[i]]
    ) %>% 
    mutate(
      mean_mass = mean(mass)
    ) %>% 
    distinct(common_name, mean_mass)
}

# Combine list items, by row, into a tibble:

bind_rows(out_container)
```

::: now_you

8\. [[1.0]]{.score} Without generating any new global assignments, nor using any of the global assignments in the for loop example above (except `banding_subset`), replicate the results above using `purrr::map()`.

:::

*Note: Question 8 tests your understanding of purrr map functions ... in the real world I would obviously use `summarize()` for this!*

### Converting grouped operations to `map()`

Any function that follows `group_by()` or includes the argument `.by = ...` is fundamentally an iteration. For example, the following code block subsets `banding_subset` to records associated with the maximum wing length observed for each species:

```{r}
banding_subset %>% 
  filter(
    wing == max(wing),
    .by = common_name
  )
```

Under-the-hood, the above code block is an iteration. For each `common_name`, the code tests whether a given wing value is equivalent to the maximum wing value and then subsets the data to only the rows with the matching records (i.e., the maximum wing length value for a given species).

::: now_you

9\. [[1.25]]{.score} Use `purrr::map()` to repeat the operation above without the use of `group_by()` or `.by = ...`.

:::

## Mapping when it counts

We have only scratched the surface of what we can do with `purrr::map()` and we will continue to use this function (and its cousins) throughout the remainder of this course.

::: {.now_you}

10\. [[1.50]]{.score} Tara and I are ornithologists, so we end up working with data about birds *a lot*. In a single chained analysis:

* As parsimoniously as possible, use regex to provide a character vector of all files that contain "bird" and ends with "rds";
* Assign a name (of your choosing) to each value in the character vector;
* Use a `map()` function to read in all of the files at once;
* Assign each list item name to the global environment.
:::

Despite our somewhat lame pedagogical examples, hopefully you are beginning to grasp the power of iteration!

<hr>

<!-- Note: The below is the javascript that I use to make the accordion button work -->

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>

