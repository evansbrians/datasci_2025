---
title: "Problem set 2: Problem set training"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

<!-- knitr setup --> 

```{r knitr_setup, include = FALSE}
options(knitr.table.format = "html")

knitr::opts_chunk$set(eval = FALSE)

library(tidyverse)
```

<hr>
  ![](https://www.floridamuseum.ufl.edu/wp-content/uploads/sites/23/2020/04/Common-Coqui1-web-sized.jpg){.intro_image}

Long-Term Ecological Research (LTER) datasets are incredibly valuable as they provide a wide variety of ecological data for a system, but they are also often incredibly untidy. This week we will be exploring (and tidying) a modified version of a Coqui frog abundance dataset from the  [Luquillo LTER](https://luquillo.lter.network/){target="_blank"} in Puerto Rico. Coqui frogs are well known for their mating calls -- I highly recommend looking into it!

### Grading

The points allotted for each question are provided in highlighted red bold text (e.g., <span class = "score">[1.0]</span>) within the question itself. When applicable, total points for a question may represent the sum of individually graded components, which are provided in red text (e.g., <span class = "subscore">[1.0]</span>).

Points may be deducted from each question's total: 

* [[50% per violation]]{class="subscore"} Use only functions that are listed in "Functions that you may use in this assignment";
* [[50%]]{class="subscore"} Do not include any assignments other than those specified in a question;
* [[25%]]{class="subscore"} Do not use numeric column indexing for extracting data from data frames or named lists (e.g. `my_df[[1]]`);
* [[10%]]{class="subscore"} Adhere to the formatting rules in **Lesson 2.6: Course Style Guide, part 1**;
* [[10%]]{class="subscore"} Ensure that the class of your response is consistent with the wording of the question (e.g., if you are asked to return a "value" or "vector", ensure that the resultant object is not a data frame).

*Note: The maximum deduction is the total points value for a given question*


:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> Click the blue button below to view the functions that you may use in completing this problem set. Make sure that you know what each function does (use `?[function name]` if you do not). Do not use any functions outside of this list!
:::

<!-- Note, the below is an accordion, which was styled in the css section -->

:::: Accordion
<button class="accordion">Functions that you may use in this assignment</button>

:::: {.panel}

**Important!** Primitive functions and functions in the *base* package are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *readr*, and *tidyr* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, the `%>%` function is imported by the *dplyr* (core tidyverse) library.

In answering the questions for this assignment, you may **only** use the following R functions in your submitted R script (but you may use additional functions to explore the data):

* `.Primitive, ()`
* `.Primitive, =`
* `.Primitive, :`
* `.Primitive, ==`
* `.Primitive, >=`
* `.Primitive, <=`
* `.Primitive, /`
* `.Primitive, c`
* `base::%in%`
* `base::library`
* `base::list2env`
* `base::mean`
* `dplyr::filter`
* `dplyr::mutate`
* `dplyr::n`
* `dplyr::pull`
* `dplyr::rename`
* `dplyr::select`
* `dplyr::summarize`
* `ggplot2::+`
* `ggplot2::aes`
* `ggplot2::coord_flip`
* `ggplot2::element_blank`
* `ggplot2::element_line`
* `ggplot2::geom_boxplot`
* `ggplot2::ggplot`
* `ggplot2::scale_y_continuous`
* `ggplot2::theme`
* `magrittr::%>%`
* `readr::read_rds`
* `tidyr::drop_na`
* `tidyr::pivot_longer`
:::

:::

## About the data 

This problem set will use `coqui_counts.rds`, an untidy dataset that contains a subset of records from the Smithsonian Migratory Bird Center's <a href="https://nationalzoo.si.edu/migratory-birds/neighborhood-nestwatch">Neighborhood Nestwatch</a> (NN) program. NN is a community science project where scientists visits backyards, neighborhoods, and schools to conduct bird banding demonstrations and sample bird populations. The data include tables for sites, visits, point counts, and capture events, and a table that provides natural history information for observed birds. Geographic coordinate values have been jittered to protect the privacy of NN participants. 

::: Accordion
<button class="accordion">Click this button to learn more!</button>

::: {.panel}

In this lesson, we will explore the file `coqui_counts.rds`. The data are formatted as a tibble data frame object comprised of the following variables:

* `site` (character): The study area where an observation occurred;
* `coordinates` (character): The longitudinal and latitudinal coordinates of the site, in decimal degrees;
* `transect_id` (numeric, integer): A numeric identifier for the transects that were sampled;
* `habitat_class` (character): A code for the type of habitat where a transect occurred (e.g., G = "gap", G-E = "gap edge", F = "forest", E = "edge");
* `habitat` (character): The type of habitat where the transect occurred;
* `date` (character): The date of a given sampling event;
* `count_0-10m` (numeric, double): The number of coquies observed in the first 10 meters of the transect;
* `count_10-20m` (numeric, double): The number of coquies observed in the second 10 meters of the transect;
* `count_20-30m` (numeric, double): The number of coquies observed in the third 10 meters of the transect;

:::
:::

## Setup

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i>  Remember that it is best practice to start with a clean R Studio session (i.e., close any script files, remove objects from your global environment, and clear your history).
:::

:::{class="now_you"}
1\. [[1.0]]{class="score"} Before opening your script file for this problem set, change the name of
the `problem_set_2.R` to "problem_set_2_[last name]_[first name].R" using a snake case naming convention. For example, Tara would name her file `problem_set_3_snedgen_tara.R`. *Note: You will submit this script file as your assignment*.

:::

:::{class="now_you"}
2\. [[0.50]]{class="score"} Open the script file in RStudio and attach the tidyverse metapackage to
your current R session.

:::

:::{class="now_you"}
3\. [[0.50]]{class="score"} Using the *relative file path*, read in the file `coqui_counts.rds` and globally assign the object to the name `coqui`.

:::

## Data tidying

Taking a look at this dataset, we can see that it is obviously in need of some tidying. We will do some data exploration later on, but I always highly recommend exploring your data first! Remember, data exploration should almost always occur in the console pane -- you will only be evaluated on the code provided in your submitted script file. 

For now, let's take care of some of the more obvious issues in this data:

:::{class="now_you"}
4\. [[1.0]]{class="score"} The location of a point on the Earth's surface is represented by two variables on different axes -- a point's longitudinal and latitudinal position. Because of this, the column `coordinates` violates Codd's first normal rule that all values are atomic and Hadley Wickham's tidy data rule that each variable forms a column. To fix this, please:
 
* Split the column `coordinates` into the columns `longitude` and `latitude` and globally assign the resultant object to the name `coqui_coord_fix`.
* Remove the name `coqui` from your global environment.

:::

:::{class="now_you"}
5\. [[2.0]]{class="score"} The column `habitat_class` is transitively dependent on `habitat`. Please:

* Remove the `habitat_class` column and globally assign the resultant object to the name `coqui_no_class`.
* Remove the name `coqui_coord_fix` from your global environment:

:::

:::{class="now_you"}
6\. [[1.0]]{class="score"} As described in the metadata, this data frame represents counts of coqui frogs. Each observation is a count at a given distance on a given transect. Currently, `coqui_no_class` violates two of Codd's First Normal rules and the tidy data rules that each row represents an observation and every column represents a variable. Please: 

* Fix this such that the resultant object contains the variables `distance_class` and `count` then globally assign the object to the name `coqui_long`.
* Remove the name `coqui_no_class` from your global environment.

:::

## Data exploration

:::{class="now_you"}
7\. [[1.5]]{class="score"} Write a code block that produces a data frame that displays the number of transects that were sampled within each habitat type.

:::

:::{class="now_you"}

8\. [[2.5]]{class="score"} Generate a plot that displays the number of observations per habitat type and site, with habitat on the x-axis and the fill color of the bars determined by site.

* [[0.25]]{class="subscore"} Remove the gray plot background 
* [[0.25]]{class="subscore"} Add gray axis lines
* [[0.25]]{class="subscore"} Ensure that there are no warning messages when plotting the data
* [[0.25]]{class="subscore"} Label the measured variables `Mass` and `Tail`

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> To address this question, I suggest the following work flow (in brief):

1. First try to visualize how the answer will look. 
2. After considering what the answer will look like, I write out or draw a schema (on a whiteboard or with pencil and paper) that outlines the steps needed to achieve that result. For example, how must your data be structured such that the both `wing` and `mass` are treated as a single variable?
3. Append your schema with the functions that can be used for each step.
4. Convert your appended schema to code.
5. Test to see that it worked!
:::

:::

:::{class="now_you"}
9\. [[1.5]]{class="score"} Determining levels of observation:

* Write a code block that subsets the data to site, longitude, and latitude and removes duplicate rows.
* Write a code block that subsets the data to site, longitude, latitude, and transect_id and removes duplicate rows.
* Write a code block that subsets the data to transect_id and habitat and removes duplicate rows.
* Write a code block that subsets the data to transect_id, habitat, and date and removes duplicate rows.

:::

:::{class="now_you"}
9\. [[1.5]]{class="score"} Please write a brief comment that describes which tidy data rule is being violated in `coqui_long`and how you were able to determine that.

:::

<hr>

<!-- Note: The below is the javascript that I use to make the accordion button work -->

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>