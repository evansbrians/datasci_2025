---
title: "GIS in R final exam: Your weird new boss counts caterpillars"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

<!-- knitr setup --> 

```{r knitr_setup, include = FALSE}
options(knitr.table.format = "html")

knitr::opts_chunk$set(eval = FALSE)

library(tidyverse)
```

<hr>

![](https://img.apmcdn.org/e7c02535e5f299848e871bbd56ab721bafe8e880/uncropped/021d16-20150210-monarch02.jpg){.intro_image}

You have been contracted as a GIS technician for the non-profit organization "Street Trees for Wildlife"! The non-profit will be conducting a study in which they will be sampling caterpillars on street trees in the District of Columbia (i.e., Washington DC). 

Your goal is to provide GIS support for the organization and use GIS to guide a field team to the locations where they will collect their samples. Specifically, in this project, you will follow a series of steps to generate classified sampling locations that are within 1 kilometer of commuter train stations in Washington DC.

This project will evaluate a number of GIS-in-R skills, including (*but not limited to!*) your ability to:

* Read in and pre-process rasters (Memo 3), shapefiles (Memo 4), and tabular data (Memos 3 & 5)
* Subset shapefiles by condition (Memos 5, 9-14)
* Calculate summary information for spatial objects (Memos 7 & 8)
* Use iteration (Memos 4 & 11)
* Conduct spatial and non-spatial joins (Memos 5, 7-9, 13) and extract raster data to points (Memos 10 & 12)
* Classify and reclassify shapefiles (Memos 6 & 14) and rasters (Memo 10)
* Convert between different types of spatial objects (Memos 11 & 12)
* Generate static (Memo 8) and interactive maps (Memos 9-10, 14)

### Grading

**Total points available**: 30

You will hand in a single R script file for this assignment. This file must include allâ€¯of the code used for answering each question.

**Your response to each "memo" is worth 10 percent** (3 points). You will be graded on your **10 highest scoring memos** (feel free to skip some memos if you are confident in your answers!).

Points may be deducted from each question's total: 

* [[1.0 points per violation]]{class="subscore"} Include only assignments specified in the question;
* [[1.0]]{class="subscore"} Use only functions that we have used in this course **or** *any* function from the *sf*, *tidyverse*, and *tmap* packages;
* [[0.50]]{class="subscore"} Ensure that the class of your response is consistent with the wording of the question (e.g., if you are asked to return a "value" or "vector", ensure that the resultant object is not a data frame);
* [[0.30]]{class="subscore"} Code parsimony;
* [[0.30]]{class="subscore"} Use column names, not numeric indices, when subsetting columns;
* [[0.30]]{class="subscore"} Adhere to the Course Style Guide -- three or more distinct violations;
* [[0.15]]{class="subscore"} Adhere to the Course Style Guide -- one-two distinct violations.

*Note: The maximum deduction is the total points value for a given question*

:::{class="mysecret"}
<i class="fas fa-user-secret fa-2x"></i> You may use any function that we have used in this course **or** *any* function from the *sf*, *tmap*, and *tidyverse* packages. Click the blue button below to view the functions that **I used** in completing this problem set. Although you are *not* required to use the same functions as I did, you might find this list helpful!
:::

<!-- Note, the below is an accordion, which was styled in the css section -->

::: Accordion
<button class="accordion">Functions that I used to answer the memos</button>

::: {.panel}

**Important!** Primitive functions and functions in the *base* package are loaded by default when you start an R session. Functions in *dplyr*, *forcats*, *ggplot2*, *lubridate*, *purrr*, *readr*, *rlang*, and *tidyr* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, The `%>%` function is imported by the *dplyr* (core tidyverse) library.

* `.Primitive, (...)`
* `.Primitive, {...}`
* `.Primitive, =`
* `.Primitive, <-`
* `.Primitive, ::`
* `.Primitive, $`
* `.Primitive, ~`
* `.Primitive, ==`
* `.Primitive, !`
* `.Primitive, >`
* `.Primitive, >=`
* `.Primitive, *`
* `.Primitive, +`
* `.Primitive, c`
* `.Primitive, is.na`
* `.Primitive, list`
* `.Primitive, names`
* `.Primitive, sum`
* `base::library`
* `base::rm`
* `base::as.numeric`
* `base::as.matrix`
* `base::c`
* `base::is.na`
* `base::levels`
* `base::library`
* `base::list.files`
* `base::list2env`
* `base::rm`
* `base::sum`
* `base::unique`
* `dplyr::arrange`
* `dplyr::bind_cols`
* `dplyr::case_when`
* `dplyr::if_else`
* `dplyr::filter`
* `dplyr::left_join`
* `dplyr::mutate`
* `dplyr::n`
* `dplyr::pull`
* `dplyr::select`
* `dplyr::slice_max`
* `dplyr::summarize`
* `forcats::fct_collapse`
* `ggplot2::+`
* `ggplot2::aes`
* `ggplot2::geom_sf`
* `ggplot2::ggplot`
* `ggplot2::scale_fill_viridis_c`
* `ggplot2::theme_void`
* `magrittr::%>%`
* `purrr::map`
* `readr::read_csv`
* `rlang::set_names`
* `sf::st_area`
* `sf::st_as_sf`
* `sf::st_buffer`
* `sf::st_cast`
* `sf::st_coordinates`
* `sf::st_filter`
* `sf::st_intersection`
* `sf::st_join`
* `sf::st_read`
* `sf::st_transform`
* `stats::setNames`
* `stringr::str_detect`
* `terra::aggregate`
* `terra::classify`
* `terra::distance`
* `terra::extract`
* `terra::mask`
* `terra::rast`
* `terra::rasterize`
* `tibble::as_tibble`
* `tidyr::drop_na`
* `tidyr::pivot_wider`
* `tmap::tm_basemap`
* `tmap::tm_dots`
* `tmap::tm_raster`
* `tmap::tm_shape`
* `tmap::tmap_mode`
:::
:::

## Memo 1

::: memo
Welcome to the team GIS Guru!

Please start by saving your R file with the naming convention "final_exam_[your last name]_[your first name].R". Please use "snake_case" when answering this question!

Sincerely,

Your new boss!

:::

## Memo 2

::: memo
Hello GIS Guru,

We are super into the *sf*, *tidyverse*, and *tmap* packages around here. Especially the tidyverse -- I have a life-sized poster of Hadley in my office. Please make sure to load those packages before proceeding!

Cheers,

Your new boss!

P.S. I am also a big fan of interactive maps, so please set your *tmap* mode to "view"!

:::

## Memo 3

::: memo

Dear GIS Guru, 

Let's really get things started by reading in two files from the folder
`data/final_exam_data` -- `nlcd_key.csv` and `classified_lc.tif`. 

As you are probably suspecting, the file `nlcd_key` is a key to the dataset
`classified_lc.tif`. It is a tabular dataset with the following fields:

* `id`: A unique identifier for land cover classes
* `name`: A unique name defining each land cover class 
* `color_value`: Colors typically used to visualize land cover classes
* `description`: A long description of each class

The file `classified_lc.tif` is a GeoTIFF raster obtained from the <a href="https://www.mrlc.gov/data" target="_blank">Multi-Resolution Land Characteristics Consortium (MRLC)</a>. This
is a categorical raster that describes the land cover within the spatial extent 
of the District of Columbia. The value of each cell represents
the dominant land cover class within that cell. The resolution of the raster
is approximately 30 x 30 m and the CRS is EPSG 32618 (datum = World Geodetic 
System 1984 (WGS 84); projected UTM Zone 18N).

Please:

* Read in the tabular data file `nlcd_key.csv` and globally assign the name
`nlcd_key` to the resultant file.

* Read in the raster file `classified_lc.tif` and globally assign the
  name `lc_temp` to the resultant file.

Warm regards,

Your "meta" boss

:::

## Memo 4

::: memo

Bonjour GIS Guru! 

I have a number of shapefiles that I would like you to use for this project. Each shapefile was obtained from <a href="https://opendata.dc.gov/" target="_blank">Open Data DC</a> and collected/stored using the unprojected coordinate reference system EPSG 4326. The files include:

* `Metro_Stations_in_DC.geojson`: A point shapefile that describes the location of commuter train stations in Washington DC.
* `National_Parks_DC.geojson`: A multipolygon shapefile where each shape represents land in Washington DC that is owned and operated by the US National Park service.
* `streets_simple.geojson`: A linestring shapefile of roads in Washington DC (*Note: This represents a simplified representation of the original version from Open Data DC*).
* `Wards_from_2022.geojson`: A polygon shapefile that describes political regions (e.g., local voting areas) in Washington DC.

Please use iteration to read in all of the `.geojson` files in at once. In doing so:

* Subset to the field `NAME` (but maintain the geometry).
* Convert the field name, `NAME`, to lower case.
* Convert the CRS to EPSG 32618.
* Set the names of the objects to "metro_stops", "national_parks",
  "streets" and "wards".
* Assign the name of each shapefile to the global environment.

Au revoir,

Your sophisticated boss
:::

## Memo 5

::: memo

Hiya GIS Guru,

I have got a big processing step for you.  The file `Urban_Forestry_Street_Trees.csv` is a pretty gigantic tabular dataset that I downloaded from <a href="https://opendata.dc.gov/" target="_blank">Open Data DC</a>. Each record in the data represents a street tree in the District of Columbia. There are a lot of columns in the dataset, but we are only interested in:

* `GENUS_NAME`: The genus of the street trees
* `DBH`: The diameter of the street tree trunks, in inches
* `X`: The longitudinal coordinates of the street trees, recorded in EPSG 4326
* `Y`: The latitudinal coordinates of the street trees, recorded in EPSG 4326

Please:

* Read in `Urban_Forestry_Street_Trees.csv`
* Subset to the fields `GENUS_NAME`, `DBH`, `X`, and `Y` (in that order)
* Rename the fields to `genus`, `dbh`, `longitude`, and `latitude` (respectively)
* Subset by removing bad records:
    * Remove all records that contain an NA value (in any field)
    * Remove all records where the genus begins with "No" (represents
      a missing value or error)
* Subset to records where the `dbh` is greater than 12 inches and then remove the field `dbh`
* Convert to a point shapefile where the resultant CRS is EPSG 32618
* Subset to tree locations that are within the `wards` shapefile
* Globally assign the name `trees_temp` to the resultant object
  
Ta ta,
  
Your oddly data-aware boss

:::

## Memo 6

::: memo

Top of the morning to you GIS Guru!

Our team is primarily interested in oaks (*Quercus*) and maples (*Acer*).
Reclassify the variable `genus` such that "*Quercus*" is classified as "oak",
"*Acer*" is classified as "maple", and all other taxa are classified as
"other". Let's save this one for later use -- globally assign the name
`trees_classified` to the resultant object.

Sl&#225;n leat,

Your gaffer

P.S. We are not going to use `trees_temp` again, so please remove it from
your global environment.
:::

## Memo 7

::: memo

How dost thou fare GIS Guru? 

The "wards" (District of Columbia voting areas) are keenly interested in
our study! They want to know which ward has the most trees. Generate a
summary table where:

* The columns represent the number of oaks, maples, and total number of
  trees by ward (*Please do not include a column representing the counts of the "other" class*);
* The rows represent the wards;
* The table is sorted by the ward number.

Fare-thee-well,

Your old-fashioned boss

:::

## Memo 8

::: memo

G'day GIS Guru,

The "battle of the wards" is heating up! Some of the smaller wards
thought our analysis was not fair. Let's give them a map of tree density
by ward. Please:

* For each ward, calculate the total number of street trees, across species, per square
  kilometer.
* Generate a ggplot map where the fill color of each ward is determined by the total
  number of street trees per square kilometer.

Hooroo,

Your ggplotin' boss

:::

## Memo 9

::: memo
Howdy GIS Guru, 

So far, so good pardner! Unfortunately, we have not gotten permission to sample on land managed by the National
Park Service! Please:

* Subset `trees_classified` to trees that are NOT within the shapefile
  `national_parks` and globally assign the name `trees_no_nps` to the
  resultant object. *Hint: Unless you like waiting and/or overwhelming your system's memory, avoid using st_difference() for this operation!*
* Provide an interactive map of tree locations where the color of the
  map points is determined by the (classified) `genus` field and the
  and the points are clustered.
* Remove `national_parks` and `trees_classified` from your global environment.

Adios,

Your rootin' tootin' boss

:::

## Memo 10

::: memo
Buenos dias GIS Guru, 

Our team is interested in the number of caterpillars on street trees --
previous studies have found that caterpillar abundance tends to be higher
on trees that are close to forests. As such, we want to reduce any
influence of forests on our results. Please:

* Use `nlcd_key` and `lc_temp` to generate a distance raster where each pixel
represents the distance, in meters, from the nearest forested pixel
(i.e., any pixel classified as Deciduous, Evergreen, or Mixed Forest).
* Globally assign the name `dc_forest_distance` to the resultant object.
* Provide an interactive map that shows the distance from each
  map pixel to land classified as forest (of any type). In doing so,
  please ensure that only pixels within the shape `wards` are displayed
  on the map.
* Subset `trees_no_nps` to trees that are more than 100 meters from
  a forested map pixel and globally assign the name `trees_no_forests` to
  the resultant object.
* Remove `dc_forest_distance`, `nlcd_key`, and `trees_no_nps` from your global environment.

Pura vida,

Your cartographic boss
:::

## Memo 11

::: memo
How ya doin' GIS Guru?

We have been talking and we are all wicked impressed with the job you have been doing so far. Well, all of us except Chad, who is a bit of a tool -- Chad said "... yeah, but can they iterate with *terra* functions?". Now is a great time to flex your iteration and *terra* muscles because we need to count the number of trees of each classified `genus` ("maple", "oak", or "other") within ~60 x 60 m map pixels. A task like this would be *brutal* without iteration.

Here is what I need you to do to show Chad-the-water-cooler-weirdo how it is done:

* Using `trees_no_forests` as your model, generate a character vector of
  unique `genus` values and globally assign the name `named_trees` to
  the resultant object.
* Using iteration, generate a raster layer for each `genus` where the
  values in that layer represent the number of trees per 30 x 30 m map pixel (*Hint: Use `lc_temp` as your template for this operation*).
* Convert the resultant raster layers to a raster stack, where the name
  of each layer is the represented `genus`.
* Aggregate the resultant object by a factor of 2 and use the function
  `sum` to calculate the total number of trees per ~60 x 60 m map pixel (*Hint: see the 7.2 video*).
* Convert all pixels outside of the shape `wards` to NA.
* Globally assign the name `tree_stack` to the resultant raster stack.

Later,

Your awesome boss

P.S. We will not use `lc_temp`, `named_trees`, `trees_no_forests`, or `wards` again, so please remove them from your global environment.
:::

## Memo 12

::: memo
Salutations GIS Guru!

Now we are ready to start defining our sampling locations. Our technicians
will be sampling at locations where roads turn or intersect. They will
sample caterpillars from five trees at each site, so each sampling
location must have a minimum of five trees. Additionally, we do not
want them walking down any dark alleys, so we will only use named streets as
potential sampling locations. Please:

* Subset `streets` those in which the `name` field is not NA.
* Remove the `name` field.
* Convert `streets` to a point object.
* Remove duplicate points from the resultant object above.
* Extract the raster values from `tree_stack` to each point.
* Subset to sampling locations that have at least five trees (regardless of species).
* Globally assign the name `sampling_points_all` to the resultant object.

Nanu Nanu,

Your suspicious boss

P.S. We will not use `streets` or `tree_stack` again, so please remove those assigned names from your global environment.
:::

## Memo 13

::: memo
Greetings GIS Guru!

Summers are hot in the District of Columbia -- we do not want our teams
to have to walk too far during sampling. Here is our path forward:

* Our teams will be taking the DC metro train to each sampling location,
  so please subset `sampling_points_all` to those that are within 1 km of
  a metro stop. In doing so, please maintain the name of the metro stop in
  the resultant object.
* Traveling on the metro train can take a long time, so subset
  the potential sampling locations to just points that are near the following
  metro stops (*In doing so, please maintain the name of the metro stop in the resultant object*):  
    * Congress Heights,
    * Eastern Market
    * Fort Totten
    * Minnesota Ave
    * Tenleytown-AU
    * Woodley Park-Zoo Adams Morgan;
* Globally assign the name `sampling_points_metro` to the resultant
  object.

Live long and prosper,

Your nerdy boss

P.S. We will not use `sampling_points_all` or `metro_stops` again, so please remove those assigned names from your global environment.
:::

## Memo 14

::: memo
Aloha GIS Guru, 

We are almost ready to send out our field sampling team! Using
`sampling_points_metro`, please:

* Classify potential sampling points into four groups, "maple and oak",
  "oak, no maple", "maple, no oak", and "no oak or maple".
* Subset the resultant points to the two locations per metro stop and
  sampling point class (as immediately above) with the most trees. To
  avoid generating too many points, please ignore ties (i.e., if all
  trees in a group have 9 trees, just select two from that group). *Note: Not every metro station will have two sampling locations for a given class.*
* Help our field technicians find their sampling points by generating
  a map where the background layers are Esri.WorldTopoMap and
  Esri.WorldImagery and the color of the sampling locations are
  determined by the sampling point class.

Mahalo,

Your super mellow boss
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>