---
title: "8.4 Building web documents with Quarto"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
---

<hr>

![](../../images/hex_complex.png){.intro_image}

**What is Quarto?** Quarto provides us with the ability to create documents and embed the output of code, or the code itself, within the document. This allows us to quickly generate and share reports (e.g., websites, manuscripts, newsletters) with our data without having to leave the comfort of RStudio! Examples of what Quarto can do include [this link](https://rpubs.com/bsevansunc/guest_counts){target="_blank"}, which provides an overview of guest visits to an exhibit that Tara and I manage at the National Zoo, and [here is a field notebook](https://rpubs.com/bsevansunc/cicada_notebook){target="_blank"} that I created during my study on cicadas. Of course, you have interacted with a lot of Quarto-generated documents already -- all of the content for this course was was created using Quarto.

This lesson will include:

-   Introduction to the Markdown language
-   How to create a Quarto document
-   Some introductory Quarto techniques

# Introduction to the Markdown

Computer languages allow us to write instructions that control our computers behavior. Quarto documents are written in the Markdown language. Markdown was created in 2004 and is a type of "markup" language. Markup language is a structured combination of literal characters and other elements (e.g., images) where the style is determined by annotations called tags. While the term may seem unfamiliar to you, I am willing to guess that you have been working with markup languages for years. For example, when we type in a Word document we are using a "What you see is what you get" (WYSIWYG) markup language.

Consider, for example, the following sentence as it would be typed in Microsoft Word:

[Here is an example sentence with some *italic* and **bold** text.]{.fake_code}

To create the above, you would use keyboard shortcuts or buttons to define the *italic* and **bold** text. Behind-the-scenes, you are assigning tags to those literal symbols that define how the words are presented. For WYSIWYG markup like Microsoft Word documents, all of the code is hidden from the user by default.

Advantages of WYSIWYG markup include:

-   Little expertise is needed to get started
-   Quick to learn the basics
-   Easy to create simple products

There are also several disadvantages to WYSIWYG markup:

-   It can often be difficult and time consuming to bypass the default formatting of document elements
-   It typically takes a long time to develop the advanced skills required to generate professional output
-   It is often time consuming to maintain consistent formatting of elements within a document and replicate of elements (e.g., styling) across documents

Let's have a look at our sentence written using the hypertext markup language (HTML), the standard markup language for web documents:

```         
<p>Here is an example sentence with some <i>italic</i> and <b>bold</b> text.</p>
```

In the above:

-   The opening tag `<p>` starts the paragraph and the closing tag `</p>` ends the paragraph
-   The *italic* text is defined by the opening tag `<i>` and closing tag `</i>`
-   The **bold** text is defined by the opening tag `<b>` and closing tag `</b>`

On a user's web browser, the HTML is then converted to:

[Here is an example sentence with some *italic* and **bold** text.]{.fake_code}

Advantages of HTML include:

-   Total control over output
-   Once you learn the basics, creating professional output can be quite fast
-   High reproducibility across documents

Disadvantages to HTML:

-   There is a very steep early learning curve
-   It can be difficult to read the content prior to loading it into a web browser

Now let's look at how our sentence is written in markdown language.

```
Here is an example sentence with some *italic* and **bold** text.
```

In the above, the italic text is defined by `*italic*`, the bold text is defined by `**bold**` and the rest of the text is written just like the Word version. This is nearly as simple to read as the Word version but has all of the fine-tuning advantages as the HTML version! 

When generating web pages with Markdown (including with RMarkdown and Quarto), you **render** the document. Rendering converts the Markdown to HTML. As you might imagine, rendering the above returns:

[Here is an example sentence with some *italic* and **bold** text.]{.fake_code}

Advantages of using the markdown language are the same as the HTML version but the learning curve is *much* less steep!

# Getting started

Quarto is the next generation of the program "R Markdown". While it is not currently intended to replace R Markdown, Quarto has additional flexibility that is beneficial (e.g., you can provide and execute code in multiple languages, such as Python).

To get started with building a Quarto document, navigate to the "File" menu, select "New File", and "Quarto Document ...":

![](open_quarto.gif)

This opens a new window. Select "Empty document":

![](new_quarto.gif)

And choose "Source" (the other editor is WYSIWYG):

![](not_visual_editor.gif)

Before proceeding, please save the file with the name of your choosing with Control (Windows) or command (Mac) + shift + S:

![](name_file_boy_howdy.gif)

# Parts of a Quarto document

Now that we have created a Quarto document, let's start to make some content. A basic Quarto document contains three types of content:

* A YAML header
* Markdown text
* Code Chunks

## The YAML header

The first part of the document has been written for us. The content between the two `---` is what is known as a "YAML" header. YAML stands for "YAML Ain't Markup Language" (though it was originally named "Yet Another Markup Language"). It is where you provide metadata for the document as well as instructions for how the whole document will be structured and styled.

```
---
title: "Untitled"
format: html
editor: visual
---
```

The above provides the title of the document, defines that the format of the document is a web page, and that the document will open in the Visual (WYSIWYG) editor by default. Notice in the above that, though we clicked the "Source" button when we set up the document, it is still listed as `editor: visual`, unfortunately. Let's change that:

```
---
title: "Untitled"
format: html
editor: source
---
```

## Adding markdown & knitting

After our YAML header, we are now ready to add the content of our web page!

```
---
title: "Untitled"
format: html
editor: source
---

Here is an example sentence with some *italic* and **bold** text.
```

To convert the Quarto document to HTML, we need to knit the document. Knitting the document, also called "rendering", means to create and view the web output. There are a few options for this.

You *could* click the "Render" button (but I do not advise this method):

![](render_button.gif)

Alternatively, hitting the keyboard shortcut Control (Windows) or command (Mac) + shift + K will knit the document:

![](render_shortcut.gif)

Typically, though, I often click the checkbox "Render on Save" and then knit the document with the keyboard shortcut Control (Windows) or command (Mac) + S:

![](render_on_save.gif)

## Adding code blocks and output

The power of Quarto (and its predecessor R Markdown) is that you can include code and output within a document.

If we want to include our code and its output, we insert what is known as a **code chunk**. A code chunk can be used to execute code in a specified language. In the below, three backtick symbols at the start and end define the boundaries of the chunk and `{}` defines the program or language to use when executing the chunk:

``` {r}
library(tidyverse)
```

You can add instructions to the execution of the code block. For example, to remove the printed messages after attaching the tidyverse packages, you can use `message = FALSE` (please add to you document and knit):

```{r, message = FALSE}
library(tidyverse)
```

Let's add a tibble to our code block:

```{r, message = FALSE}
library(tidyverse)

tibble(
  boy = c(1, 1),
  howdy = 2:3
)
```

We can see that, while `message = FALSE` suppressed the printed output of `library(tidyverse)`, knitting the code block still returned the output of the code and the code used to generate the output.

Sometimes we want to include only the output (e.g., for public reports or when showing your data to non-R-savvy advisors). To include only the output of our code, but not the code itself, specify `{r echo = FALSE}`:

``` {r, echo = FALSE}
library(tidyverse)

tibble(
  boy = c(1, 1),
  howdy = 2:3
)
```

Throughout this course, however, you have seen *lots* of code, but not as much output. To get just the code itself, we can specify xxx

## The YAML header

## Styling your Quarto documents

### Sections

Web pages are divided into sections that act as invisible containers for HTML elements. Sections can have their own style and behavior. Below, I created a section for my sentence about Tara's font preference and defined the font-family of the section as Times New Roman. 

:::{style="font-family: Times;"}
Tara prefers to write documents in Times New Roman.
:::

In HTML, such sections can be created by the `<div>` tag, which stands for division:

```
<div style="font-family: Times;">
<p>Tara prefers to write documents in Times New Roman.</p>
</div>
```

Notice in the above that I defined the font-family for the entire section of the document.

With Quarto, you can define a section be wrapping it inside of `:::` and, if desired, apply styling to the section inside of curly braces:

```
:::{style="font-family: Trebuchet MS;"}
Brian is old and thus remembers when Times New Roman was the default font for Microsoft Word. Because he is problematically font-opinionated, Brian avoids Times New Roman at all costss.
:::
```

The above produces:

:::{style="font-family: Trebuchet MS;"}
Because he is old, remembers when Times New Roman was the default font for Microsoft Word, and problematically font-opinionated, Brian prefers sans-serif fonts.
:::


#### Spans

We often want to change an element within a document without adding a new line. For example, we can change the word "green" in the sentence below to the color green:

It's not easy being [green]{style="color: green;"}.

To replicate this with HTML, we use the `<span>` tag:

```
<p>It's not easy being <span style="color: green;">green</span>.</p>
```

To replicate this with Quarto, we define elements of the span inside square brackets and add the styling within curly braces:

```
It's not easy being [green]{style="color: green;"}.
```

