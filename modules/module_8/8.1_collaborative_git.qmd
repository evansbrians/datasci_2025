---
title: "8.1 Collaborating with GitHub"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
---
<hr>

![](../../images/hex_complex.png){.intro_image}

GitHub provides an efficient, well-organized, workflow for collaborating with code. If you are not careful, however, it can sometimes also lead to disastrous, time-consuming problems that can hinder collaborations. When using version control on my own, I typically follow the methodology that I demonstrated in ***Lesson 7.2 Solo Github***. When collaborating with others, I employ additional methods. In the video lesson below (runtime: 16:41), I cover two methods that you can use to avoid such problems occurring. You will learn:

* The dangers (and annoyance) of the "solo GitHub workflow"
* Collaborating with GitHub via branching repositories
* Collaborating with GitHub via forking repositories

## Video lesson

Notes: 

* The script file `homework1_key.R` in the example repository that I use is very old and therefore does not follow this course's style guide!
* You will hear me say I did not want to teach you about dates and times until later in the course. That is because this lesson used to be included in the first module of this course.

{{< video https://www.youtube.com/embed/bMBgOkXf6SY >}}

## Reference

<button class="accordion">Glossary</button>
::: panel

* **Project**: A collection of files that is referenced by a `.RProj` file.
* **Unix shell**: A command line interface to the Unix operating system.

:::

<button class="accordion">Bash commands</button>
::: panel

:::{style="background-color: white; font-size: 14px;"}
|Command                          | Operation        
|:--------------------------------|:--------------------------------------------------------|
| cd [directory name]              | Navigate to a different directory
| cd ..                            | Navigate to a parent folder
| git add                          | Stage a file to be committed (to be stored in your local repository)
| git commit -m                    | Add a file to your local repository, with a message 
| git config --global user.name    | Configure the user name of your global options
| git config --global user.email   | Configure the user email of your global options
| git pull                         | Download any changes from your online GitHub repository
| git push                         | Upload any changes to your online GitHub repository
| git status                       | View the current state of your local and online repositories
| ls [directory name]              | List files in a directory
| mkdir [directory name]           | Make directory
| mv [current name] [new path]     | Move a file or change its name
| pwd                              | Print working directory
| rm [file name]                   | Remove a file   
| rm -rf                           | Remove a directory

:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
