---
title: "6.3 Control flow with if else"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    toc-depth: 4
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

```{r setup, include=FALSE}
library(tidyverse)

knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  error = TRUE)

rm(has_annotations)
```

<hr>

<div>
![](../../images/hex_complex.png){.intro_image}

**Control flow** operations are processes that modify the order in which your computer executes code (and sometimes whether that code is executed at all!). We have used control flow operations previously -- for example, when we use `purrr::map()` we are conducting a control flow operation. In this lesson, which includes only a video, we will deal with operations that determine whether a given code is run or not run -- this is the purview of *if else* or, as it is written in R, `if(TRUE) {this} else {that}`. Along the way, we will review and look at applications of `purrr::map()` where the function is super useful! 

**Important!** Before starting this tutorial, be sure that you have completed all preliminary and previous lessons!

</div>

## Data for this lesson

<button class="accordion">Metadata</button>
::: panel
In this lesson, we will explore the file [district_birds.rds]{.mono}. The data are a formatted as a list object comprised of the following tibble data frames and variables that we will use in this lesson:

[birds]{.mono}

* [species]{.mono}, character: A four-letter code for each species that serves as a primary key for this table.
* [common_name]{.mono}, character: The common names for each species, as used in the United States.
* [foraging]{.mono}, character: The foraging strategy of each species.
* [diet]{.mono}, character: The dietary niche of each species.

[captures]{.mono}

* [capture_id]{.mono}, character: The primary key for a unique capture record.
* [visit_id]{.mono}, character: A foreign key to the [visits]{.mono} table.
* [band_number]{.mono}, character: The numbers assigned to an aluminum band that has been placed on a bird.
* [color_combo]{.mono}, character: The combination of aluminum and color bands placed on a bird
* [spp]{.mono}, character: A species code that acts as a foreign key to the [birds]{.mono} table.
* [sex]{.mono}, character: A code representing the sex of a bird, where: "F" is female, "M" is male, "U" is unknown, and [NA]{.mono} represents missing data.
* [age]{.mono}, character: A code representing the age of a bird, where: "AHY" is an adult, "ASY" is an adult that is more than two years old, "HY" is a juvenile, "L" is a nestling, "SY" is two years old, and "U" is unknown.
* [wing]{.mono}, numeric: The length of a bird's wing (unflattened wing chord), in millimeters.
* [tl]{.mono}, numeric: The length of a bird's tail, in millimeters.
* [mass]{.mono}, numeric: The weight of a bird, in grams.
* [bp_cp]{.mono}, chr: The breeding condition of a bird, where: "-" stands for a bird that is not in breeding condition, "BP" is a brood patch, "CP" is a cloacal protuberance, "U" is unknown, and [NA]{.mono} represents missing data.
* [fat]{.mono}, chr: The fat measured on a bird, that ranges from "0" for no fat, "T" for trace fat, and up to "5" for the maximum amount of fat. [NA]{.mono} values represent missing data.

[counts]{.mono}

* [species]{.mono}, character: The primary key of the table
* [visit_id]{.mono}, character: A foreign key to the [visits]{.mono} table.
* [spp]{.mono}, character: A species code that acts as a foreign key to the [birds]{.mono} table.
* [count]{.mono}, numeric: The number of birds observed of a given species, on a given visit.
:::

## Set up your video session

Please do the following to ensure that you are working in a clean session:

1. In the *Environment* tab of your *workspace pane*, ensure that your *Global Environment* is empty. If it is not, click the *broom* to remove all objects. *Note: Conversely, you can remove all items with `rm(list = ls())`*.
2. In the *History* tab of your *workspace pane*, ensure that your history is empty. If it is not, click the *broom* to remove your history.
3. Open the script file [control_flow_if_else.R]{.mono} (Windows: [Ctrl + O]{.mono}; Mac: [Cmd + O]{.mono}).

## Video content

Note: In this lesson, we use the triple colon operator (i.e., `tidyselect:::select()`). This is similar to the double colon `::`, however, it gives us access to functions that are intended to be only used internally by other packages. For example, the `select()` function in *dplyr* internally calls `tidyselect:::select()`. Tara and I like `tidyselect:::select()` so much, that we like to break the rules a bit.

{{< video https://www.youtube.com/embed/ct3dBs3uCXM >}}

## Compendium



```{r}
standard_error <- 
  function(.x) {
    sd(.x) / 
      sqrt(
        length(.x)
      )
  }
```

```{r}
standard_error_limits <- 
  function(
    .x,
    limit = "lower"
  ) {
    if(limit == "lower") {
      mean(.x) - standard_error(.x)
    } else {
      mean(.x) + standard_error(.x)
    }
  }
```

```{r}
get_conf_int_lower <- 
  function(.x) {
    t.test(.x) %>% 
      pluck("conf.int") %>% 
      .[[1]]
  }

get_conf_int_lower <- 
  function(.x) {
    t.test(.x) %>% 
      pluck("conf.int") %>% 
      .[[2]]
  }

get_conf_int <- 
  function(
    .x,
    boundary = "lower"
  ) {
    test_out <-
      t.test(.x) %>% 
      pluck("conf.int")
    
    if(boundary == "lower") {
      test_out[[1]]
    } else {
      test_out[[2]]
    }
  }

matches()

sum()
```

Plot of means (geom_segment) 

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Control flow**: A process that modifies the order in which your computer executes code (and sometimes whether that code is executed at all!).
:::

<button class="accordion">Functions</button>
::: panel

::: mysecret

{{< fa user-secret size=2x >}} [**Important!**]{style="font-size: 1.25em; padding-left: 0.5em;"}

* Primitive functions, as well as functions in the *base*, *stats*, and *utils* packages, are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *lubridate*, *purrr*, *readr*, *stringr*, *tibble*, *tidyr*, and *tidyverse* are loaded with `library(tidyverse)`.
* I do not include functions that I recommend avoiding.
* Regular expressions metacharacters are not functions!
:::

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_6.3_control_flow_if_else.csv"
) %>%
  read_csv() %>%
  kableExtra::kable(
    align = c("c", "c", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```

:::
:::

<button class="accordion">Metacharacters in regex</button>
::: panel

::: mysecret
{{< fa user-secret size=2x >}} [Metacharacters are not R functions!]{style="font-size: 1.25em; padding-left: 0.5em;"}

When you are given a list of functions that you may use in a given problem set, recall that regex metacharacters are not functions. As such, they will not be included in your function list. You may use *any* metacharacter to address a given problem!
:::

* **Alternation constraint**, `(...)`: Constrains the use of a metacharacter to just the symbols inside of parentheses
* **Anchor**, `^...`: Specify the start of a string
* **Anchor**, `...$`: Specify the end of a string
* **Character class**, `[...]`: Define a *set* of symbols that you would like to match
* **Metacharacter escape**, `\\`: Treat a metacharacter as a literal character
* **Optional match**, `?`: Specify that the preceding symbol is optional
* **Range** (in a character class), `[...-...]`: Define a *range* of symbols that you would like to match in a given position
* **Or**, `...|...`: Specify a match of one string "or" another string
* **Repetition**, `...*`: Specify that a symbol can appear no times or an unlimited number of times
* **Repetition**, `...+`: Specify that a symbol appears at least once or an unlimited number of times
* **Repetition**, `{...}`: Specify the number of times a symbol should appear
* **Repetition**, `{...,...}`: Specify that a symbol may appear within a range of repetitions
* **Wild card**, `.`: Specify that a character value at a given location can be any symbol
:::


<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
| Task                          | Windows          | Mac
|:------------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts   | Ctrl + Alt + K   | shift + option + K
| Select all                    | Ctrl + A         | command + A
| Copy                          | Ctrl + C         | command + C
| Paste                         | Ctrl + V         | command + V
| Open an existing script       | Ctrl + O         | command + O
| Create a new script           | Ctrl + shift + N | command + shift + N
| Save script file              | Ctrl + S         | command + S
| Add a new code section        | Ctrl + shift + R | command + shift + R
| Run code block                | Ctrl + Enter     | command + return
| Run code section              | Ctrl + Alt + T   | command + option + T
| Run code from start to cursor | Ctrl + Alt + B   | command + option + B
| Fix indentation               | Ctrl + I         | command + I
| Comment or un-comment code    | Ctrl + shift + C | command + shift C
| Comments as multiple lines    | Ctrl + shift + ? | Ctrl + shift + ?
| Add a pipe operator           | Ctrl + shift + M | command + shift + M
| Add an assignment operator    | Alt + dash       | option + dash
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
