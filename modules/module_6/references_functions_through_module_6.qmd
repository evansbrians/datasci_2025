---
title: "Addendum: Glossary of terms and functions, Modules 1-6"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

## Glossary of terms

* **Aesthetic mappings**: How the data are mapped to visual attributes.
* **Assignment (noun)**: A reference that R uses to call data from your computer’s memory (also called "name").
* **Assignment (verb)**: The act of associating a name with an object (typically to the global environment).
* **Atomic vector**: A one-dimensional homogeneous data object.
* **Body**: The instructions of a function that are run when the function is executed. 
* **Boundary value** (when classifying numeric vectors): The value that represents the minimum and maximum values of a class.
* **Child**: An object whose name is stored as a reference in a parent object.
* **Class**: A blueprint that describes an object's structure.
* **Closed boundary**: When classifying numeric values, this describes a boundary that includes the boundary value.
* **Code section**:  A portion of an R script file that is delineated by a section header.
* **Compound key** (or compound primary key): A set of variables in a data frame that, combined, represent the primary key of a table.
* **Control flow**: A process that modifies the order in which your computer executes code (and sometimes whether that code is executed at all!).
* **Core tidyverse package** or **Core tidyverse**: A subset of the *tidyverse* packages that are attached with `library(tidyverse)`.
* **Coordinate system**: Projection of data (e.g., x and y Cartesian coordinates).
* **csv file**: A file stored in the "comma separated values" format. This describes a plain text files where commas separate values and each record (e.g., row in a data frame) is placed on a new line. 
* **Data** (in the Grammar of Graphics): The information being plotted.
* **Data frame**: A two-dimensional, and potentially heterogeneous data object (that is a restrictive type of list under-the-hood).
* **Data object**: Containers for values that structure references in an ordered, predictable way.
* **Double numeric vector**: An atomic numeric vector where the values are stored as decimal numbers (essentially).
* **Environment**: A dimensionless container that contains references (names) to data stored in memory.
* **Experimental** (function): A function currently being tested for permanent distribution in a package (these functions are usually, but not always, safe to use).
* **Facets**: Subsets of data within a given plots (i.e., plot are broken into subplots based on some grouping variable).
* **Filter** (verb): Subset data by logical condition.
* **Filtering join**: Subset a target table to only rows in which key values match (or are absent from) the keys within a source table.
* **Foreign key**: A variable in a data frame that refers to the primary key of another data frame.
* **Formals**: The arguments of a function (can also be thought of as the variables upon which the function is run).
* **Function**: A set of instructions used to complete a given task.
* **Global environment**: A collection of names assigned during an R session.
* **Index** (noun): The numeric position of a value or values in a data object.
* **Index** (verb): The process of subsetting or extracting elements of a data object by position.
* **Infix function**: A function in which the name of the function is placed between the function's arguments.
* **Integer**: A whole number, or an atomic vector of data stored as whole numbers.
* **Install** (a package): Download the data and functions from a package onto your computer.
* **Key** (variable): A variable in a data frame (can also be used to refer to names assigned to objects stored in your computer's memory).
* **Layers (geometries)**: Expression of the data in the plot.
* **List**: A one dimensional, and potentially heterogeneous, data object.
* **List item**: A data object contained within a list.
* **Literal character**: In regex, this is used to search for exact character matches in the case (i.e., lower vs. upper) and order of characters.
* **Matrix**: A two-dimensional homogenous data object (that is an atomic vector under-the-hood).
* **Memory (RAM)**: A temporary storage location for instructions (functions) and data.
* **Metacharacter**: Special characters used to modify the conditions of a regex search string (such a a choice of letters or position of literal characters in a string).
* **Metacharacter, alternation constraint**: Metacharacter that allows us to assess groups of symbols.
* **Metacharacter, anchor**: Metacharacter used to search for a symbol or symbols at the start or end of a string.
* **Metacharacter, character class**: Metacharacter used to search for a symbol within a set of potential symbols at a given position in a string.
* **Metacharacter, optional match**: Metacharacter that makes that symbol optional.
* **Metacharacter, or**: Metacharacter used to evaluate whether a symbol or set of symbols matches a string *or* whether another symbol or set of symbols is found in a string.
* **Metacharacter, range**: Metacharacter that signifies that a symbol may be repeated a certain number of times.
* **Metacharacter, repetition**: Metacharacter that allows us to specify a range of potential symbols (within a character class metacharacter) or number of times a symbol is repeated (within the range metacharacter, `{...}`).
* **Metacharacter, wildcard**: Metacharacter that is used to match any symbol.
* **Mutating join**: Use matching keys to add columns to a target table from a source table.
* **Mutation**: The process of adding columns to a data frame and or modifying existing columns (or adding/modifying list items to/in a list).
* **NA** (value): A missing data value in an atomic vector.
* **Name**: A reference that R uses to call data from your computer’s memory  (also called "assignment").
* **Negated selection**: The use of the negative symbol (`-`) or, more recently, the *not* operator (`!`) to select all columns *except* the supplied column or columns.
* **Normal data**: A data format developed by Edgar Codd that is the basis of the tidy data rules (see below).
* **Normalize/Normalization** (in data engineering): Conform a dataset to Codd's rules of normal data.
* **Observation**: A row within a data frame.
* **Open boundary**: When classifying numeric values, this describes a boundary that does not include the boundary value.
* **Order**: The position of values (or child objects) within a data object.
* **Ordinal factor** (or, more generally, variable): A variable with represented as ordered levels.
* **Package environment**: A collection of variable names associated with objects in a package.
* **Parent**: An object or environment that contains references to other objects.
* **Prefix function**: A function in which the name of the function precedes the target of the evaluation.
* **Primary key**: A variable in a data frame that is used to identify unique records.
* **Primitive functions**: Functions written in C code and made available to use through the base R package.
* **Project**: A collection of files that is referenced by a `.RProj` file.
* **RDS file**: A storage format for data sets that are written in, and written for, program R.
* **Recursive object**: Objects that are made up of references to other objects (e.g., a list).
* **Reference tree**: A visualization of the storage locations and names of parent and child objects.
* **Relative file path**: The path to a file on your hard drive relative to the current working directory.
* **Scales**: Maps from data to aesthetic space.
* **Scoping**: The process by which R searches for a variable.
* **Scoping rules**: The order of the search path that R uses to find variables.
* **Session**: The time spent and operations conducted since opening R.
* **Source table**: In a join, this is the table that is referenced by the target table (in a mutating join, the source table provides the new variables for the target table) -- this is typically the table with the primary key.
* **Split-apply-combine problem**: A data challenge in which you must split a data object into parts, apply a function each part, and combine the resultant values into a new object.
* **Structure**: The dimensionality and homogeneity of a data object (may also be used to describe the class of objects).
* **Subset** (verb): The process of reducing the number of items in a list (including columns in a data frame!), rows in a data frame, or values in an atomic vector.
* **Summarize**:  The process of calculating a summary statistic, or multiple summary statistics of a data frame and returning the resultant data as a tibble data frame. 
* **Superseded** (function): A function for which a new function or argument has been added to a package (these functions should typically be avoided).
* **Target table**: In a join, the target table is the table that you wish to join data to (usually the table with the foreign key).
* **Theme**: Styling of non-data elements in a plot.
* **Tibble**: A type of data frame with great benefits!
* **Tidy data** (noun): A data format developed by Hadley Wickham (based on Codd's rules) in which every row represents an observation, every column represents a variable, and every level of observation represents a table.
* **Tidy data** (verb): Conform a dataset to Wickham's rules of tidy data.
* **Type**: How an object is stored in your computer.
* **Variable**: A column in a data frame.
* **Version history**: Changes to a package since its inception.

## Functions used

::: mysecret

{{< fa user-secret size=2x >}} [**Important!**]{style="font-size: 1.25em; padding-left: 0.5em;"}

* Primitive functions, as well as functions in the *base*, *stats*, and *utils* packages, are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *lubridate*, *purrr*, *readr*, *stringr*, *tibble*, *tidyr*, and *tidyverse* are loaded with `library(tidyverse)`.
* The functions `magrittr::%>%`, `rlang::{{}}`, `rlang::set_names` are attached with `library(tidyverse)`
* I do not include functions that I recommend avoiding.
* Regular expressions metacharacters are not functions!
:::

* `.Primitive, ()`: Operator that evaluates the function name on the left-hand-side (LHS) of the opening parentheses using the arguments enclosed by the parentheses
* `.Primitive, {`: Operator that passes the last operation in `{...}` to the global environment
* `.Primitive, <-`: Infix operator that assigns a name (LHS) to the object on the right-hand-side (RHS) -- this should be used for global assignments!
* `.Primitive, <<-`: The super assignment infix operator that assigns a name (LHS) to the object on the right-hand-side (RHS) and sends the results to the global environment (regardless of the operating environment)
* `.Primitive, =`: Infix operator that assigns a name (LHS) to the object on the RHS -- this should not be used for global assignments!
* `.Primitive, ~`: The formula operator separates the left- and right-hand sides (LHS and RHS) in a formula.
* `.Primitive, :`: Infix operator that generates a regular sequence of adjacent values
* `.Primitive, ::`: Infix operator that can be used to access a package environment without attaching the whole package environment to your current session
* `.Primitive, :::`: Infix operator that can be used to access a function that is not meant to be exported!
* `.Primitive, $`: Infix operator that extracts the values associated with a name (RHS) from a recursive object (LHS)
* `.Primitive, ==`: Infix relational operator (is equal to)
* `.Primitive, !=`: Infix relational operator (is not equal to)
* `.Primitive, &`: Infix logical operator (and)
* `.Primitive, |`: Infix logical operator (or)
* `.Primitive, >`: Infix relational operator (greater than)
* `.Primitive, >=`: Infix relational operator (greater than or equal to)
* `.Primitive, <`: Infix relational operator (less than)
* `.Primitive, <=`: Infix relational operator (less than or equal to)
* `.Primitive, !`: Prefix logical operator (not)
* `.Primitive, +`: Infix arithmetic operator (add)
* `.Primitive, -`: Infix arithmetic operator (subtract)
* `.Primitive, *`: Infix arithmetic operator (multiply)
* `.Primitive, /`: Infix arithmetic operator (divide)
* `.Primitive, as.character`: Transform an atomic vector to a character vector
* `.Primitive, as.integer`: Transform an atomic vector to an integer vector
* `.Primitive, as.numeric`: Transform an atomic vector to an double numeric vector (i.e., decimal numbers)
* `.Primitive, as.vector`: Transform a multi-dimensional object into a one-dimensional object
* `.Primitive, attributes`: Generate and print a list that represents the attributes of a data object
* `.Primitive, c`: Combine values to form an atomic vector
* `.Primitive, class`: Print the class of an object as a one-value character vector
* `.Primitive, dim`: Return the number of dimensions in an object as an integer vector
* `.Primitive, else`: Used in conjunction with `if`, evaluate a statement when `if` evaluates to FALSE.
* `.Primitive, if`: If a logical value is TRUE, evaluate a statement
* `.Primitive, is.character`: A logical test of whether a vector is of class "character"
* `.Primitive, is.na`: A logical test of whether a value in a vector is [NA]{.mono}
* `.Primitive, is.numeric`: A logical test of whether a vector is of class "numeric" or "integer"
* `.Primitive, length`: Return the number of values in an atomic vector or the number of list items in a list (or data frame!) as a one-value integer vector
* `.Primitive, list`: Combine multiple objects of any type into a single, recursive, data object
* `.Primitive, max`: Return the maximum value in a vector
* `.Primitive, min`: Return the minimum value in a vector
* `.Primitive, max`: Return the highest value in a numeric vector (integer or double) as a one-value numeric or integer vector (depending on input)
* `.Primitive, min`: Return the lowest value in a numeric vector (integer or double) as a one-value numeric or integer vector (depending on input)
* `.Primitive, names`: Retrieve the names (or names attribute) assigned to an R object
* `.Primitive, return`: Return the results from a given point in a function's body (do not use for the last value!)
* `.Primitive, seq_along`: Generate an integer vector representing the indices (positions) in a vector (list or atomic)
* `base::%in%`: Infix relational operator that tests whether the vector on the left-hand-side (LHS) is within the vector on the right
* `base::[]`: Extraction operator used to index multiple values from a data object (LHS) based on the position or values specified inside the brackets
* `base::[[]]`: Extraction operator used to index a single value from a data object (LHS) based on the position or values specified inside the brackets
* `base::body`: Print the body of an R function
* `base::cut`: Convert a numeric vector into a factor
* `base::environment`: Print the environment of a given function
* `base::for(var in seq)`: Initiate a for loop
* `base::factor`: Convert a character vector to a factor
* `base::file.remove`: Delete a file from your hard drive
* `base::formals`: Print the formals of an R function
* `base::function`: Initiate the creation of a custom function
* `base::is.na`: A logical test of whether a value is NA
* `base::levels`: Generate a character vector of factor levels in a factor variable
* `base::library`: Attach the package environment for a given package to the current R session
* `base::list.files`: List files in a specified folder on your computer's hard drive
* `base::list2env`: Assign the items in a list to a specified environment
* `base::ls`: Generate a character vector of names in a specified environment (default is the global environment)
* `base::matrix`: Generate a matrix object by adding dimensional attributes to an atomic vector
* `base::mean`: Generate a one-value double numeric vector that describes the mean of a vector
* `base::ncol`: Return the number of columns (i.e., variables or list items) in a data frame as a one-value integer vector
* `base::nrow`: Return the number of rows (i.e., observations) in a data frame as a one-value integer vector
* `base::rm`: Remove a name from a specified environment (default is the global environment)
* `base::search`: Print a character vector of attached objects associated with your current R session
* `base::sum`: Calculate the sum of a numeric vector
* `base::summary`: Print summary stats for a data object
* `base::sort`: Arrange a vector in ascending order
* `base::source`: Execute a source script (in its entirety)
* `base::table`: Count the number of unique observations in an atomic vector
* `base::typeof`: Print a one-value character vector that represents how a data object is stored on our computer
* `base::unit`: Set or create a unit object
* `base::unique`: Subset an atomic vector to the unique values in the set
* `base::vector`: Generate a vector (list or atomic)
* `dplyr::across`: Apply a function across multiple variables in a data frame
* `dplyr::anti_join`: A filtering join that joins a source table to a target table and maintains only records in which the key values *do not* match
* `dplyr::arrange`: Sort the rows of a data frame by the values in a variable or variables
* `dplyr::bind_cols`: Combine two variables or columns of two tibbles to create a new tibble
* `dplyr::bind_rows`: Combine rows of two or more tibbles to create a new tibble
* `dplyr::count`: Tabulate the number of observations of each unique value of a column in a data frame and return as a long format tibble
* `dplyr::desc`: When used with `arrange()`, this sorts the rows of a data frame by the values of a variable in descending order
* `dplyr::distinct`: Subset a data frame by removing duplicate rows
* `dplyr::filter`: Subset a data frame by logical condition
* `dplyr::full_join`: A mutating join that joins a source table to a target table and maintains all records in both tables, regardless of matching key values
* `dplyr::group_by`: Group the data in a data frame by a given variable such that one or more subsequent analyses are run separately on each group
* `dplyr::if_all`: Run a function for all of the columns that satisfy a given condition
* `dplyr::if_any`: Run a function for any of the columns that satisfy a given condition
* `dplyr::if_else`: Classify or reclassify a vector into two classes by applying a logical test and assigning one value if the test evaluates to `TRUE` and another if it evaluates to `FALSE`
* `dplyr::inner_join`: A mutating join that joins a source table to a target table and maintains only records with matching key values
* `dplyr::join_by`: Specify the key columns within a join function
* `dplyr::left_join`: A mutating join that joins a source table to a target table and maintains all records found in the target table, regardless of matching key values
* `dplyr::mutate`: Add or modify a column in a data frame
* `dplyr::n`: Calculate the number of observations (rows)
* `dplyr::na_if`: Convert a value in a vector to NA
* `dplyr::pull`: Extract a column from a data frame as a vector
* `dplyr::rename`: Change the name assigned to a column in a data frame
* `dplyr::row_number`: Generate a sequence of integer values from 1 to the number of rows in a data frame
* `dplyr::select`: Subset columns in a data frame by name
* `dplyr::semi_join`: A filtering join that joins a source table to a target table and maintains only records with matching key values
* `dplyr::slice`: Subset a data frame by row or rows using the row position(s)
* `dplyr::slice_head`: Subset a data frame to the first row (default) or rows
* `dplyr::slice_tail`: Subset a data frame to the last row (default) or rows
* `dplyr::slice_min`: Sort a data frame by a variable and subset to the rows associated with the lowest values of that variable
* `dplyr::slice_max`: Sort a data frame by a variable and subset to the rows associated with the highest values of that variable
* `dplyr::summarize`: Calculate one or more summary statistics on a variable or variables in a data frame (often used in conjunction with `group_by()` but may also be used with `.by = ...`)
* `dplyr::transmute` (superseded): Mutate a data frame while subsetting the columns to those specified in the function
* `dplyr::ungroup`: Remove any grouping on a data frame
* `forcats::fct_collapse`: Collapse factor levels into manually defined groups
* `forcats::fct_recode`: Change factor levels by hand (specify a new factor level or modify an existing level)
* `forcats::fct_relevel`: Reorder factor levels by hand
* `forcats::fct_reorder`: Reorder factor levels by another variable
* `forcats::fct_rev`: Reverse the order of factor levels
* `ggplot2::+`: ggplot's pipe operator (adds a layer to a plot)
* `ggplot2::aes`: Define aesthetics
* `ggplot2::coord_flip`: Switch the mapping to the horizontal and vertical coordinates
* `ggplot2::element_line`: Set the theme for a line element
* `ggplot2::element_rect`: Set the theme for a shape element
* `ggplot2::element_text`: Set the theme for a text element
* `ggplot2::expansion`: Set upper and lower values or proportions to expand an axis by
* `ggplot2::facet_wrap`: Split plot into facets
* `ggplot2::geom_bar`: Create a bar geometry
* `ggplot2::geom_boxplot`: Create a boxplot geometry
* `ggplot2::geom_density`: Create a (statistical) density geometry
* `ggplot2::geom_line`: Create a line geometry (that connects points)
* `ggplot2::geom_point`: Create a point geometry
* `ggplot2::geom_segment`: Create a line geometry between points
* `ggplot2::geom_smooth`: Add a line-of-best-fit geometry
* `ggplot2::ggplot`: Set the data and, potentially, the aesthetics of a plot
* `ggplot2::ggsave`: Save a ggplot to your computer
* `ggplot2::labs`: Add or modify the labels of a plot
* `ggplot2::scale_color_manual`: Manually define the colors of a geometry
* `ggplot2::scale_fill_brewer`: Fill a geometry with colors from a RColorBrewer palette
* `ggplot2::scale_fill_manual`: Manually define the fill colors of a polygon geometry
* `ggplot2::scale_x_continuous`: Set the scale of the x axis
* `ggplot2::scale_y_continuous`: Set the scale of the y axis
* `ggplot2::theme`: Define the theme elements of a plot
* `ggplot2::theme_bw`: Generate a pre-packaged light background theme for a plot
* `ggplot2::theme_classic`: Generate a pre-packaged theme that displays the x and y axis that contains no plot grid
* `ggplot2::theme_minimal`: Generate a pre-packaged theme that has no axis lines, a white background, and light gray plot grid
* `lobstr::ref`: View the structure of an object in your computer's memory
* `lubridate::as_date`: Convert properly formatted date, stored as a character or datetime vector, to a date class object
* `lubridate::dmy`: Convert a date formatted as day, month, year (European date format) to a date class object
* `lubridate::mdy`: Convert a date formatted as month, day, year (US date format) to a date class object
* `lubridate::month`: Extract the month from a properly formatted date value
* `lubridate::wday`: Extract the day of the week from a properly formatted date value
* `lubridate::yday`: Calculate the day of year from a properly formatted date object
* `lubridate::ymd_hms`: Generate a date-time class object with an character vector of the format yyyy-mm-dd hh:mm:ss
* `lubridate::year`: Extract the year from a properly formatted date value
* `magrittr::%>%`: The pipe operator passes the output of the LHS argument to the function on the right
* `magrittr::extract`: Extract a value from an atomic vector or list item by position or name
* `purrr::keep`: Subset a vector with logic
* `purrr::map`: Iterate across a vector and return a list
* `purrr::map_vec`: Iterate across a vector and return a vector of values of the same length
* `purrr::pluck`: Extract a list item from a list
* `RColorBrewer::display.brewer.all`: Show pre-made palettes from R Color Brewer
* `readr::read_csv`: Read a tabular csv file into R as a tibble data frame
* `readr::read_lines`: Read an atomic vector into R
* `readr::read_rds`: Read an RDS file into R
* `readr::write_csv`: Write a data frame to your hard drive as a csv file
* `readr::write_lines`: Write an atomic vector to your hard drive as a txt file
* `readr::write_rds`: Write an data object to your hard drive as an RDS file
* `readxl::excel_sheets`: Return the names of worksheets in an Excel file
* `readxl::read_excel`: Read an Excel worksheet into R
* `rlang::{{}}`: Insert the variable inside of `{{ ... }}` into the body of a function
* `rlang::set_names`: Assign names to values in a vector or items in a list
* `stats::median`: Calculate the median value of a numeric vector and return as a one-value double numeric or integer vector
* `stats::reorder`: Order a variable by another variable (as used in ggplot aesthetics)
* `stats::sd`: Calculate the median value of a numeric vector and return as a one-value double numeric vector
* `stats::var`: Calculate the variance of a numeric vector and return as a one-value double numeric vector
* `stringr::str_c`: Concatenate strings, with or without (default) a separator
* `stringr::str_detect`: Logical test of whether a pattern (string) is contained within a character value
* `stringr::str_replace`: Replace a given pattern in a string with a new pattern
* `tibble::lst`: Combine objects into a list while maintaining any names assigned to the global environment
* `tibble::tibble`: Column-wise creation of a tibble data frame
* `tibble::tribble`: Row-wise creation of a tibble data frame
* `tidyr::drop_na`: Remove rows that contain NA values
* `tidyr::pivot_longer`: Convert a data frame from wide to long format
* `tidyr::pivot_wider`: Convert a data frame from long to wide format
* `tidyr::replace_na`: Replace an NA value in a vector with a different value
* `tidyr::separate` (superseded): Separate a single column into multiple columns by a delimiter
* `tidyr::unite`: Combine columns in a data frame to create a single column
* `tidyselect::everything`: Used in combination with select, the selects all but the specified columns.
* `tidyselect::matches`: When used with select, this allows you to subset names with string matching
* `tidyselect:::select`: Extract by name from any named object (without quotes!)
* `tidyselect::where`: Select a variable with a function that returns `TRUE` or `FALSE` 
* `tidyverse::tidyverse_packages`: Generate a character vector of package names in the tidyverse metapackage
* `tidyverse::tidyverse_update`: Update packages in the tidyverse metapackage
* `utils::?`: Prefix operator to retrieve the help file for a function
* `utils::install.packages`: Download a package onto your computer's hard drive
* `utils::news`: View the version history of a package
* `utils::str`: View the structure of a data object

## Metacharacters in regex

::: panel
{{< fa user-secret size=2x >}} [Metacharacters are not R functions!]{style="font-size: 1.25em; padding-left: 0.5em;"}

When you are given a list of functions that you may use in a given problem set, recall that regex metacharacters are not functions. As such, they will not be included in your function list. You may use *any* metacharacter to address a given problem!
:::

* **Alternation constraint**, `(...)`: Constrains the use of a metacharacter to just the symbols inside of parentheses
* **Anchor**, `^...`: Specify the start of a string
* **Anchor**, `...$`: Specify the end of a string
* **Character class**, `[...]`: Define a *set* of symbols that you would like to match
* **Optional match**, `?`: Specify that the preceding symbol is optional
* **Range** (in a character class), `[...-...]`: Define a *range* of symbols that you would like to match in a given position
* **Or**, `...|...`: Specify a match of one string "or" another string
* **Repetition**, `...*`: Specify that a symbol can appear no times or an unlimited number of times
* **Repetition**, `...+`: Specify that a symbol appears at least once or an unlimited number of times
* **Repetition**, `{...}`: Specify the number of times a symbol should appear
* **Repetition**, `{...,...}`: Specify that a symbol may appear within a range of repetitions
* **Wild card**, `.`: Specify that a character value at a given location can be any symbol

## RStudio panes

Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
