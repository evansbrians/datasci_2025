---
title: "2.2 Introduction to data visualization with ggplot"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

![](../../images/hex_complex.png){.intro_image}

In this lesson we will explore, create, and modify a plot using the core tidyverse package *ggplot* -- an extraordinarily powerful and well-designed plotting system. This lesson provides 

* A video introduction to ggplot (runtime: XX:XX). Please be sure to watch that video prior to moving forward with the tutorial!
* A written guide that will serve as a reference for using ggplot and includes incorporating pipes into your plotting scripts. Although much of this content is a review of the introductory video, there will be new content sprinkled throughout. 

You will learn:

* Grammar of graphics
* Aesthetic mappings
* Layers (geometries)
* Modifying scales
* The coordinate system
* Labels
* Themes

## Introductory video

*Please note: I made this video quite a long time ago (and it used to come before the lesson on using pipes). The code in the written portion of this tutorial is much more closely aligned with modern code styling principles!*

{{< video https://www.youtube.com/embed/przzfGihKSY?si=f_oZbXcPiyKTCqhl >}}

## Background

The *ggplot* package is built on on the design principles of Leland Wilkinson's book <a href = "https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448" target = "_blank">The Grammar of Graphics</a>.

The grammar of graphics considers the structure of a given data visualization to be defined by the:

* **Data**: The information being plotted
* **Aesthetic mappings**: How the data are mapped to visual attributes
* **Layers (geometries)**: Expression of the data in the plot
* **Scales**: Maps from data to aesthetic space
* **Coordinate system**: Projection of data (e.g., x and y Cartesian coordinates)
* **Facets**: Subsets of data within a given plot (i.e., plots are broken into subplots based on some grouping variable)
* **Theme**: Styling of non-data elements in a plot


## Applying the Grammar of Graphics

Consider the plot we made in the *Introduction to visualizing data with ggplot* video. 

<img src = 'www/chickadee_mass.png' style = 'display: block;
margin-left: auto;
margin-right: auto;
width: 75%;padding-top: 15px; padding-bottom: 15px;'></img>

Try to answer the following regarding the plot, you can click the buttons to see the answers (but try to answer them first!):

<div>
<button class="accordion">What are the aesthetic mappings?</button>
<div class="panel">

* Species is mapped to the x axis
* Mass is mapped to the y axis
* Sex is mapped to color

</div>
</div>

<div>
<button class="accordion">Which elements of the plot are related to the plots theme?</button>
<div class="panel">

Trick question. **All** non-data elements!

</div>
</div>

<div>
<button class="accordion">Which elements of the plot are related to scale?</button>
<div class="panel">

* The range of the x and y axis in data and image space
* The colors

</div>
</div>

<div>
<button class="accordion">What is the coordinate system of this plot?</button>
<div class="panel">

Cartesian (x and y axes)
</div>
</div>

<div>
<button class="accordion">What geometries are present in this plot?</button>
<div class="panel">
Boxplots
</div>
</div>

## Getting started

Please open the `data_sci` project in R Studio.

Before we begin, please take the following housekeeping steps before continuing:

1. If there are any script files open in your source pane. Close them. If any of the file titles are blue, save them prior to closing.

1. In the *Environment* tab of your **workspace pane**, ensure that your **Global Environment** is empty. If it is not, click the *broom* to remove all objects.

1. In the *History* tab of your **workspace pane**, ensure that your history is empty. If it is not, click the *broom* to remove your history.

Ensure that the file `chickadees.csv` is located in your project folder, in the subfolder `data/raw`.

Open up a new script and save the script as "ggplot_worksheet.R" inside your `data_sci_2025/scripts` folder.

Please complete the following steps in your ggplot_worksheet script:

1. Give the top of the script a section header with the name "setup"

1. Load the tidyverse library

```{r eval = TRUE, message=FALSE}
# setup  -----------------------------------...

library(tidyverse)
```

## The data

In your script file, please provide a comment stating that you are reading in a file. Use `read_csv()` to read `chickadees.csv` into your Global Environment and assign the key `chickadees` to the resultant object.

```{r}
# Read in data

chickadees <- 
  read_csv("data/raw/chickadees.csv")
```

Let's take a quick look at the `chickadees` tibble:

```{r eval = TRUE, message=FALSE}
chickadees
```

### Plotting data

We begin a plot by adding the grammar of graphics data element. The resultant plot is not meaningful, but it is a good place to start.

```{r eval = TRUE, message=FALSE}
ggplot(data = chickadees)
```

*Note: It is often unnecessary to include things like `data = `. I am including the names of the arguments here until I am sure that everyone is comfortable with ggplot.*

Because data is the first argument of the `ggplot()` function, this argument can also be piped in:

```{r}
chickadees %>% 
  ggplot()
```

One of my goals of this lesson will be to demonstrate why piping your data is *more appropriate* when plotting your data with ggplot. Why this is the case will become more apparent once we add more elements to our plot ...

## Aesthetic mappings

After piping our data into ggplot, we need to decide which aesthetic mappings are appropriate for our question. It entirely depends on what we want to explore or visualize with our dataset. In this case, let's create a plot that compares wing length with mass. The body size to mass ratio is a common measurement in ecological studies of birds and other wildlife. We will visualize wing as the predictor variable (x axis) and mass as the response variable (y axis).  

```{r = FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass
  )
```

Notice that ggplot assigned the scale element to the visualization automatically, It chose the scale based on the limits of the data. By default, ranges of the x and y axes are 5% below and above the upper and lower limits of the data.

## Layers (geometries)

With our data mapped to our aesthetics, it is now time to add layers to our plot. Layers are also called geometries. Each geometry function is written as  `geom_` followed by the type of geometry.

### Scatterplot

To create a scatterplot, we want to add point geometries to our plot using the function `geom_point()`:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass
  ) +
  geom_point()
```

Have a look at the `+` sign. This is actually a pipe, but it is a pipe that can exclusively be used in `ggplot` functions (and a few other related packages). Here, we are piping the output of the `ggplot` function into the input of the `geom_point` function.

We can add another geometry to the plot, a line of best fit, using the `geom_smooth` function. I supply the following arguments to my function:

* `formula = y ~ x` to specify the predictor and response variables
* `method = "lm"` to specify that we want to use a linear model to compare the association between the variables
* `se = FALSE` because I am not interested in standard error at the moment

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass
  ) +
  geom_point() +
  geom_smooth(
    formula = y ~ x, 
    method = "lm",
    se = FALSE
  )
```

Recall that in the video lecture we found that Black-capped chickadees are larger than Carolina chickadees. Let's add a new aesthetic mapping to the data that applies to both geometries. We could color the points and the line by species by adding individual aesthetic mapping arguments to both `geom_point()` and `geom_smooth()`...

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass
  ) +
  geom_point(
    aes(color = spp)
  ) +
  geom_smooth(
    aes(color = spp),
    method = "lm",
    formula = y ~ x, 
    se = FALSE
  )
```

... Or we can simplify our argument above by specifying the color aesthetic in our initial mapping.

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point() +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE
  )
```

We have a lot of control over the style of our geometries. For example, perhaps we want our points to be a little larger, we can specify that in our `geom_point` function using the `size = ` argument. To avoid a crazy looking plot, we can also add transparency using the `alpha =` argument:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE
  )
```

That's more reasonable, plots like this say to me "I am more interested in seeing the trends, but I want others to also notice the underlying data." We can enhance that message a bit further by making our line a little wider using the `linewidth =` argument:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
    geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  )
```

## Modifying scales

We have thus far created a reasonable plot that perhaps conveys the information we would like to communicate. Our plot is not very pretty yet though.

### Scales: Numeric range

Let's start by modifying the range of the x and y axes. Before I scale an axis, I usually like to be sure what the limits of my data actually are. We can use `summary()` to figure that out.

```{r eval = TRUE, message=FALSE}
summary(chickadees)
```

We use the function `scale_y_continuous()` to scale the y axis. Based on the results of our function, it looks like 7 and 13 are probably pretty good values for our scaling operation. We will set the following arguments:

* `limits = c(7, 13)`: This provides a vector representing the lower and upper limits of the values we want to plot.
* `expand = c(0, 0)`: This ensures that the axis stops at our chosen values.

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  )
```

We can do the same with our x axis, using the function `scale_x_continuous()`. The results from summarizing our dataset suggested that a minimum wing size of 50 mm and maximum wing size of 70 mm would fit our needs perfectly.

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  )
```

### Scales: Colors

Recall that color is actually a type of scaling, even in this case (where the data are binary). We will use `scale_color_manual()` to change the color scale. Following what we did in our video lecture, I could choose colors by name:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    values = c('orange', 'green')
  )
```

Or we can use hexadecimal color codes. One way to do this is by using a color picker app (I like <a href = "https://chrome.google.com/webstore/detail/colorpick-eyedropper/ohcpnigalekghcmgcdcenkpelffpdolg?hl=en" target = "_blank">this one</a>) to find colors that we like online. I am going to use this image from the Fantastic Mr. Fox. 

<img src = 'www/fantastic_fox.jpeg' style = 'display: block;
margin-left: auto;
margin-right: auto;
width: 100%; height: auto; padding-top: 15px; padding-bottom: 15px;'>

With this picture, I have chosen to go with a color from Kylie Sven Opposum's jacket (#595B18) and from the coat of Mr. Fox himself (#CA621E).

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    values = c("#595B18", "#CA621E")
  )
```

This plot is probably great for Wes Anderson fans who do not suffer from red-green color blindness, but not likely optimal otherwise. 

I will stay with this version for now, but you give it a try. See if you can find a color scheme that you like (especially with a color picker app) and modify the plot to suit your color preference.

#### Brewed colors

One option for generating plots with colors is using a pre-made palette from the package *RColorBrewer*. We can see available default palettes using the function `RColorBrewer::display.brewer.all()`. To add an RColorBrewer palette, we use `scale_color_brewer()` and specify the name of the palette in quotes. Let's add a nicer color palette to our bar plot:

```{r}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_brewer(palette = "Dark2")
```

*Note: I typically like to generate my own palettes though!*

## Labels

Now we will add some labels to our plot. In my data frames, I always use lowercase as my convention. It makes it easier on my fingers to call columns (no extra shift button to hit) and does not really affect the readability of the table. When it comes time to plot the data, however, it is pretty suboptimal.

Let's use `labs()` to add a title and x- and y-axis (with units!) labels:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  )
```

We can change the legend title in our argument for `scale_color_manual()`:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  )
```

## Facets

Facets separate a single plot into subplots. They can really help us visualize data.

In this example, perhaps we are interested in comparing between species, but observing the relationship by sex. Let's keep our points and lines colored by species but add a facet for each sex using `facet_wrap`:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  ) +
  facet_wrap(~ sex)
```

We have not made the most compelling labels for those facets. The way that I normally deal with this is changing the data to a factor and using the factor labels. Let's explore the sex variable:

```{r eval = TRUE}
table(chickadees$sex)
```

We can use `factor()` to change this variable to a factor (*Note: there will soon be a better way to do this!*):

```{r eval = TRUE}
chickadees$sex <-
  factor(
    chickadees$sex, 
    levels = c("F", "M"),
    labels = c("Female", "Male")
  )
```

*We specified levels as one of the arguments of the above `factor()` operation. Why was this not necessary?*

Let's see how it looks now when we plot it:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  ) +
  facet_wrap(~ sex)
```

## Themes

Now that we have a plot that we like (maybe ... my color choices were questionable at best ... hopefully you found better ones?), it is time to specify the **themes**. Recall that themes determine how the non-data elements look.

One trick that I did not show in the lecture is my preferred theme, `theme_bw()`. I usually use this as a starting point for my plots:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  ) +
  facet_wrap(~ sex) +
  theme_bw()
```

Now we can modify specific theme elements inside the `theme` function. We almost always have to modify the size of the axis labels and titles. Text theme elements are modified by passing arguments to `element_text()`. Let's make our axis text larger:

```{r eval = TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  ) +
  facet_wrap(~ sex) +
  theme_bw() +
  theme(
    axis.text = element_text(size = 12)
  )
```

Be sure to look through the help file (`?theme`) at all of the various options you have for changing the theme of a plot. We will discuss ggplot themes much more in depth in our next ggplot lesson!

<br>

::: mysecret

<i class="fas fa-user-secret" style = "font-size: 36px;"></i> I adjust my themes at the very end of my ggplot code. You typically need to adjust themes iteratively when you save a file. Having `theme()` at the end of your ggplot code section makes it easier to find and modify.

:::

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Aesthetic mappings**: How the data are mapped to visual attributes.
* **Data** (in the Grammar of Graphics): The information being plotted.
* **Layers (geometries)**: Expression of the data in the plot.
* **Scales**: Maps from data to aesthetic space.
* **Coordinate system**: Projection of data (e.g., x and y Cartesian coordinates).
* **Facets**: Subsets of data within a given plot (i.e., plots are broken into subplots based on some grouping variable).
* **Theme**: Styling of non-data elements in a plot.
:::

<button class="accordion">Functions</button>
::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *tibble* and *tidyverse* are loaded with `library(tidyverse)`.

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_2.4_intro_to_data_vis.csv"
) %>% 
  read_csv() %>% 
  kableExtra::kable(
    align = c("c", "c", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```

:::

:::


<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
