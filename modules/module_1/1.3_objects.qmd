---
title: "1.3 R Objects"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
# library(tidyverse)

knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  error = TRUE)

rm(has_annotations)
```

<hr>

<div>
![](../../images/hex_complex.png){.intro_image}

Objects in R can be thought of as containers that store information. There are three general categories of objects that we typically use in R:

-   **Functions** contain a series of commands used to complete a given task.
-   **Environments** are dimensionless containers that contain references to other objects.
-   **Data objects** contain and structure references to data in an ordered, predictable way.

In this lesson, we will begin our exploration of each of these types of objects. In doing so, I will introduce a lot of the terminology that we will use throughout this course (pay close attention to **bold text**!). You will learn:

* What is a function (and what is not a function)?
* Prefix vs. infix functions
* What the term "Global Environment" means and how to manage it effectively
* What "package environments" are and how to use them with and without the `library` function
* The most common data objects (atomic vectors, matrices, lists, and data frames) and how they are related

[{{< fa exclamation-triangle size=2x >}} Important!]{style="color: red;"} This lesson assumes that you have completed preliminary [Lesson 1: R & RStudio](https://smbc.shinyapps.io/L0-intro_RStudio/#section-overview){target="_blank"}, [Lessons 3.1-3.5](https://smbc.shinyapps.io/L2-rObjects/#section-overview){target="_blank"}, and [Lessons 4.1-4.2](https://smbc.shinyapps.io/L3-indexing/#section-positions-in-an-object){target="_blank"}. As the material covered herein will build on the content in those lessons, please do not proceed until their completion.

</div>

## Before you begin

To get the most out of this lesson, please:

* Open RStudio in a clean session;
* Ensure that you are working in your course project;
* Open the script file [scripts/lesson_1.3.R]{.mono}
* Code along with the content!

## Functions

A **function** is a set of instructions used to complete a given task. Ultimately, anything that happens is the result of running a function ([John Chambers, userR!2014](http://user2014.r-project.org/files/chambers.pdf){target="_blank"}). Early in the R learning process, R seems to be an endless, and often overwhelming, collection of functions. The R learner is typically engaged with how to complete the tasks before them (e.g., statistical analyses) and finds themselves slowly gathering a series of functions that will become the foundation of their R toolkit.  A side effect of this process is that it leaves the false impression that developing R skills *is* the process of adding functions to that toolkit. Learning new functions is certainly a part of learning R, but I would argue that it is far from the most important component (which I believe is understanding the language ... *why* things work the way they do).

All functions are called with:

* A name: The reference that R uses to retrieve the instructions for execution
* Argument(s): Parameters provided to a function (e.g., the data upon which the function will act)

### Prefix functions

The majority of functions in R are known as **prefix functions**. A prefix function is a function in which the name of the function precedes the target of the evaluation. To run most prefix functions, you supply the name assigned to the set of instructions, parentheses, and the target of evaluation. Consider the following code:

```{r}
c(1, 1, 2, 3)
```

In the above:

* The assigned name (`c`; the combine function) is used to retrieve the set of instructions;
* The parentheses (which are themselves a function) tell R to execute the function using the values that are enclosed within the parentheses;
* The values inside the parentheses are both the target of the execution and the arguments;
* Each argument is separated by a comma.

*Note: Our line of code actually contains two functions, `c` and `()`.*

**Prefix operators**: A few prefix functions are **operators** (but not many!). Operators are functions that are referenced by a symbol and do not require parentheses to specify the target of evaluation. Examples of prefix operators are the help operator (`?`), the negative symbol (`-`, when used to specify a negative number) and the "not" symbol (`!`):

```{r}
?TRUE

-TRUE

!TRUE
```

::: mysecret
{{< fa screwdriver-wrench size=2x >}} [Not all symbols are operators!]{style="font-size: 1.25em; padding-left: 0.5em;"}

It is important to recognize that *some* symbols are operators and *all* operators are functions. It is equally important, however, to recognize that **not all symbols are operators**. There are a number of symbols in R that carry a special meaning but are not functions in-and-of-themselves. These include, but are not limited to: commas (`x, y`), single quotation marks (`'x'`), double-quotation marks (`"x"`), and backticks (`` `x` ``).
:::

### Infix functions

An **infix function** is a function in which the name of the function is placed between the function's arguments. Most of the operators that we use in R are infix functions.  We learned examples of several infix operators in the preliminary lessons, which include (but are not limited to):

* Assignment operators (`<-` and `=`);
* Mathematical operators, such as `+`, `/`, and `*`;
* Logical operators, such as `==`, `>`, and `%in%`;
* Colon operators (`:` and `::`);
* The `$` extraction operator.

### Braces and brackets

Brace and bracket operators *are* functions but they do not quite fit the definition of prefix *nor* infix functions. Instead, they enclose variables and must include an opening brace/bracket and paired closing brace/bracket. These include:

* Parentheses `(...)` and curly braces `{...}`;
* Square bracket extraction operators (`[...]` and `[[...]]`)

### Primitive functions

The base R distribution includes access to **primitive functions**, which are functions that are written in C code and these functions are made available to us when we start a session.

Primitive functions may be prefix or infix functions and also include parentheses and round braces. Examples of primitive prefix functions include `c`, `class`, `list`, and `rep`. Most operators (prefix and infix) are primitive functions.

You can see if a function is primitive or an R function in your command line by wrapping the function in backtick quotes and hitting enter:

```{r}
`<-`
```

To see the primitive functions used in this lesson, please see **Reference** at the bottom of this document.

### Getting help with functions

It is *super* important to read the help file with functions that you are not familiar with! As we covered in the preliminary content, you can access the help file for most functions by supplying the `?` prefix operator followed by the name of the function:

```{r, eval = FALSE}
?c
```

For operators, you must wrap the function inside of backtick quotes:

```{r, eval = FALSE}
?`<-`
```

::: mysecret
{{< fa user-secret size=2x >}} [Functions change and so do we!]{style="font-size: 1.25em; padding-left: 0.5em;"}

Regularly re-reading help files for functions that you are familiar with is important. The arguments of functions are often updated with new versions of packages. Moreover, as our familiarity with a function increases over time, so does our ability to read and understand the function's usage.
:::

*Note: We will soon be writing our own custom functions ... but not today!*

## Environments

In R, an **environment** can best be thought of as a collection of names that are associated with data that are temporarily stored in your computer's memory. That sounds simple enough, but there is a bit of computer jargon that we should unpack:

-   What is **memory**? Memory, or more specifically random access memory (RAM), is a temporary storage location for instructions (functions) and data. Memory allows for fast processing times (as opposed to data stored on a hard drive) because it is stored in a location that is very close to your computer's processor.
-   What is a **name**? A "name" is a reference that R uses to call data from your computer's memory. This can also be referred to as an **assignment** (when used as a noun).

In his book, [Advanced R](https://adv-r.hadley.nz/){target="_blank"}, Hadley Wickham calls an environment a "bag of names" -- that's a pretty good way to think about it!

### The global environment

Whenever you use R, you are working in an environment. The environment we work in the most is known as the **global environment**. The global environment contains all of the names that we have assigned within our current session. 

We can view all of the names assigned to the global environment with the function `ls`:

```{r}
ls()
```

Our global environment is currently empty. When we **assign** (verb) an object to a name, R typically stores the name in the global environment. This, in turn, tells our computer to store the data in our computer's memory during our R session.

```{r}
greetings <- "hello world"

ls()
```

We can then retrieve the data simply by typing the name stored in our global environment:

```{r}
greetings
```

### Package environments

R Packages also have a type of environment known as the **package environment**. The package environment represents a collection of variable names associated with all of the functions and data objects in a package. In practice, the package environment allows us to type the name of a function and provides R with the ability to retrieve the function's instructions.

When we open an R session, we have access to the global environment, primitive functions, and multiple package environments within the base distribution (e.g., *base*, *stats*, *utils*). We can use the function `search()` to view this:

```{r}
search()
```

The above provides a character vector of search paths that R currently has available to it (i.e., places where R can directly look up assigned names).

Working from the other direction, if we want to know the package environment where a function's name can be found, we can use the `environment` function. For example, to view the package environment of the `mean` function, we could run:

```{r}
environment(mean)
```

The R community has generated thousands of packages for a variety of applications (most of which should be avoided). When we install a community-generated package (e.g., `install.packages("tidyverse")`), we are saving the package's contents to our hard drive, but we have not yet provided R with access to the package environment. In other words, the names of the functions in the package have not been added to R's search path.

For example, the function `tribble` is in the *tibble* package. We downloaded that package when we installed the *tidyverse* metapackage (recall that the *tidyverse* metapackage loads multiple packages). Although the *tibble* package has been installed, we do not yet have access to the `tribble` function in our current session:

```{r, error = TRUE}
tribble(
  ~ a, ~ b,
    1,   1,
    2,   3
)
```

We received an error because R could not find the `tribble` function. That is because the *tibble* package's environment is not in R's search path for our current session:

```{r}
search()
```

We can provide R access to the *tibble* package's environment by providing the name of the package, followed by the `::` operator, and then the name of the function:

```{r}
tibble::tribble(
  ~ a, ~ b,
    1,   1,
    2,   3
)
```

Note that this pulled the `tribble` function from the `tibble` package's environment, but we still have not added the package environment to the search path. As such, the following still produces an error:

```{r, error = TRUE}
tribble(
  ~ a, ~ b,
    1,   1,
    2,   3
)
```

That is a desirable effect if you just want to use a package's functions once or twice in a given session (why load *all* of the names?). Moreover, because sometimes the names of functions in packages share names, this helps avoid conflicts among packages. 

An alternative approach is to attach the package environment with the `library` function. This process for accessing a package's environment, which is sometimes referred to informally as "loading a package", should be used when the functions from a package are used often within a given script or R session. To attach a package, you simply supply the `library` function followed by parentheses, and then the unquoted name of the package that you would like to attach:

```{r, message = FALSE}
library(tibble)
```

We can now call the function without the use of the `::` operator:

```{r, error = TRUE}
tribble(
  ~ a, ~ b,
    1,   1,
    2,   3
)
```

The above now works because the `library` function added the package's environment to R's search path for the current session:

```{r}
search()
```

::: mysecret
{{< fa user-secret size=2x >}} [Do not individually attach core tidyverse packages!]{style="font-size: 1.25em; padding-left: 0.5em;"}

I do not typically attach *tibble* with `library(tibble)`. The *tibble* package is one of the **core tidyverse packages**, which are a subset of tidyverse packages that may be attached with:

```{r, message = FALSE}
library(tidyverse)
```

Because I use functions from multiple core tidyverse packages in almost every R session, it does not make sense to attach the package environments individually. 

To produce a character vector of *all* of the packages in the tidyverse (both core and non-core), run the following code:

```{r}
tidyverse_packages()
```

To get a sense of which tidyverse packages make up the **core tidyverse**, generate a character vector of the search path *after* attaching the tidyverse metapackage:

```{r}
search()
```

*Note: Core tidyverse packages also import functions from other tidyverse packages. For example, the tibble package imports some (but not all) functions from magrittr, pillar, and rlang.*
:::

## Data objects

In this course, I will use the term **data objects** to describe containers that provide ordered and structured references to data values stored in our computer's memory.

The **order** of a data object allows us to reference values by position (unlike environments, which are unordered). Consider, for example, the following numeric vector:

```{r}
c(1, 1, 2, 3)
```

The value "2" in the above vector is the third value in the vector. Because the data are ordered, we can index the vector with the double square brackets (`[[...]]`) function to extract the value at the third position:

```{r}
c(1, 1, 2, 3)[[3]]
```

The **structure** of a data object primarily describes the **dimensionality** of the enclosing container (typically in one or two dimensions), whether the data are **homogeneous** (one class of values) or **heterogeneous** (two or more value classes), and sometimes the class of the values that the object contains (for atomic vectors).

The primary classes of objects that we will work with in this course are atomic vectors, lists, matrices, and data frames. These classes determine *how* we work with them. 

The table below may help you sort between the structure of these common data objects:

|                      | Homogeneous    | Heterogeneous  |
|:--------------------:|:--------------:| --------------:|
| **One-dimensional**  | Atomic vector  | List           |
| **Two-dimensional**  | Matrix         | Data frame     |

The above is a handy (and often used) way to describe the structure of different object classes. However, I have found that it can lead to some confusion when working with these data objects. In an attempt to avoid this we will look at:

* **Class**: A blueprint that describes an object's structure. We will assess this with the function `class()`.
* **Type**: How the object is stored in your computer. We will assess this with the function `typeof()`.

::: mysecret
{{< fa user-secret size=2x >}} [Evaluate the class and type of every data object that you create or use!]{style="font-size: 1.25em; padding-left: 0.5em;"}
:::

### Atomic vectors

An **atomic vector** is a one-dimensional object where each value is of the same class and type. 

We can generate an atomic vector using the combine function, `c()`:

```{r}
c(1, 2, 3, 4)
```

We can determine the class of the vector by assessing the values with the `class` function:

```{r}
class(
  c(1, 2, 3, 4)
)
```

The above is not surprising, we have supplied numeric values and thus created a numeric vector.

The type of an atomic vector, however, is not always straightforward. For example, the numbers 1, 2, 3, and 4 are **integers** (i.e., whole numbers):

```{r}
c(1, 2, 3, 4)
```

It seems that the above should be stored as integer values, right? Let's see:

```{r}
typeof(
  c(1, 2, 3, 4)
)
```

It is not! It is a **double numeric vector**! A double numeric vector is basically a numeric vector where the values are stored as decimal numbers.

To create an integer vector with adjacent numbers, we use the colon function (`:`):

```{r}
typeof(1:4)
```

What if the numbers are non-adjacent? We can convert a numeric vector stored as "double" to an integer vector using the `as.integer` function:

```{r}
as.integer(
  c(1, 2, 3, 4)
)
```

... and evaluate the type of values in the object:

```{r}
typeof(
  as.integer(
    c(1, 2, 3, 4)
  )
)
```

Likewise, if we wanted to transform an integer vector to a double numeric vector, we use the function `as.numeric`:

```{r}
typeof(
  as.numeric(1:4)
)
```

Conversion between atomic vector classes and types can sometimes pose challenges. For example, let's create an atomic character vector and assign the object to a name (with the assignment function, `<-`):

```{r}
musicians <-
  c(
    "roger",
    "pete",
    "john",
    "keith"
  )

class(musicians)
```

*Note: It is important to recognize that the above worked because `musicians` is a pointer that R uses to reference the values in the vector.*

Let's see what happens if we try to convert this character vector to numeric:

```{r}
as.numeric(musicians)
```

We get a warning message! The values were converted to `NA` because R had no way of knowing how to describe the values numerically.

Conversely, recall that factor vectors are stored as integers. We can convert our musicians from characters to factors with the `factor` function ... 

```{r}
factor(musicians)
```

... and observe how the object is stored:

```{r}
typeof(
  factor(musicians)
)
```

Because integers *can* be converted be converted to numeric, and factors are stored as integers, the below *does* work!

```{r}
as.numeric(
  factor(musicians)
)
```

To see *why* this worked, we should explore the structure of the factor. The `str` function provides a handy way to look at (print) the structure of an object:

```{r}
str(
  factor(musicians)
)
```

In the above, we can see the class of the object (factor), the factor levels (annoyingly truncated), and the integer values that make up the vector. Recall from the preliminary content that factor levels are assigned alphabetically by default!

::: mysecret
{{< fa user-secret size=2x >}} [All objects in an atomic vector must share the same class and type!]{style="font-size: 1.25em; padding-left: 0.5em;"}

Notice what happens when we use `c()` to combine two vectors of different classes:

```{r}
c(musicians, 1:4)

class(
  c(musicians, 1:4)
)

typeof(
  c(musicians, 1:4)
)
```

Because `c()` generates an atomic vector and all values in an atomic vector must be of the same class and type, the integer values were changed to characters. Knowing this can help find problems in a data set. For example, if you read in a dataset and there is a column that you believe should be numeric but has been converted to a character, it is likely that there is a character value hidden somewhere in the data.
:::

<hr style="margin-top: 3em">

### Matrices

A **matrix** is an atomic vector with an additional attribute that arranges the data as rows and columns (i.e., it is a two-dimensional object).

We can create a matrix from scratch using the `matrix` function. We supply:

* An atomic vector of values
* The number of rows (`nrow = ...`) and/or columns (`ncol = ...`) to arrange the data into
* The order in which to populate the matrix (`byrow = FALSE` or `byrow = TRUE`)

```{r}
matrix(
  1:4,
  nrow = 2,
  ncol = 2,
  byrow = FALSE
)
```

Note in the above that the matrix was populated by column. This occurred because `byrow` was set to `FALSE` (the default). Watch what happens when we set `byrow = TRUE`:

```{r}
matrix(
  1:4,
  nrow = 2,
  ncol = 2,
  byrow = TRUE
)
```

It should come as no surprise that the class of the data object is a matrix (we did just generate a matrix, after all):

```{r}
class(
  matrix(
    1:4,
    nrow = 2,
    ncol = 2,
    byrow = TRUE
  )
)
```

... a peak under-the-hood, however, shows us that the data is stored as an atomic vector!

```{r}
typeof(
  matrix(
    1:4,
    nrow = 2,
    ncol = 2,
    byrow = TRUE
  )
)
```

This can be further illustrated by printing the structure of the data:

```{r}
str(
  matrix(
    1:4,
    nrow = 2,
    ncol = 2,
    byrow = TRUE
  )
)
```

In the above, we can see that the object is an integer with some dimensionality.

As such, we have not really changed the values themselves. What we *have* done is add an attribute to the container that describes the dimensions of the values. We can investigate this with the `attributes` function:

```{r}
attributes(
  matrix(
    1:4,
    nrow = 2,
    ncol = 2,
    byrow = TRUE
  )
)
```

But what about `byrow = TRUE/FALSE`? Didn't we specify the location of those values in matrix? The function `as.vector` can be used to transform the data back into an atomic vector. Let's see what this generates when arranging the data by row or column:

```{r}
# Arrange matrix by row and convert to a vector:

as.vector(
  matrix(
    1:4,
    nrow = 2,
    ncol = 2,
    byrow = TRUE
  )
)

# Arrange matrix by column and convert to a vector:

as.vector(
  matrix(
    1:4,
    nrow = 2,
    ncol = 2,
    byrow = FALSE
  )
)
```

In the above we can see that the position of the values in the matrix was generated by specifying the position of the values in the atomic vector.

::: mysecret
{{< fa user-secret size=2x >}} [A matrix *is* an atomic vector (and that matters)!]{style="font-size: 1.25em; padding-left: 0.5em;"}

Because a matrix *is* an atomic vector (with an additional attribute defining dimensions), all values in a matrix must be atomic:

```{r}
matrix(
  c(musicians, 1:4),
  nrow = 4,
  ncol = 2,
  byrow = TRUE
)
```

:::

<hr style="margin-top: 3em">

### Lists

A list is a one-dimensional object (i.e., vector) where values, which I will call **list items**, can be of any class or type.

We can generate a list with the `list()` function. Let's combine our `musicians` and the integers `1:4` into a list and assign the name `my_list` to the data object:

```{r}
my_list <- list(musicians, 1:4)
```

Have a look at the values in the resultant object:

```{r}
my_list
```

The class of each list item was maintained because lists are not atomic. Instead lists are what is known as a **recursive object** -- recursive objects are data objects that are made up of references to component objects. In other words, unlike an atomic vector, the list itself is simply a type of container for holding other objects (and, really, just the references to other objects ... we will see why in ***Lesson 1.5: Assignments***). As such, both the class and type of a list is simply a list:

```{r}
class(my_list)
```

```{r}
typeof(my_list)
```

If we look at the structure of the data, we can see that the list is comprised of two different atomic vectors (a character vector and an integer vector):

```{r}
str(my_list)
```

The concepts of parents and children may be a useful construct to understand this. A **parent** is a container that contains references to other objects. The name `my_list` is stored in the global environment, thus the global environment is a parent of `my_list`. A **child** is contained within a parent. The name `my_list` is a child of the global environment and reference points to the two vectors are children of the list object. As a reminder, a reference point is a symbol (or name, if a name is assigned), that R uses to find an object.

The above shows that lists have a hierarchical structure. The list is a parent that contains reference points to it's children -- a character vector and an integer vector. Because each list item is stored separately, the list itself does not need to be atomic.

In practice, this means that lists are very flexible to work with. However ...

::: mysecret
<i class="fas fa-user-secret" style="font-size:36px"></i>   [Restrictions are <strike>annoying</strike> great!]{style="font-size: 20px"}

The flexibility of lists makes them very powerful ... unfortunately it also can make them difficult to work with and prone to errors. Restrictions in the behavior of objects makes it much easier to spot problems in our data.
<br>
:::

<hr style="margin-top: 3em">

### Data frames

A **data frame** is a restrictive class of list that is arranged in rows and columns. Each column in a data frame represents a list item. Data frames have three important restrictions that distinguish them from other lists:

-   Each column (i.e., variable) in a data frame is a list item of equivalent length.
-   The data that comprise a column must be of the same class and type.
-   A name must be assigned to each column (if not, it will be assigned for you).

We can use the function `data.frame()` to combine two vectors into a data frame and assign the object to the name `my_df`:

```{r}
my_df <-
  data.frame(
    musician = musicians,
    number = 1:4)
```

... and have a look at the data:

```{r}
my_df
```

Printing the structure of the data frame reveals that it is the parent object of two vectors:

```{r}
str(my_df)
```

In the above, we can see that:

* The data frame contains two variables (columns)
* Each variable has four observations (rows)
* Each variable is an atomic vector

*Notice that the children of `my_df` are the columns and not the rows -- that knowledge will serve you well in the coming lessons.*

::: mysecret
<i class="fas fa-user-secret" style="font-size:36px"></i>   [Variables and observations!]{style="font-size: 20px"}

Once we start to dive into the tidyverse, the terminology "variable" and "observation" become super important:

* **Variable**: A column in a data frame
* **Observation**: A row within a data frame 
<br>
:::

Let's take a look at the class of the object and how it is stored. Note that the class of this object is data frame:

```{r}
class(my_df)
```

However, the type of this object is a list (i.e., the data are stored as a list)!

```{r}
typeof(my_df)
```

### Tibble data frames

The above instance is the *only* time that we will use the function `data.frame` in this course (personally, I never use it). Instead we will use **tibble** data frames, which are a special, restrictive class of data frame.

To generate a tibble data frame, we can use the function `tibble()` to combine two vectors into a single data object:

```{r}
# A tibble of musicians and their instruments:

my_tibble <- 
  tibble(
    musician = musicians,
    number = 1:4)

my_tibble
```

The most apparent difference between a tibble and a typical data frame is that structural information on the tibble is printed by default. The above printed:

* The class of the object (a tibble data frame)
* The dimensions of the object (four rows and two columns)
* The names of the variables
* The class of the variables
* The values (truncated if there are many rows and/or columns)

The differences do not stop there though -- tibbles are also more restrictive. For example, notice the kind of object that is returned when we use indexing to extract the second column in a data frame:

```{r}
my_df[, 2]
```

It is an atomic vector! For a tibble, the class of object does not change (it is still a tibble):

```{r}
my_tibble[, 2]
```

Tibbles are also restrictive about the use of `$`. In a data frame, columns can be extracted with partial matching:

```{r}
my_df$musician

my_df$m
```

In a tibble, partial matching is not allowed:

```{r}
my_tibble$musician

my_tibble$m
```

Finally (though there are more differences), data frames will recycle values during their construction:

```{r}
data.frame(
  a = 1, 
  b = 1:4)

data.frame(
  a = 1:2, 
  b = 1:4)
```

Whereas tibbles will only recycle a single value:

```{r, error = TRUE}
tibble(
  a = 1, 
  b = 1:4)

tibble(
  a = 1:2,
  b = 1:4)
```

::: mysecret
<i class="fas fa-user-secret" style="font-size:36px"></i>   [Hurray!! An error message!]{style="font-size: 20px"}

Error messages are annoying but incredibly useful -- we need to find a place in our hearts to appreciate them. With restrictions on a function's usage or on the structure and composition of a data object, error messages stop us from making mistakes. When we generate an error message, it generally means that there is something that we do not understand about the data that we are using or the function that is causing the error.
:::

#### Other ways of generating tibbles ...

We can also construct a tibble by binding the vectors together with the `bind_cols()` function:

```{r}
# A tibble of musicians and their instruments:

bind_cols(
  musician = musicians,
  number = 1:4)
```

Because a tibble *is* a list and each column *is* a list item, we can also use `bind_cols` to combine two tibbles (by column):

```{r}
# A tibble of musicians and their instruments:

bind_cols(
  tibble(musician = musicians),
  tibble(number = 1:4)
)
```

Finally, it is often useful to use the `tribble()` function to generate a tibble. This allows for row-wise tibble construction -- in other words, the `tribble()` function allows us to generate a tibble with code that looks like the output. To do so, column names are preceded by a function operator (`~`) and separated by a comma. Values are typically written in the position that they will occupy in the resultant tibble.

```{r}
# Combining the two vectors into a tibble with tribble():

tribble(
  ~musician, ~number,
  "roger",    1,
  "pete",     2,
  "john",     3,
  "keith",    4)
```

## Indexing (enhanced review)

We explored indexing in ***Preliminary lesson 4***. Given that the complexity of our code has increased at this point, it is worth revisiting some key elements of the indexing process, especially as it relates to data frames and tibbles.

Recall that we can extract a list item by position:

```{r}
list(
  fruit = c("apple", "banana"),
  numbers = 1:2)[[1]]
```

... or by name:

```{r}
list(
  fruit = c("apple", "banana"),
  numbers = 1:2)[["fruit"]]
```

Given that a tibble is a restrictive type of data frame:

```{r}
class(my_tibble)
```

... a data frame is a restrictive type of list:

```{r}
typeof(my_tibble)
```

... and the columns (i.e., variables) of a data frame are equivalent to the items in a list:

```{r}
str(my_tibble)
```

We can equivalently extract a column from a data frame by position:

```{r}
my_tibble[[1]]
```

... or by name:

```{r}
my_tibble[["musician"]]
```

... which is equivalent to:

```{r}
my_tibble$musician
```

::: mysecret
{{< fa user-secret size=2x >}} [Avoid indexing by numeric indices!]{style="font-size: 1.25em; padding-left: 0.5em;"}

There are times when indexing by numeric indices is useful, especially during iteration, but this should be typically be avoided when indexing columns.
It is greatly preferred to extract by name rather than position because:

* It is much more communicative to let your readers (including your future self) know the variable that you are extracting or subsetting by.
* If the position of your columns has changed, you just broke your code!
:::

Of course, a data frame is a very special type of list -- it has two dimensions! This gives us the power to index by row (observation):

```{r}
my_tibble[c(1, 4), ]
```

... by column (variable):

```{r}
my_tibble[, "musician"]
```

... or by both column *and* row:


```{r}
my_tibble[c(1, 4), "musician"]
```

This two-dimensional nature of a data frame gives us an incredible opportunity to use logic to subset data frames to rows that match a given condition or set of conditions.

Recall (from ***Preliminary lesson 4***) that we can test whether the values in a vector match a given value using the `==` operator:

```{r}
my_tibble[["musician"]] == "roger"
```

... or test whether the values in a vector match a set of values using the `==` operator:

```{r}
my_tibble[["musician"]] %in% c("roger", "keith")
```

By nesting these statements within the row position of our two-dimensional indexing brackets (`[row, column]`), we can subset the data to rows in which our test evaluates to `TRUE`:

```{r}
my_tibble[
  my_tibble[["musician"]] == "roger", ]

my_tibble[
  my_tibble[["musician"]] %in% c("roger", "keith"), ]
```

Please note that I include the above predominantly to ensure that you have a strong understanding of the structure of data frame objects. In the real world, the above method tends to make our code very difficult to read, especially as our subsetting operations become more complex. We will soon use tidyverse methods for completing this in a way that is easier to read *and* write! 

As a final aside ...

::: mysecret
{{< fa screwdriver-wrench size=2x >}} [What's the deal with `%in%` and why do I need it?]{style="font-size: 1.25em; padding-left: 0.5em;"}

The use of `==` to subset a vector by a set of values is one of the biggest (and sometimes dangerous) mistakes that I see early R users make in their code. Let's take a moment to see why.

I will start by generating a vector of repeated fruits:

```{r}
my_vector <- 
  rep(
    c("apple", "banana", "grape"),
    2
  )

my_vector
```

Evaluating the values in this vector against a single value causes no issues:

```{r}
my_vector

my_vector == "apple"
```

... but watch what happens when you evaluate the values based on a set of values:

```{r}
my_vector

my_vector == c("apple", "banana")
```

Only the first two values evaluated to `TRUE`! Why??? This occurs because the values in the second vector are recycled and the logical test is evaluated by matching both the values and their positions (in order). In other words, the following tests were run:

1. `"apple" == "apple"`
1. `"banana" == "banana"`
1. `"grape" == "apple"`
1. `"apple" == "banana"`
1. `"banana" == "apple"`
1. `"grape" == "banana"`

As a further illustration, notice what happens if we switch the order of the values on the right:

```{r}
my_vector

my_vector == c("banana", "apple")
```

This problem can be overcome by using `==` in conjunction with the *or* logical operator (`|`):

```{r}
my_vector == "apple" | my_vector == "banana"
```

... but as our queries become more complex, this quickly leads to messy code. As such, I *always* recommend using base R function `%in%` when comparing between sets!

```{r}
my_vector

my_vector %in% c("apple", "banana")
```



:::

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Assignment (noun)**: A reference that R uses to call data from your computer’s memory (also called "name").
* **Assignment (verb)**: The act of associating a name with an object (typically to the global environment).
* **Atomic vector**: A one-dimensional homogenous data object.
* **Child**: An object whose name is stored as a reference in a parent object.
* **Class**: A blueprint that describes an object's structure.
* **Core tidyverse package** or **Core tidyverse**: Packages that are attached with `library(tidyverse)`.
* **Data frame**: A two-dimensional, and potentially heterogeneous data object (that is a restrictive type of list under-the-hood).
* **Data object**: Containers for values that structure references in an ordered, predictable way.
* **Double numeric vector**: An atomic numeric vector where the values are stored as decimal numbers (essentially).
* **Environment**: A dimensionless container that contains references (names) to data stored in memory.
* **Function**: A set of instructions used to complete a given task.
* **Global environment**: A collection of names assigned during an R session.
* **Infix function**: A function in which the name of the function is placed between the function's arguments.
* **Integer**: A whole number, or an atomic vector of data stored as whole numbers.
* **List**: A one dimensional, and potentially heterogeneous, data object.
* **List item**: A data object contained within a list.
* **Matrix**: A two-dimensional homogenous data object (that is an atomic vector under-the-hood).
* **Memory (RAM)**: A temporary storage location for instructions (functions) and data.
* **Name**: A reference that R uses to call data from your computer’s memory  (also called "assignment").
* **Observation**: A row within a data frame.
* **Order**: The position of values (or child objects) within a data object.
* **Package environment**: A collection of variable names associated with objects in a package.
* **Parent**: An object or environment that contains references to other objects.
* **Prefix function**: A function in which the name of the function precedes the target of the evaluation.
* **Primitive functions**: Functions written in C code and made available to use through the base R package.
* **Recursive object**: Objects that are made up of references to other objects (e.g., a list).
* **Structure**: The dimensionality and homogeneity of a data object (may also be used to describe the class of objects).
* **Tibble**: A type of data frame with great benefits!
* **Type**: How an object is stored in your computer.
* **Variable**: A column in a data frame.
:::

<button class="accordion">Functions</button>
::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *tibble* and *tidyverse* are loaded with `library(tidyverse)`.

::: function_table

```{r, message = FALSE, echo = FALSE}
library(tidyverse)

file.path(
  "function_tables",
  "functions_1.3_objects.csv"
) %>% 
  read_csv() %>% 
kableExtra::kable(
  align = c("c", "c", "l")
) %>%
kableExtra::kable_styling(
  font_size = 12,
  bootstrap_options = "hover")
```

:::
:::


<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>

