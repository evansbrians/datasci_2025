---
title: "1.4 Importing, exploring, and exporting data"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
library(tidyverse)

knitr::opts_chunk$set(echo = TRUE,
                      eval = TRUE,
                      error = TRUE)
```

<hr>

<div>
![](../../images/hex_complex.png){.intro_image}

In this lesson, we will cover the basics of interacting with files stored on your hard drive. While the content herein is very introductory, there are many elements that advanced users will find useful. Across this lesson, you will learn:

-   Formatting considerations for R scripts and code.
-   Why you should always work in a project.
-   How to read in data of different file types: *This section includes a fairly long video and written review of video content*.
-   Data exploration steps you should take whenever you read in a file.
-   How to write different kinds of files to your hard drive (and why you should do so sparingly).

*Note: Don't worry about my mention of the project video -- I have created your project for you for this class*.

[{{< fa exclamation-triangle size=2x >}} **Important!**]{style="color: red;"} This lesson assumes that you have completed the content in [Preliminary Lesson 1: R & RStudio](https://smbc.shinyapps.io/L0-intro_RStudio/#section-overview){target="_blank"} and [Preliminary Lessons 3.1-3.6](https://smbc.shinyapps.io/L2-rObjects/#section-overview){target="_blank"}. As the material covered herein will build on the content in those lessons, please do not proceed until completing those lessons.

I rely heavily on the *readr* package when reading in data. This is one of the **core tidyverse packages** -- recall that core tidyverse packages are those that are attached with `library(tidyverse)`.

*Note: We have provided two script files for you for this lesson. Please see [scripts/lesson_1.4.R]{class=".mono"} and [scripts/reading_data.R]{class=".mono"}.*

</div>

## Data for this lesson

Please click on the following button to explore the real datasets we will use in this lesson:

<button class="accordion">Metadata</button>

::: panel

**Global populations and CO~2~ emissions: API_EN.ATM.CO2E...csv**: These data were compiled by the [World Bank DataBank](https://databank.worldbank.org/home.aspx) and provides information on the emissions of greenhouse gases and the populations of countries around the world. Neither the tabular data nor the name of the file were modified from the original version.

**Iris: iris.csv and iris.rds**: This is Edgar Anderson's famous data set that provides the measurements of flowers of three species of iris, *Iris setosa*, *I. versicolor*, and *I. virginica*. See `?iris` for more information (or the original paper at [this link](https://www.jstor.org/stable/2394164)!).

**My Covid garden: my_covid_garden.rds, my_covid_garden.csv, and my_covid_garden.xlsx**: This is a tabular data set (in different formats) that describes a pretty unsuccessful raised bed garden at my home in Takoma Park, Maryland.

**Portal rodents: portal.csv and portal.xlsx**. These data sets provide measurements taken in a long term study (the Portal project) on rodent traits in Portal, Arizona. The provided data were collected in a fixed grid established in 1977 and include when an individual was measured, where the measurement occurred, the sex and species of the individual, and their hindfoot length. You can read more about this study and the data they collected at [this link](https://portal.weecology.org/). I intentionally made the data a good bit messier than the original version.

:::

## Reading data

The process of reading data describes making outside data (e.g., online data or data on your hard drive) available to your current R session. Please watch and code along with the video below. I review some key concepts that I hope you gathered from our previous lessons and break new ground with a description of the process of reading data into R.

Note: Some videos in this course were recorded a long time ago! The way I format my code has changed a *lot* since then. You will learn about the formatting rules we use for this course in Lesson 1.6: Course style guide introduction and Lesson 2.5: Course style guide.

{{< video https://www.youtube.com/embed/S9sySXd3VYc?si=Fc1FACb57ceIHxXQ >}}

## Setting up your session

An R Studio **session** represents the time spent and operations conducted since opening R (*Note: sessions may be saved and loaded to avoid lost work*). At the beginning of each session, I like to do a series of housekeeping steps. Please do the following before continuing:

1. Open your RStudio project (*Note: Always work from inside of a project!*).

1. If there are any script files open in your source pane. Close them. *Note: If any of your script titles are blue, you might want to save them prior to closing!*

1. In the *Environment* tab of your **workspace pane**, ensure that your **Global Environment** is empty. If it is not, click the *broom* to remove all objects.

1. In the *History* tab of your **workspace pane**, ensure that your history is empty. If it is not, click the *broom* to remove your history.

By completing the steps above, your current session will be dedicated, in its entirety, to the task at hand. That really helps organize your workflow during a given session.

### Review: Why work in a project?

We will do all of our reading, exploring, and writing data from inside of an RStudio project. Projects have many benefits -- probably the largest of them is that all paths to data and code are supplied relative to your project folder.

For example, I am working in a project called `data_sci`. The path to my `data_sci` folder (the parent folder of my project) is:

```         
/Volumes/ssd980/gits/datasci_2023/data_sci
```

This project contains a subfolder called `data` and in that folder is a subfolder called `raw`. The full path to the folder `raw` is therefore:

```         
/Volumes/ssd980/gits/datasci_2023/data_sci/data/raw
```

*Note: The folder `data` may also be considered a "child" of its parent folder, `data_sci`. Likewise, the folder `raw` is a child of its parent folder, `data`.*

The `raw` data folder contains a *.csv* file called `my_covid_garden.csv`. The full path to this file is:

```         
/Volumes/ssd980/gits/datasci_2023/data_sci/data/raw/my_covid_garden.csv
```

Reading data with a full file path is super cumbersome (**Do not run!**):

```{r, eval = FALSE}
read_csv("/Volumes/ssd980/gits/datasci_2023/data_sci/data/raw/my_covid_garden.csv")
```

The above has two problems:

-   If we share our code with others or change our folder structure, the file path will need to be modified
-   That is a lot of writing for each file that we read in!

When we work within a project, the folder that contains the *.Rproj* file is the working directory for the project. The path to our files within the working directory is written as a **relative file path**. A relative file path is the path to a file *relative* to the working directory. Given that my working directory is the folder `data_sci`, the reading operation above would be written as:

```{r, eval = FALSE}
read_csv("data/raw/my_covid_garden.csv")
```

In Base R, we can set our working directory using the function `setwd()`. Before RStudio came along, this function was on the top of most of our scripts. It might have looked something like (**Do not run!**):

```{r, eval = FALSE}
# My code for the tutorial: reading, exploring, and writing data

# setup --------------------------------------------------------

library(tidyverse)

# Set working directory:

setwd("/Volumes/ssd980/gits/datasci_2023/data_sci")

# Read in data:

read_csv("data/raw/my_covid_garden.csv")
```

This certainly helps reduce the amount of writing required to read in files. However ...

::: mysecret
<i class="fas fa-user-secret" style="font-size:36px"></i>  [Never use `setwd()`!]{style="font-size: 20px"}

Using `setwd()` in your code is dangerous because shared code will never work out-of-the-box. You will have to communicate to others (and your future self) to modify their working directory to match the location on their file systems. Conversely, if you share a **project** with your collaborators, everything will already be in place for them to execute the code.

Even more importantly, you might change your mind about where you want to put your code or files. If you move your files to a new location, your code will no longer run until you modify the path within the `setwd` function. Your code will be "broken". When you use projects, you can move your project anywhere you want in your file system and R will still be able to find your files.
:::

### Review: Read csv files

Tabular data are most often stored as a **csv file** -- "csv" stands for "comma separated values". Data with this format are stored as a plain text file where commas separate values, and each record (e.g., row in a data frame) is placed on a new line. This is a robust format because it does not contain hidden encoding that can sometimes lead to problems (see Excel, below).

It is best to read in *.csv* files with the *readr* function `read_csv()` (*Note: Remember that the readr package a part of the core tidyverse!*). If we are working in a project, we supply the relative file path inside of parentheses. Let's read in the file `my_covid_garden.csv` from the folder `data/raw` and assign the object to the name `my_garden`. 

```{r}
my_garden <-
  read_csv("data/raw/my_covid_garden.csv")
```

Notice that the above printed information about how R read in the data (i.e., conversion of raw data to a tibble). You should always read this information, as it may provide clues to potential problems!

When tabular data are read in using `read_csv()`, the data are arranged into a tibble data frame:

```{r}
my_garden
```


Conversely, when data are read in using the base R function `read.csv()`, no additional information is printed and the data are arranged into a standard data frame (*Note: I have chosen to save space by hiding the output from the below, but please run this on your own!*):

```{r, results = "hide"}
my_garden_df <-
  read.csv("data/raw/my_covid_garden.csv")
```

::: mysecret
<i class="fas fa-user-secret" style="font-size:36px"></i>   [Do not use `read.csv()`!]{style="font-size: 20px"}

Whenever you use `read.csv()`, additional exploration steps are necessary to search for errors in your data (see Data exploration, below). It is best to be avoided.
:::

#### Sometimes reading a csv file is not as easy as it should be ...

While encoding is not a problem with *.csv* files, there are often issues with the data that mess up the reading process. For example, the table below represents raw data that I obtained from the World Bank website:

```{r}
read_csv("data/raw/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_2764620.csv")
```

Here, we can see that a weird column name was added to the data -- a missing column name was replaced with the unhelpful column name `...3`. Looking at the data in the tibble above, we can see the source of the problem. It seems that the character values associated with *what should have been the column names* were printed on the second row of the data frame. This suggests that the top rows of the tabular data contained information that should not be a part of the data frame.

Additional arguments can be passed to `read_csv()` to address this problem (and others; see `?read_csv`):

```{r}
read_csv(
  "data/raw/API_EN.ATM.CO2E.PC_DS2_en_csv_v2_2764620.csv", 
  skip = 4, 
  skip_empty_rows = FALSE
)
```

::: mysecret
<i class="fas fa-user-secret" style="font-size:36px"></i>   [Read the help files!]{style="font-size: 20px"}

Whenever you use a function for the first time, or use a function to address a new application, it is a best practice to read the help file for that function (e.g., `?read_lines`). Because functions may change over time, it is also worthwhile to revisit their help files on occasion.
:::

### Review: Read RDS files

An **RDS file** is the most straightforward file type to read in data (but see the caveat associated with these files in "Writing data", below). RDS files are data sets that are written in, and written for, program R.

We can read in an RDS file with the function `read_rds()`. Let's read in the file `my_covid_garden.rds`:

```{r}
read_rds("data/raw/my_covid_garden.rds")
```

Notice that the first column, `bed`, is an integer and `light_access` and `species` were read in as factors. An RDS file reads in the data with the class and type in which they were written.

### Review: Read Excel files

Excel files can be challenging to read into R but luckily the package `readxl` has made the process fairly straightforward 

*Note: readxl is a tidyverse package, but not a member of the core tidyverse. Therefore, we must either load the package in our current R session with `library(readxl)` or directly call functions from the package using `readxl::`. Directly calling functions from this package is often preferable, since we only need to read in a given file once.*

Each table in an Excel file is typically stored within worksheets (the tabs on the bottom of the Excel window). Before we read in an Excel file, we should check how many worksheets are present. To do so, we use the function `readxl::excel_sheets()`:

```{r}
readxl::excel_sheets("data/raw/my_covid_garden.xlsx")
```

The above returned an atomic character vector with two values, where each value represents the name of a worksheet in the file `my_covid_garden.xlsx`.

By default, the function `readxl::read_excel()` will read in *only* the first worksheet in the file (and return a tibble data frame):

```{r}
readxl::read_excel("data/raw/my_covid_garden.xlsx")
```

If we would like to read in a different worksheet, we can supply the argument `sheet = [name of sheet]` (Note: See `?readxl::read_excel`):

```{r}
readxl::read_excel(
  "data/raw/my_covid_garden.xlsx",
  sheet = "garden_life"
)
```

In the above, we notice that there are quite a few bad column names and what are most likely the correct column names are printed on the second line of data. We can add a `skip = [number of rows]` argument to skip the first two rows of data:

```{r}
readxl::read_excel(
  "data/raw/my_covid_garden.xlsx", 
  sheet = "garden_life",
  skip = 2
)
```

::: mysecret
{{< fa user-secret size=2x >}}  [Avoid opening an Excel file in Excel!]{style="font-size: 20px"}

When working in R, it is *super* important to avoid the temptation to peak at an Excel file in Microsoft Excel. That is because, if a file is saved, Excel can change the encoding of values. When working with dates, this can lead to huge issues!
:::

## Data exploration

Whenever we read in data, it is crucial to take the time to explore its class, structure, composition, and the distribution of values.

### Data structure

If we read in a non-tibble data frame, we should be sure to explore the structure with `str()`:

```{r}
str(my_garden_df)
```

In the above, we see the number of observations (rows) and number of variables (columns). We are also given information on the name and class of each column and the first few values in each.

In a tibble data frame, structural information is printed by default:

```{r}
my_garden
```

Despite this handy printing of the tibble, we often need to use the number of rows or columns in a data frame programmatically.

We can determine the number of rows with `nrow()`:

```{r}
nrow(my_garden)
```

... and determine the number of columns with `ncol()`:

```{r}
ncol(my_garden)
```

We can return the number of rows and columns at the same time using the function `dim()`:

```{r}
dim(my_garden)
```

This returned an integer vector of dimensions in the rows (the first number) and columns (the second number).

::: mysecret
{{< fa screwdriver-wrench size=2x >}} [What is the *length* of a data frame?]{style="font-size: 1.25em; padding-left: 0.5em;"}

Recall that the "length" of an atomic vector describes the number of values in that vector and can be determined with `length()` (a primitive function):

```{r}
length(
  c(0, 1, 1, 2)
)
```

The length of a list, however, is the number of list items -- it is *not* the number of values:

```{r}
length(
  list(
    nerdy = "hello world",
    southern = "boy howdy",
    fibo_numbers = c(0, 1, 1, 2)
  )
)
```

The above list contains three list items (two one-value character vectors and a numeric vector with four values) -- thus `length()` returned the value `3`. *If the reason for this is not yet clear, content in **Lesson 1.5: Assignments** will help!*

Because a data frame *is* a list, and each column represents a list item, the `length()` of a data frame is the number of columns:

```{r}
length(my_garden)
```
:::

### Heads and tails

The dplyr package, part of the tidyverse core, contains a set of functions that start with the prefix `slice_` that allows you to print a subset of the data (see `?slice`).

We can print the top row of a data frame using the function `slice_head()`:

```{r}
slice_head(my_garden)
```

... or print the bottom row of a data frame using the function `slice_tail()`:

```{r}
slice_tail(my_garden)
```

With the argument `n = [number of rows]`, we can subset to the number of rows of our choosing. For example, to subset the data to just the first two rows of the data frame, we can use:

```{r}
slice_head(
  my_garden, 
  n = 2
)
```

... or the last two rows of the data frame:

```
slice_tail(
  my_garden, 
  n = 2
)

```

### Ordering

Ordering a data frame is a great way to explore the values therein and look for potential problems.

We can order an entire table by a variable's value using `arrange()`:

```{r}
arrange(my_garden, bed)
```

This arranged the rows of the table by the values in the column `bed`. If we want to order the data frame from the largest to smallest values in a variable, we nest the function `desc()` inside of `arrange()`:

```{r}
arrange(
  my_garden, 
  desc(bed)
)
```

### Characters & factors

It is often necessary to know the unique values present in a set of characters or factors.

We can subset a vector to its unique values using, appropriately, the function `unique()`:

```{r}
unique(my_garden$light_access)
```

*Note: The above works with any type of vector and the class of the output is equivalent to the original vector.*

If the column is a factor, this information can also be extracted using the function `levels()`:

```{r}
levels(
  factor(my_garden$light_access)
)
```

If we want to see the number of records associated with a unique character or factor value, we can use the function `table()`:

```{r}
table(my_garden$light_access)
```

In the above, we are given a *very* handy printout of the distribution of the data!

### Statistical summaries

When reading in data, it is often useful to look at the summary statistics for the dataset. This can help you find any errors (e.g., potential outliers or NA values). To do so, a good place to start is the function `summary()`:

```{r}
summary(my_garden)
```

*Note: Notice that the printed summary information for character values is not particularly useful!*

You can also look at summary statistics individually. This can be especially useful programmatically. I will not bore you with a lot of text to describe each one, but here"s a few to try on your own (*see* `?[function_name]` *if you have any questions about what each does!*):

```{r, eval = FALSE}
min(my_garden$date)

max(my_garden$date)

mean(my_garden$date)

median(my_garden$date)

var(my_garden$date)

sd(my_garden$date)
```

::: mysecret
{{< fa user-secret size=2x >}}  [For God's sake, **do not** use `view()`!]{style="font-size: 20px"}

There is one early exploration step that is commonly used that I *do not recommend* ... the function `view()`. This function allows you to view your data as though it were a spreadsheet. Here is how it is applied, though it can also be run by clicking on and object name in the environment tab of your workspace pane (I have not run it here, but you *may* run it on your own).

```{r, eval = FALSE}
view(my_garden)
```

No matter how much I warn against this, you are going to use this function anyways and when I see you do it during our help sessions I will invariably complain -- I might even emit a high-pitched whiny squeal. The student response to my whining is usually something like "... but I like to see my data."

You get very little information by looking directly at the data. There is no indication of column classes, no indication of the number of rows (without scrolling), it is nearly impossible to spot bad character or factor values, and there is little opportunity to explore numeric values (other than ordering). When the data get large, any utility of this tool quickly falls away. It is better to get in the practice of properly exploring the data. 
:::

## Writing data

Our final topic of this section is how to write data to a file. This is quite straightforward, so this section will (actually) be brief for once. To reduce clutter in your data folder, we will remove each file after writing.

### Atomic vectors

There are two preferred ways to write an atomic vector to a file: as a *.txt* file or as an *.RDS* file.

If you intend to share your vector outside of program R, saving the vector as a text file is a great way to do it. To do so, use the `write_lines` function. The first argument of the function is the data to write and the second argument is the relative file path:

```{r}
write_lines(
  unique(my_garden$light_access),
  file = "data/raw/temp.txt"
)
```

We can use the `list.files()` function to see if the file was written:

```{r}
list.files(
  "data/raw", 
  pattern = "txt"
)
```

... and *really* check to see if it worked by reading the data back in:

```{r}
read_lines("data/raw/temp.txt")
```

We will remove this file with `file.remove()`:

```{r}
file.remove("data/raw/temp.txt")
```

... and check to see if we successfully removed the file:

```{r}
list.files(
  "data/raw", 
  pattern = "txt"
)
```

If you do not intend to use or share the data outside of R, your best bet is to save the data as an *.RDS* file. For this, we use the function `write_rds()`. Again, the first argument of the function is the data to write and the second argument is the relative file path:

```{r}
# Write light access to file:

write_rds(
  factor(my_garden$light_access),
  file = "data/raw/temp.rds"
)

# Did it work?

read_rds("data/raw/temp.rds")

# Yup, remove it!

file.remove("data/raw/temp.rds")

list.files(
  "data/raw", 
  pattern = "rds"
)
```

::: mysecret
<i class="fas fa-user-secret" style="font-size:36px"></i>   [When should I write a file as an RDS?]{style="font-size: 20px"}

Reading and writing *.RDS* files is super straightforward in R. As stated previously, you maintain all of the attributes of the data and, frankly, little thought has to be given about the structure of the object. If you are happy with its current structure, you are good to go. That being said, **do not** write the file as an *.RDS* if:

-   You intend to share the file with a non-R-user
-   You plan to work with the file outside of R (hopefully that will never be the case!)
-   The file is too big to fit in your memory (in such cases, R only maintains a pointer to a temporary file stored on your hard drive)
:::

### Lists

The **only** way that I save list-class objects is as an *.RDS* file! Let's make a list:

```{r}
my_list <-
  list(
    light_access = factor(my_garden$light_access),
    my_garden = my_garden
  )
```

... save it as an *.RDS* file:

```{r}
write_rds(
  my_list, 
  "data/raw/temp.rds"
)
```

... check to see if it worked:

```{r}
read_rds("data/raw/temp.rds")
```

... and remove the file:

```{r}
file.remove("data/raw/temp.rds")
```

I should note that you can use R to write a list as an Excel file (each list item is written to a separate worksheet). I do not recommend doing so, but the package `xlsx` has tools to accomplish this inadvisable task!

### Data frames

The last kind of data we will write is a tibble. There are three options for doing so:

-   `write.csv`: Base R version (**do not use!**)
-   `write_csv`: readr version (**use this!**)
-   `write_rds`: As above, handy if you do not intend to share the file with a non-R-user!

Let's start with `write.csv()`. Again, we supply the dataset and a path to the file:

```{r}
write.csv(
  my_garden, 
  file = "data/raw/temp.csv"
)
```

... Let's see what the above returned:

```{r}
read_csv("data/raw/temp.csv")
```

We can see that this returned an additional column with (rarely useful) row numbers! 

Let's delete the file from our hard drive:

```{r}
file.remove("data/raw/temp.csv")
```

::: mysecret
<i class="fas fa-user-secret" style="font-size:36px"></i>   [Do not use `write.csv()`!]{style="font-size: 20px"}

Avoid writing files with `write.csv()` ... row numbers are rarely useful and there is a better way ...
:::

Use the *readr* function `write_csv()`!

```{r}
write_csv(
  my_garden, 
  file = "data/raw/temp.csv"
)
```

Let's see what the above returned:

```{r}
read_csv("data/raw/temp.csv")
```

It's great! Let's delete the file:

```{r}
file.remove("data/raw/temp.csv")
```

As above, we could have also written the file using `write_rds()` (but see caveats, above):

```{r}
# Write as an rds file:

write_rds(
  my_garden, 
  "data/raw/temp.rds"
)

# Check to see if it worked:

read_rds("data/raw/temp.rds")

# Remove the file:

file.remove("data/raw/temp.rds")
```

::: mysecret
<i class="fas fa-user-secret" style="font-size:36px"></i>   [When should you write a file?]{style="font-size: 20px"}

It is important to consider when a file should be written to your hard drive. Despite the number of files we will use in this course, I write files very rarely. Instead, once I get a raw data file, I generate a script for pre-processing the data and various wrangling steps. Rather than save the processed data, I save and run the script that executes the data processing. The only exception to this is when I work with *very* large files -- files for which the pre-processing script takes a long time to execute (\> 30 seconds or so). Using this method helps avoid storing multiple versions of the same file and thus improves your organization and workflow.
:::

## Reference

<button class="accordion">Glossary of terms (I am a button ... click me!)</button>
::: panel

::: glossary_table
```{r, message = FALSE, echo = FALSE}
library(tidyverse)

source("glossary_source.R")

get_glossary_table_lesson(
  module = 1, 
  lesson = "1.4_importing_exploring_exporting.qmd"
) %>% 
  kableExtra::kable(
    align = c("c", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```
:::
:::

<button class="accordion">Functions</button>
::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *dplyr* and *readr* are loaded with `library(tidyverse)`.

::: function_table

```{r, message = FALSE, echo = FALSE}
library(tidyverse)

file.path(
  "function_tables",
  "functions_1.4_importing_exploring_exporting.csv"
) %>% 
  read_csv() %>% 
kableExtra::kable(
  align = c("c", "c", "l")
) %>%
kableExtra::kable_styling(
  font_size = 12,
  bootstrap_options = "hover")
```

:::
:::

<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
:::
:::

<button class="accordion">R Studio panes</button>
::: panel

Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:

<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>

*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>

