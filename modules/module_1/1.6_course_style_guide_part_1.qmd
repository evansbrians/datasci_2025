---
title: "1.6 Course style guide"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
library(tidyverse)

knitr::opts_chunk$set(echo = TRUE,
                      eval = FALSE)
```

<hr>

<div>

![](../../images/hex_complex.png){.intro_image}

This document represents a style guide for the script files in our course and is intended to help you develop a consistent syntax for creating communicable, readable code. Well-formatted code is not just an end product though -- recommendations in this document will help you explore and debug your code *as you write it*. Moreover, a portion of your grade will be based on adhering to this style guide (up to 10% per problem set)!

Style guides, such as this one, are common across many computer languages and organizations. Although "style" represents a preference (i.e., it does not influence code output), using a style guide does make collaboration easier! Herein, I borrow heavily from the [tidyverse style guide](https://style.tidyverse.org/){target="_blank"}, from which most of the formatting rules below were derived. I include only elements from the tidyverse style guide that are relevant to the content in this course and have included additional or modified elements that, in my opinion, provide added utility or enhanced code readability.

This lesson provides the code formatting rules that we will follow in this course. I suggest returning to this *often* and comparing your problem set answers with this guide prior to submission. I provide a description of the code formatting rules, examples of each, and any exceptions to the rules. Recommendations that vary between this document and the tidyverse style guide are annotated with a superscript † symbol and are described, on a case-by-case basis.

*Note: I have often gotten the question of whether my own code uses our course style guide -- it does not. My personal style guide is much more strict! The course style guide is greatly simplified to make it easy to adhere to.*

</div>

## Style guide

### Horizontal spacing

:::{style="margin-bottom:-2em;"}

-   **Infix functions** (e.g., `%in%`, `+`, `<-`, `=`) should be separated from surrounding code with a single leading and trailing space.

    ::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    country<-c("boy", "howdy")
    
    nerdy <-c("hello", "world")
    
    formal<- c("warm", "wishes")
    
    my_list <- 
      list(
        country="boy howdy", 
        nerdy ="hello world", 
        formal= "warm wishes"
      )
    
    1/2
    1+ 2
    1 ==2
    
    c(11, 23, 32)%>%
      mean()
    ```
    
    [Good:]{.good}
    
    ```{r}
    country <- c("boy", "howdy")
    
    nerdy <- c("hello", "world")
    
    formal <- c("warm", "wishes")
    
    my_list <- 
      list(
        country = "boy howdy", 
        nerdy = "hello world", 
        formal = "warm wishes")
    
    1 / 2
    1 + 2
    1 == 2
    
    c(11, 23, 32) %>%
      mean()
    ```
    :::
    
    :::
    
    -   **Exception**: The extraction (`$`) and colon (`:`, `::`) infix operators should not be preceded or followed by a space.

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Exception</button>
        ::: panel
        [Bad:]{.bad}
        
        ```{r}
        my_list$ nerdy
        
        my_list $nerdy
        
        readr ::read_csv
        
        readr:: read_csv
        
        1 :4
        
        1: 4
        ```
        
        [Good:]{.good}
        
        ```{r}
        my_list$nerdy
        
        readr::read_csv
        
        1:4
        ```
        :::
        
        ::::

:::

:::{style="margin-bottom:-2em;"}

-   **Prefix** **functions** (e.g., `c()`, `tibble()`) should not be followed by a space.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    c ("boy", "howdy")
    
    ! TRUE
    ```
    
    [Good:]{.good}
    
    ```{r}
    c("boy", "howdy")
    
    !TRUE
    ```
    :::
    ::::
    
    -   **Exception**: Include a trailing space after `~` if it is used as a prefix function.

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Exceptions</button>
        ::: panel
        
        [Bad:]{.bad}
        
        ```{r}
        tribble(
          ~x, ~y,
          11,  2,
           3,  5
        )
        ```
        
        [Good:]{.good}
        
        ```{r}
        tribble(
          ~ x, ~ y,
           11,   2,
            3,   5
        )
        ```
        :::
        ::::
        
:::

:::{style="margin-bottom:-2em;"}

-   **Parentheses** (...)†: 

    -   Opening and closing parentheses should not be preceded by a space.

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Example</button>
        ::: panel
        [Bad:]{.bad}
    
        ```{r}
        c ("boy", "howdy")
    
        c("boy", "howdy" )
        ```
    
        [Good:]{.good}
    
        ```{r}
        c("boy", "howdy")
        ```
        :::
        ::::

    -   If the opening parentheses and function arguments are on the same line, the opening parentheses should not be followed by a space.

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Example</button>
        ::: panel
        [Bad:]{.bad}
    
        ```{r}
        c( "boy", "howdy")
        ```
    
        [Good:]{.good}
    
        ```{r}
        c("boy", "howdy")
        ```
        :::
        ::::

    -   If the opening parentheses and the first argument of a function are on different lines, the first argument should be indented two spaces (one tab stop) relative to the start of the line above.

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Example</button>
        ::: panel
        [Bad:]{.bad}
    
        ```{r}
        c(
        "boy", 
        "howdy"
        )
        ```
    
        [Good:]{.good}
    
        ```{r}
        c(
          "boy", 
          "howdy"
        )
        ```
        :::
        ::::
        
:::

:::{style="margin-bottom:-2em;"}

-   **Square brackets** (subsetting `[...]` and extraction `[[...]]` operators) Should not be preceded or followed by a space.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    my_list [[1]]
    
    my_list[ 1]
    ```
    
    [Good:]{.good}
    
    ```{r}
    my_list[[1]]
    
    my_list[1]
    ```
    :::
    ::::

    -   **Exception**: When subsetting or extracting a multi-dimensional object inside of square brackets (e.g., `df[1, ]`), include a single space for rows or columns in which all data are returned.

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Exception</button>
        ::: panel
        
        [Bad:]{.bad}
        
        ```{r}
        sayings[, -1]
        
        sayings[1,]
        ```
        
        [Good:]{.good}
        
        ```{r}
        sayings[ , 1]
        
        sayings[1, ]
        ```
        :::
        ::::
        
:::

:::{style="margin-bottom:-2em;"}

-   **Nested functions** should be indented *two* spaces (one tab stop) relative to the parent function.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    mean(
    c(11, 23, 32)
    )
    
    mean(
        c(11, 23, 32)
    )
    ```
    
    [Good:]{.good}
    
    ```{r}
    mean(
      c(11, 23, 32)
    )
    ```
    :::
    ::::
    
:::

:::{style="margin-bottom:-2em;"}

-   **Pipe operators** (%\>%): The line following the first pipe in a piped code block should be indented two spaces (one tab stop) relative to the line above.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}

    ```{r}
    c(11, 23, 32) %>%
    as.integer() %>% 
    typeof()

    c(11, 23, 32) %>%
    as.integer() %>% 
      typeof()
    ```

    [Good:]{.good}

    ```{r}
    c(11, 23, 32) %>%
      as.integer() %>% 
      typeof()
    ```
    :::
    ::::
    
:::

:::{style="margin-bottom:0em;"}

-   **Comments**: Add a single space between the hashtag (#) and comment.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    #my section header --------------------------------------------
    
    #My atomic vector:
    
    c(1, 2)
    ```
    
    [Good:]{.good}
    
    ```{r}
    # my section header -------------------------------------------
    
    # My atomic vector:
    
    c(1, 2)
    ```
    :::
    ::::
    
:::

### Vertical spacing

:::{style="margin-bottom:-2em;"}

-   **Code blocks**: Maintain *one* blank line between code blocks^†^.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    c(1, 2)
    list(1, 2)
    ```
    
    [Good:]{.good}
    
    ```{r}
    c(1, 2)
    
    list(1, 2)
    ```
    :::
    ::::
        
:::

:::{style="margin-bottom:-2em;"}

-   **Comments**: Maintain *one* blank line between code blocks and comments^†^.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    # my section header -------------------------------------------
    # My atomic vector:
    c(1, 2)
    ```
    
    [Good:]{.good}
    
    ```{r}
    # my section header -------------------------------------------
    
    # My atomic vector:
    
    c(1, 2)
    ```
    :::
    ::::
    
:::

:::{style="margin-bottom:-2em;"}

-   **Code and comments** should not be on the same line.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    rm(sayings) # Remove object from the global environment
    ```
    
    [Good:]{.good}
    
    ```{r}
    # Remove object from the global environment:
    
    rm(sayings) 
    ```
    :::
    ::::
    
:::

### Line breaks

:::{style="margin-bottom:-2em;"}

-   **Code and comments** should not exceed 80 characters in width (if it is avoidable) -- add a line break, if possible.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    brood_x_cicadas <- c("Magicicada cassini", "Magicicada septendecim", "Magicicada septendecula")
    ```
    
    [Good:]{.good}
    
    ```{r}
    brood_x_cicadas <- 
      c(
        "Magicicada cassini",
        "Magicicada septendecim", 
        "Magicicada septendecula"
      )
    ```
    :::
    ::::
    
:::

:::{style="margin-bottom:-2em;"}

-   **Prefix functions**: Include no more than *one* prefix function per line of code^†^.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    typeof(as.numeric(1:4))
    ```
    
    [Good:]{.good}
    
    ```{r}
    typeof(
      as.numeric(1:4)
    )
    ```
    :::
    ::::
    
    -   **Exception**: Prefix operators, infix operators, and functions used to calculate summary statistics of a data object (e.g., `mean()`, `n()`, and `length()`).

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Exceptions</button>
        ::: panel
        
        ```{r}
        select(!howdy)
        
        sum(boy$howdy)
        
        summarize(n = n())
        ```
        :::
        ::::
        
:::

:::{style="margin-bottom:-2em;"}

-   **Arguments in a function**: 

    :::{style="margin-bottom:-2em;"}

    -   If you provide three or more arguments to a function, place each argument on its own line^†^.

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Example</button>
        ::: panel
        [Bad:]{.bad}
    
        ```{r}
        c("roger", "pete", "john", "keith")
        ```
    
        [Good:]{.good}
    
        ```{r}
        c(
          "roger",
          "pete",
          "john",
          "keith"
        )
        ```
        :::
        ::::
        
        -   **Exception**: When using the `c()` or `list()` functions, you may include up to **five numeric** values.

            :::: indent_code_bb
            <button class="accordion" style="margin-bottom:1em;">Exceptions</button>
            ::: panel
        
            ```{r}
            c(1, 1, 2, 3, 5)
            ```
            :::
            ::::
            
    :::
        
:::

:::{style="margin-bottom:-2em;"}

-   **Parentheses for functions that span more than one line**:

    -   Opening parentheses should be followed by a line break.

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Example</button>
        ::: panel
        [Bad:]{.bad}
    
        ```{r}
        tribble(~ x, ~ y,
                11, 2,
                3,  5
        )
        ```
    
        [Good:]{.good}
    
        ```{r}
        tribble(
          ~ x, ~ y,
          11, 2,
          3,  5
        )
        ```
        :::
        ::::

    -   Closing parentheses should be placed on their own line and indented to the same level as the start of the function.

        :::: indent_code_bb
        <button class="accordion" style="margin-bottom:1em;">Example</button>
        ::: panel
        [Bad:]{.bad}
    
        ```{r}
        mean(
          c(1, 1))
    
        tribble(
          ~ x, ~ y,
          11, 2,
          3,  5
          )
        ```
    
        [Good:]{.good}
    
        ```{r}
        mean(
          c(1, 1)
        )
    
        tribble(
          ~ x, ~ y,
          11, 2,
          3,  5
        )
        ```
        :::
        ::::
        
:::

:::{style="margin-bottom:-2em;"}

-   **Assignment**: If a code block spans more than one line of code, add a new line after the assignment operator ^†^.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    my_list <- list(
      country = "boy howdy", 
      nerdy = "hello world", 
      formal = "warm wishes"
    )
    ```
    
    [Good:]{.good}
    
    ```{r}
    my_list <- 
      list(
        country = "boy howdy", 
        nerdy = "hello world", 
        formal = "warm wishes"
      )
    ```
    :::
    ::::
    
:::

:::{style="margin-bottom:0em;"}

-   **Pipe operators** (`%>%` or `%>%`): Code that follows a pipe operator should be placed on a new line^†^.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    list(1, 2) %>% str()
    ```
    
    [Good:]{.good}
    
    ```{r}
    list(1, 2) %>%
      str()
    ```
    :::
    ::::
    
:::

### Assignment

:::{style="margin-bottom:-2em;"}

-   **Global assignment**: Always use the `<-` operator for global assignment.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    my_vector = c(1, 2)
    ```
    
    [Good:]{.good}
    
    ```{r}
    my_vector <- c(1, 2)
    ```
    :::
    ::::
    
:::

:::{style="margin-bottom:0em;"}

-   **Assigned names**: Should be written in snake_case.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    my.phrases
    
    boyHowdy
    
    HelloWorld
    ```
    
    [Good:]{.good}
    
    ```{r}
    my_phrases
    
    boy_howdy
    
    hello_world
    ```
    :::
    ::::
    
:::

### Functions

:::{style="margin-bottom:-2em;"}

-   **Logicals**: Spell out `TRUE` and `FALSE` in a function's argument.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    mean(
      c(1, NA, 3), 
      na.rm = T
    )
    ```
    
    [Good:]{.good}
    
    ```{r}
    mean(
      c(1, NA, 3), 
      na.rm = TRUE
    )
    ```
    :::
    ::::
    
:::

:::{style="margin-bottom:0em;"}

-   **Named functions**: Always provide parentheses when running named/non-operator prefix functions.

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    ls
    
    search
    ```
    
    [Good:]{.good}
    
    ```{r}
    ls()
    
    search()
    ```
    :::
    ::::
    
:::

### Other

:::{style="margin-bottom:-2em;"}

-   **Single quotes**: Avoid using single quotes when referring to character values -- only use them when necessary (see **Preliminary lesson 2: Values**).

    :::: indent_code_bb
    <button class="accordion" style="margin-bottom:1em;">Example</button>
    ::: panel
    [Bad:]{.bad}
    
    ```{r}
    c('boy', 'howdy')
    ```
    
    [Good:]{.good}
    
    ```{r}
    c("boy", "howdy")
    ```
    :::
    ::::
    
:::

```{=html}
<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>
```
