---
title: "1.6 Course style guide"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
library(tidyverse)

knitr::opts_chunk$set(echo = TRUE,
                      eval = FALSE)
```

<hr>

<div>

![](../../images/hex_complex.png){.intro_image}

This document represents a style guide for the script files in our course and is intended to help you develop a consistent syntax for creating communicable, readable code. Well-formatted code is not just an end product though -- recommendations in this document will help you explore and debug your code *as you write it*. Moreover, a portion of your grade will be based on adhering to this style guide (up to 10% per problem set)!

Style guides, such as this one, are common across many computer languages and organizations. Although "style" represents a preference (i.e., it does not influence code output), using a style guide does make collaboration easier! Herein, I borrow heavily from the [tidyverse style guide](https://style.tidyverse.org/){target="_blank"}, from which most of the formatting rules below were derived. I include only elements from the tidyverse style guide that are relevant to the content in this course and have included additional or modified elements that, in my opinion, provide added utility or enhanced code readability.

This lesson is divided into the following sections:

- **Style guide, in brief**: This section provides the code formatting rules that we will follow in this course. I suggest returning to this *often* and comparing your problem set answers with this guide prior to submission.

- **Style guide, in-depth**: I provide a description of the code formatting rules, why they are helpful, and examples of each. Recommendations that vary between this document and the tidyverse style guide are annotated with a superscript † symbol and are described, on a case-by-case basis.

*Note: I have often gotten the question of whether my own code uses our course style guide -- it does not. My personal style guide is much more strict! The course style guide is greatly simplified to make it easy to adhere to.*

</div>

## Style guide, in brief

### Horizontal spacing

- **Commas** should be followed by *one* trailing space, but *not* a leading space. *Exception*: More than one space *can* be added after a comma if it improves the alignment within a code block.
- **Infix functions** should be separated from surrounding code with a *single* leading and trailing space. *Exceptions:*
  - The extraction (`$`) and colon (`:`, `::`) infix operators should *not* be preceded or followed by a space.
  - You can add more than one space before the `=` operator if it improves code block alignment.
- **Prefix functions**: Should *not* be preceded or followed by a space. *Exception*: *Do* include a trailing space if `~` is followed by function.
- **Parentheses and brackets**: Parentheses (`(...)`)^†^, curly braces `{...}`, and square bracket (extraction: `[]`, `[[]]`) operators should *not* be preceded or followed by a space.
- **Comments**: Add a *single* space between the hashtag (`#`) and comment.
- **Indentation**: Piped and nested code should be indented *two* spaces (one tab stop) relative to the parent object in a chained analysis.

### Vertical spacing

-   **Code blocks**: Maintain *one* blank line between code blocks^†^. *Exception*: Do not separate adjacent `library()` functions with a blank line.
-   **Comments**: Maintain *one* blank line between code blocks and comments^†^.

### Line breaks

- Code and comments should not exceed 80 characters in width (if it is avoidable) -- add a line break, if possible.
-   **Prefix functions**: Include no more than *one* prefix function per line of code^†^. *Exceptions*: Prefix operators, the combine function (`c()`), `aes()`, and functions used to calculate summary statistics of a data object (e.g., `mean()`, `n()`, and `length()`).
-   **Arguments in a function**: If you provide three or more arguments to a function, place each argument on its own line^†^. *Exception*: When using the `c()` or `list()` functions, you may include up to five numeric values.
-   **Assignment**: If a code block spans more than one line of code, add a new line after the assignment operator ^†^.
-    **Pipe operators** (`%>%` or `%>%`): Code that follows a pipe operator should be placed on a new line^†^.

### Assignment

-   Always use the `<-` operator for global assignment.
-   Assigned names should be written in snake_case.

### Functions

-   **Nested functions** should not be nested deeper than two levels (use a pipe instead!)^†^ and each level should be indented *two* spaces (one tab stop) relative to the parent function.
-   **Logicals**: Spell out `TRUE` and `FALSE` in a function's argument.
-   If you modify the default behavior of a function's argument, include the name of the argument.

## Style guide, in-depth

### Horizontal spacing

::: indent_bb
[●]{.bulls} **Commas** should be followed by *one* trailing space, but *not* a leading space.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
c(1,1 , 2, 3 , 5)
```

[Good:]{.good}

```{r}
c(1, 1, 2, 3, 5)
```

**Exception**: More than one space *can* be added after a comma if it improves the alignment within a code block.

```{r}
tribble(
  ~x, ~y,
  11, 2,
  3,  5)
```
:::

::: indent_bb
[●]{.bulls} **Infix functions** should be separated from surrounding code with a *single* leading and trailing space.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
country<-c("boy", "howdy")

nerdy <-c("hello", "world")

formal<- c("warm", "wishes")

my_list <- 
  list(
    country= "boy howdy", 
    nerdy ="hello world", 
    formal= "warm wishes")

1/2
1+ 2
1 ==2

c(11, 23, 32)%>%
  mean()
```

[Good:]{.good}

```{r}
country <- c("boy", "howdy")

nerdy <- c("hello", "world")

formal <- c("warm", "wishes")

my_list <- 
  list(
    country = "boy howdy", 
    nerdy = "hello world", 
    formal = "warm wishes")

1 / 2
1 + 2
1 == 2

c(11, 23, 32) %>%
  mean()
```
:::

::: indent_wb
[○]{.bulls} **Exception**: The extraction (`$`) and colon (`:`, `::`) infix operators should *not* be preceded or followed by a space.
:::

::: indent_code_wb
[Bad:]{.bad}

```{r}
my_list$ nerdy

my_list $nerdy

readr ::read_csv

readr:: read_csv

1 :4

1: 4
```

[Good:]{.good}

```{r}
my_list$nerdy

readr::read_csv

1:4
```
:::

::: indent_wb
[○]{.bulls} **Exception**: You can add more than one space before the `=` operator if it improves code block alignment.
:::

::: indent_code_wb

```{r}
sayings <-
  tibble(
    country = c("boy", "howdy"),
    nerdy   = c("hello", "world"),
    formal  = c("warm", "wishes"))
```
:::

::: indent_bb
[●]{.bulls}  **Prefix functions**: Should *not* be preceded or followed by a space.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
c ("boy", "howdy")

! TRUE

tribble(
  ~ x, ~ y,
  11, 2,
  3,  5)
```

[Good:]{.good}

```{r}
c("boy", "howdy")

!TRUE

tribble(
  ~x, ~y,
  11, 2,
  3,  5)
```

**Exception**: Do include a trailing space if `~` is followed by function (including operators).

[Bad:]{.bad}

```{r}
c(1, 2) %>% 
  map_dbl(~1 + .x)
```

[Good:]{.good}

```{r}
c(1, 2) %>% 
  map_dbl(~ 1 + .x)
```

*Note: The* `map` *family of functions will be covered in Module 5!*
:::

::: indent_bb
[●]{.bulls}  **Parentheses and brackets**: Parentheses (`(...)`)^†^, curly braces `{...}`, and square bracket (extraction: `[]`, `[[]]`) operators should *not* be preceded or followed by a space.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
my_list [[1]]

my_list[[ 1]]

sayings [, -1]

c( "boy", "howdy")

c ("boy", "howdy")

c("boy", "howdy" )
```

[Good:]{.good}

```{r}
my_list[[1]]

sayings[, -1]

c("boy", "howdy")
```

*Note: This course style guide does not include a preferred style for hanging parentheses or collapsed closing parentheses. For example, both of the below are acceptable:*

```{r}
mean(
  c(1, 1)
)

mean(
  c(1, 1))
```
:::

::: indent_bb
[●]{.bulls}  **Comments**: Add a *single* space between the hashtag (`#`) and comment.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
#my section header --------------------------------------------

#My atomic vector:

c(1, 2)
```

[Good:]{.good}

```{r}
# my section header -------------------------------------------

# My atomic vector:

c(1, 2)
```
:::

::: indent_bb
[●]{.bulls} **Indentation**: Piped and nested code should be indented *two* spaces (one tab stop) relative to the parent object in a chained analysis.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
c(1, 2) %>% 
mean()

mean(
c(1, 2)
)
```

[Good:]{.good}

```{r}
c(1, 2) %>%
  mean()

mean(
  c(1, 2))
```
:::

### Vertical spacing

::: indent_bb
[●]{.bulls} **Code blocks**: Maintain *one* blank line between code blocks^†^.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
c(1, 2)
list(1, 2)
```

[Good:]{.good}

```{r}
c(1, 2)

list(1, 2)
```

**Exception**: Do not separate adjacent `library()` functions with a blank line.

```{r}
library(lobstr)
library(tidyverse)
```
:::

::: indent_bb
[●]{.bulls} **Comments**: Maintain *one* blank line between code blocks and comments^†^.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
# my section header -------------------------------------------
# My atomic vector:
c(1, 2)
```

[Good:]{.good}

```{r}
# my section header -------------------------------------------

# My atomic vector:

c(1, 2)
```
:::

### Line breaks

::: indent_bb
[●]{.bulls} Code and comments should not exceed 80 characters in width (if it is avoidable) -- add a line break, if possible.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
brood_x_cicadas <- c("Magicicada cassini", "Magicicada septendecim", "Magicicada septendecula")
```

[Good:]{.good}

```{r}
brood_x_cicadas <- 
  c("Magicicada cassini", "Magicicada septendecim", "Magicicada septendecula")

# Or (even better):

brood_x_cicadas <- 
  c("Magicicada cassini",
    "Magicicada septendecim", 
    "Magicicada septendecula")
```
:::

::: indent_bb
[●]{.bulls} **Prefix functions**: Include no more than *one* prefix function per line of code^†^. 
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
tibble(a = factor(1:2), b = 1:2)
```

[Good:]{.good}

```{r}
tibble(
  a = factor(1:2), 
  b = 1:2)
```

**Exception**: Prefix operators, the combine function (`c()`), `aes()`, and functions used to calculate summary statistics of a data object (e.g., `mean()`, `n()`, and `length()`). It is, however, still acceptable to put these on a new line.

```{r}
mean(c(1, 2))
```
:::

::: indent_bb
[●]{.bulls} **Arguments in a function**: If you provide three or more arguments to a function, place each argument on its own line^†^.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
c("roger", "pete", "john", "keith")
```

[Good:]{.good}

```{r}
c("roger",
  "pete",
  "john",
  "keith")
```

**Exception**: When using the `c()` or `list()` functions, you may include up to five numeric values.

```{r}
c(1, 1, 2, 3, 5)
```
:::

::: indent_bb
[●]{.bulls} **Assignment**: If a code block spans more than one line of code, add a new line after the assignment operator ^†^.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
mean_value <- mean(
  c(1, 2))
```

[Good:]{.good}

```{r}
mean_value <- 
  mean(c(1, 2))
```
:::

::: indent_bb
[●]{.bulls} **Pipe operators**: Code that follows a pipe operator should be placed on a new line^†^.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
c(1, 2) %>% mean()
```

[Good:]{.good}

```{r}
c(1, 2)  %>%
  mean()
```
:::

### Assignment

::: indent_bb
[●]{.bulls} Always use the `<-` operator for global assignment.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
my_vector = c(1, 2)
```

[Good:]{.good}

```{r}
my_vector <- c(1, 2)
```
:::

::: indent_bb
[●]{.bulls} Assigned names should be written in snake_case.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
my.phrases <-
  tribble(
    ~boyHowdy, ~HelloWorld,
    1, 3,
    2, 4)
```

[Good:]{.good}

```{r}
my_phrases <-
  tribble(
    ~boy_howdy, ~hello_world,
    1, 3,
    2, 4)
```
:::

### Functions

::: indent_bb
[●]{.bulls} **Nested functions** should not be nested deeper than two levels (use a pipe instead!)^†^.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
mean(
  as.numeric(
    factor(1:2)
  ))
```

[Good:]{.good}

```{r}
factor(1:2) %>%
  as.numeric() %>% 
  mean()
```
:::

::: indent_bb
[●]{.bulls} **Logicals**: Spell out `TRUE` and `FALSE` in a function's argument.
:::
::: indent_code_bb
[Bad:]{.bad}

```{r}
mean(c(1, NA, 3), na.rm = T)
```

[Good:]{.good}

```{r}
mean(c(1, NA, 3), na.rm = TRUE)
```
:::

::: indent_bb
[●]{.bulls} If you modify the default behavior of a function's argument, include the name of the argument.
:::

::: indent_code_bb
[Bad:]{.bad}

```{r}
factor(
  c("roger",
    "pete",
    "john",
    "keith"),
  c("keith",
    "john",
    "pete",
    "roger"))
```

[Good:]{.good}

```{r}
factor(
  c("roger",
    "pete",
    "john",
    "keith"),
  levels = 
    c("keith",
      "john",
      "pete",
      "roger"))
```
:::

