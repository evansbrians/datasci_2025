---
title: "3.4 Introduction to joining data frames"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

```{r setup, include=FALSE}
library(tidyverse)

knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  error = TRUE)

rm(has_annotations)
```

<hr>

<div>
![](../../images/hex_complex.png){.intro_image}

Once data are tidy, they can often be difficult to use unless we are able to join information across tables. The keys that are shared between tables give us the power to do so. As I have stated throughout this course, a *key* is used to reference a set of values. When we store data in our global environment, the name of the data object is actually a **key** that R (and you) uses to retrieve the data. With tidy tabular data, two types of keys are of particular interest: primary and foreign keys. A **primary key** is a column that provides a unique identifier for each row of a dataset. A **foreign key** is a column that provides a reference to the primary key of another dataset. When we conduct a join, we are joining tables based on these two sets of keys.

In this lesson, we will review our **tidy data** rules (every row represents an observation, every column represents a variable, and every level of observation represents a table) and you will learn how to:

* Conduct mutating joins with `full_join()`, `inner_join()`, and `left_join()`
* Conduct filtering joins with `anti_join()` and `semi_join()`
* Join tables with **compound keys**
* Join tables that are at the same level of observation

**Important!** Before starting this tutorial, be sure that you have completed all preliminary and  previous lessons!

</div>

## Data for this lesson

Please click on the buttons below to explore the metadata for this lesson!

<button class="accordion">Metadata: Video lesson</button>
::: panel
In the video portion of this lesson, we will explore two files -- [weather_tidy.rds]{.mono} and [messy_birds.rds]{.mono}. 

**[weather_tidy.rds]{.mono}**: These data are formatted as a list object comprised of the following tibble data frames and variables:

[stations]{.mono}

* [station]{.mono}, character: The **primary key** for each weather station -- recall that a primary key is a unique identifier for a row (i.e., observation) in a data frame.
* [longitude]{.mono}, numeric: The longitudinal coordinates of a weather station, in decimal degrees.
* [latitude]{.mono}, numeric: The latitudinal coordinates of a weather station, in decimal degrees.
* [elevation]{.mono}, numeric: The elevation of a weather station, in meters above sea level.
* [state]{.mono}, character: The state where a weather station is located
* [name]{.mono}, character: The name of a weather station

[observations]{.mono}

* [station]{.mono}, character: The **foreign key** key to each weather station -- recall that a foreign key is a variable that refers to the primary key of another data frame.
* [date]{.mono}, character: The date of an observation. Note that the [station]{.mono} and [date]{.mono} columns comprise the **compound key** for this table -- a compound key is a set of variables in a data frame that, combined, represent the primary key of the data frame.
* [precip]{.mono}, character: The daily precipitation at a weather station, in millimeters.
* [snow]{.mono}, character: The daily snowfall at a weather station, in millimeters.
* [temperature_min]{.mono}, character: The daily minimum temperature ($^\circ$C) at a weather station.
* [temperature_max]{.mono}, character: The daily maximum temperature ($^\circ$C) at a weather station.

**[messy_birds.rds]{.mono}**: These data are a toy dataset of bird banding data and represent an untidy tibble. Variables include:

* [capture_id]{.mono}, character: The primary key for a unique capture record.
* [band_number]{.mono}, character: The numbers assigned to an aluminum band that has been placed on a bird.
* [spp]{.mono}, character: A species code for the captured bird.
* [scientific_name]{.mono}, character: The scientific names for each species.
* [common_name]{.mono}, character: The common names for each species, as used in the United States.
* [foraging]{.mono}, character: The foraging strategy of each species.
* [diet]{.mono}, character: The dietary niche of each species.
* [wing]{.mono}, numeric: The length of a bird's wing (unflattened wing chord), in millimeters.
* [mass]{.mono}, numeric: The weight of a bird, in grams.

:::

<button class="accordion">Metadata: Written tutorial</button>
::: panel
In the written portion of this lesson, we will explore the file [district_birds.rds]{.mono}. We have already used this dataset *a lot*, so I will spare you the details of how and why these data were collected (but see the introduction to this module if you missed it). The data are a formatted as a list object comprised of the following tibble data frames and variables that we will use in this lesson:

[birds]{.mono}

* [species]{.mono}, character: A four-letter code for each species that serves as a primary key for this table.
* [common_name]{.mono}, character: The common names for each species, as used in the United States.
* [foraging]{.mono}, character: The foraging strategy of each species.
* [diet]{.mono}, character: The dietary niche of each species.

[counts]{.mono}

* [count_id]{.mono}, character: The primary key for a unique count record.
* [visit_id]{.mono}, character: A foreign key to the [visits]{.mono} table.
* [spp]{.mono}, character: A species code that acts as a foreign key to the [birds]{.mono} table.
* [count]{.mono}, double: The number of birds counted of a given species over a 10-minute time period.

[visits]{.mono}

* [visit_id]{.mono}, character: The primary key for a unique visit record.
* [site_id]{.mono}, character: A foreign key to the [sites]{.mono} table.
* [date]{.mono}, character: The date in which a visit occurred.
:::

## Introductory video

### Set up your video session

Please do the following to ensure that you are working in a clean session:

1. In the *Environment* tab of your *workspace pane*, ensure that your *Global Environment* is empty. If it is not, click the *broom* to remove all objects. *Note: Conversely, you can remove all items with `rm(list = ls())`*.
2. In the *History* tab of your *workspace pane*, ensure that your history is empty. If it is not, click the *broom* to remove your history.
3. Open the script file [joins.R]{.mono} (Windows: [Ctrl + O]{.mono}; Mac: [Cmd + O]{.mono}).

*Note: This video is from my course on managing ecological data, so there may be some references to past lessons that do not apply to this class!*

{{< video https://www.youtube.com/embed/wr4mzkZpq50 >}}

## Set up your session (tutorial)

**Important!** Before continuing, please save and close [joins.R]{.mono}.

Please do the following to ensure that you are working in a clean session:

1. In the *Environment* tab of your *workspace pane*, ensure that your *Global Environment* is empty. If it is not, click the *broom* to remove all objects. *Note: Conversely, you can remove all items with `rm(list = ls())`*.
2. In the *History* tab of your *workspace pane*, ensure that your history is empty. If it is not, click the *broom* to remove your history.

Now that we are working in a clean session:

1. Create a script file (Windows: [Ctrl + Shift + N]{.mono}; Mac: [Cmd + Shift + N]{.mono}).
2. Save your script file as "[scripts/joins_written_content.R]{.mono}".
3. Add metadata as a comment on the top of the file (e.g., `# My code for the joining tutorial`).
4. Following your metadata, create a new **code section** (Windows: [Ctrl + Shift + R]{.mono}; Mac: [Cmd + Shift + R]{.mono}) and call it "`setup`".
5. Following your section header, attach the packages that comprise the **core tidyverse** (`library(tidyverse)`)

At this point, your script should look something like:

```{r eval = FALSE}
# My code for the summarizing tutorial

# setup --------------------------------------------------------

library(tidyverse)
```

Now we are going to add our data for this lesson ... let's do this again as two "Now you!" challenges:

:::{.now_you}
<button class="accordion">{{< fa user-circle size=2x >}}&nbsp; In a single piped statement:

* Read in the list [district_birds.rds]{.mono}
* Assign the names of the individual list items to your global environment

</button>
::: panel

```{r, results = "hide"}
# Read in the data and assign the name of each list item to the global
# environment:

read_rds("data/raw/district_birds.rds") %>% 
  list2env(.GlobalEnv)
```

:::

<button class="accordion">{{< fa user-circle size=2x >}}&nbsp; In a single line of code, please remove the names `captures` and `sites` from your global environment.

</button>
::: panel

```{r}
# Remove `captures` and `sites` from the global environment:

rm(captures, sites)
```

:::
Please the give the above a try and then click the button to see how I answered this question!
:::

## Join tables

Below, we see how tables in a relational database are interconnected. Each connection is defined by primary and foreign keys (image source: Wickham and Grolemund):

<div class = "row">
<a title = "Data Science hex">
<img  src = "https://d33wubrfki0l68.cloudfront.net/245292d1ea724f6c3fd8a92063dcd7bfb9758d02/5751b/diagrams/relational-nycflights.png"
alt="Hadley's relational database diagram"
style = "float: right; margin-top: 1em; margin-bottom: 1em; width: 100%; height: auto;">
</img>
</a>
</div>

The connections above represent common columns that are used to connect information across data frames. When establishing connections between tables, it is important to consider which table is the target of the join and which table is the source of joining information. We can consider these two tables as:

* **Source table**: A data frame that is referenced by the target table. 
* **Target table**: A data frame that you wish to join data to.

A join is typically conducted by joining the table with the *primary key* (the *source table*), to the table with the *foreign key* (the *target table*). In this course, we will explore two different methods for joining data:

* A **mutating join** adds variables to a table;
* A **filtering join** subsets a table based on the values in another table.


For this exercise, we will use the tibbles `visits`, `counts`, and `birds` to explore the connections between tidy data frames. Before we begin, let's explore the primary and foreign keys of each table.

**visits**: Each row in the `visits` table represents the date that a site was visited. It contains a primary key, `visit_id`. Let's take a look:

```{r}
visits
```

**counts**: The `counts` table represents the counts of birds, by species, during a visit. This table contains a primary key, `count_id`, a foreign key to the visits table, `visit_id`, and a foreign key to the `birds` table, `spp`. 

```{r}
counts
```

**birds**: The `birds` table contains natural history information for each of the birds observed. The primary key of this table is `species` and there are no foreign keys.

```{r}
birds
```

## Mutating joins

Any join in which a column is added to the target table is known as a **mutating join**.

### Left join

The mutating join that I use most often (and the one that we have used previously) is a `left_join()`. In a left join, all records in the target table and only matching records from the source table are maintained. Source table columns, other than the column or columns that represent matching keys, are added to the target table. 

Let's join the source table `visits` (primary key: `visit_id`) to the target table `counts` (primary key: `count_id`; foreign key to `visits`:  `visit_id`). We supply:

* The name assigned to the target table;
* The function `left_join()`;
* The name assigned to the source table;
* The argument `by = `, which specifies the name of the key column (in quotes) upon which the join is based.

```{r}
counts %>% 
  left_join(visits, by = "visit_id")
```

### Interlude: Joining issues

There are a number of circumstances that can make joining a bit challenging. Before moving from `left_join()` to other types of join operations, it is worth taking a moment to explore these.

#### Common keys, uncommmon names

Sometimes the primary key and foreign key columns share values, but do not share the same name. As an example, let's join the source table `birds` (primary key: `spp`) to the target table `counts` (foreign key to `birds`: `species`). We address the different names assigned to the foreign and primary keys by supplying a named character vector -- the name assigned to the character value is the foreign key and the value is the primary key.

```{r}
c("spp" = "species")
```

... we supply this within the `by = ` argument of a join:

```{r}
counts %>% 
  left_join(
    birds, 
    by = c("spp" = "species"))
```

::: mysecret

{{< fa user-secret size=2x >}} [Introducing ... `join_by()`!]{style="font-size: 1.25em; padding-left: 0.5em;"}

A new feature to the join functions in *dplyr* is the `join_by()` function (introduced in January 2023). It is supplied in the `by = ...` argument and, within the parentheses of `join_by()`, we provide a logical test to define the joining variables:

```{r}
counts %>% 
  left_join(
    birds, 
    by = join_by(spp == species))
```
:::

#### Joins sometimes wield difficult intermediate tables!

It can often be challenging to wade through all of the columns that a join generates. For example, do we really need all of the columns that we generated above?

If we are not interested in *all* of the columns of the source table, it is best practice to subset the columns being joined. For example, perhaps we are only interested in knowing the number of each species counted in each observation and their common name. We can address this by subsetting the columns during the join process:

```{r}
counts %>% 
  select(spp, count) %>% 
  left_join(
    birds %>% 
      select(species, common_name), 
    by = join_by(spp == species))
```

Notice that we had to maintain the `spp` and `species` columns because they represented the key columns for the join. If we no longer need the `spp` column, this should be removed *after the join* using negated column selection.

```{r}
counts %>% 
  select(spp, count) %>% 
  left_join(
    birds %>% 
      select(species, common_name), 
    by = join_by(spp == species)) %>% 
  select(!spp)
```

Of course, we could have just selected our columns of interest *after the join* (but I do not recommend this):

```{r}
counts %>% 
  left_join(
    birds, 
    by = join_by(spp == species)) %>% 
  select(count, common_name)
```

Given that the code above is much more parsimonious, why would I not choose this version? There are a few reasons for this:

* The version in which you are selecting at the end forces you to make the decision about which columns to maintain after the data are joined -- this often involves wading through a lot of columns!
* By subsetting the columns in each step, and highlighting and running the portions of the code that subset the data, you have a stronger understanding of the data being joined. This care gives you more control over the joining process.
* You reduce the size of the data being piped into subsequent steps (which can sometimes yield benefits in memory management).

#### Joining at the same observational level

The third tidy data rule states that "Every level of observation forms a table". The most frequent violation of this rule occurs when multiple levels of observation are in the same table. It is sometimes the case, however, that multiple tables represent the same level of observation.

Let's fake the issue. Below, I generate two tables that both represent the "species" level of observation. I arrange the columns of each dataset by life history guild and then species within the guild:

```{r}
foraging <-
  birds %>% 
  select(species, foraging) %>% 
  arrange(foraging, species)

foraging

diet <-
  birds %>% 
  select(species, diet) %>% 
  arrange(diet, species)

diet
```

A join is a (fairly) safe option for addressing this problem. In this case, the primary key of `foraging` is also the primary key of `diet`. As such, the foreign key of `foraging` is, of course, also the foreign key of `diet`. Because of this, the order of tables to supply to the join (target and source) do not really matter:

```{r}
# Join diet to foraging:

foraging %>% 
  left_join(diet, by = "species")
```

```{r}
# Join foraging to diet:

diet %>% 
  left_join(foraging, by = "species")
```

*Note: The only difference in the above is the order of the columns.*

Sometimes we intentionally construct tables at the same level of observation just for the purpose of sharing data across tables. For example, perhaps we want to construct a table that includes the common name of bird species and the number of birds observed for each species.

We can use summarize to summarize counts by species:

```{r}
counts %>% 
  summarize(
    count = n(),
    .by = spp)
```

... and use `left_join()` to join the above to our `birds` table:

```{r}
counts %>% 
  summarize(
    count = n(),
    .by = spp) %>% 
  left_join(
    birds %>% 
      select(species, common_name),
    by = c("spp" = "species")) %>% 
  select(!spp)
```

As an extra step, let's subset the table to the 5 species with the highest count:

```{r}
counts %>% 
  group_by(spp) %>% 
  summarize(count = n()) %>% 
  left_join(
    birds %>% 
      select(species, common_name),
    by = c("spp" = "species")) %>% 
  select(common_name, count) %>% 
  slice_max(count, n = 5)
```

#### Compound keys

One all-too-common issue that we face when joining tables on the same level of observation is primary keys that may be comprised of more than one column. Such keys are known as **compound keys**.

I will fake the issue again by making two tables of counts, one for "GRCA" (Gray catbirds) and the other for "NOCA" (Northern cardinals). For each table, I will include the `site_id`, `date`, and `count`:

```{r}
# Gray catbird counts:

counts_grca <- 
  counts %>% 
  filter(spp == "GRCA") %>% 
  select(visit_id, n_grca = count) %>% 
  left_join(
    visits, 
    by = "visit_id") %>% 
  select(site_id:date, n_grca)

counts_grca

# Northern cardinal counts:

counts_noca <- 
  counts %>% 
  filter(spp == "NOCA") %>% 
  select(visit_id, n_noca = count) %>% 
  left_join(
    visits, 
    by = "visit_id") %>% 
  select(site_id:date, n_noca)

counts_noca
```

We can see in the above that each observation (row) is defined by the site in which an observation occurred *and* the date when the observation occurred. The primary key therefore must include both `site_id` and `date`. We can address this in a join by supplying a character vector of column names upon which to base the join:

```{r}
# Cardinals joined to catbirds:

counts_grca %>% 
  left_join(
    counts_noca,
    by = c("site_id", "date"))

# Catbirds joined to cardinals:

counts_noca %>% 
  left_join(
    counts_grca,
    by = c("site_id", "date"))
```

Notice that the two joins produced very different results. The number of observations (rows) is determined by the target table. When there was no match in the source table, an `NA` (missing value) is returned. I am not overly concerned with the `NA` values, but the different number of rows is a major issue given that the level of observation is equivalent for the tables. This is the sort of situation in which we might face data loss. To address this, let's return to our classes of mutating joins ...

### Full joins

A `full_join()` maintains all rows in the target *and* source tables, regardless of whether there is a match. Non-matching values are replaced with an `NA`:

```{r}
# Cardinals joined to catbirds, all rows maintained:

counts_grca %>% 
  full_join(
    counts_noca,
    by = c("site_id", "date"))

# Catbirds joined to cardinals, all rows maintained:

counts_noca %>% 
  full_join(
    counts_grca,
    by = c("site_id", "date"))
```

With the exception of the order of the rows and columns, the above datasets are equivalent.

Let's take a moment to think about those `NA` values. If no attempt was made to observe the value of a given variable, such values are appropriate. If, however, attempts were made to observe both variables, then the `NA` values should be replaced. Here, the value `NA` represents the value `0`. Modifying the above (see Module 2.4; Special case: NA values):

```{r}
counts_noca %>% 
  full_join(
    counts_grca,
    by = c("site_id", "date")) %>% 
  mutate(
    n_noca = replace_na(n_noca, 0),
    n_grca = replace_na(n_grca, 0))
```

### Inner joins

What if we wanted to conduct a mutating join that only maintains matching rows? For example, perhaps we want to subset and join the data across sites in which Northern cardinals *and* Gray catbirds were observed. For this, we use an `inner_join()`:

```{r}
counts_noca %>% 
  inner_join(
    counts_grca,
    by = c("site_id", "date"))
```

We can look at the summary statistics to ensure that there are no `NA` values in the output:

```{r}
counts_noca %>% 
  inner_join(
    counts_grca,
    by = c("site_id", "date")) %>% 
  summary()
```

## Filtering joins

We can use joins to filter data based on matching (or non-matching) key-values. These are called **filtering joins**. In a filtering join, no columns are added to the target data frame.

### Semi-joins

Semi-joins subset data in the target table by matching key values between the target and joining tables.

Let's filter the `counts` data to counts of species observed with a insectivorous diet (`diet == insectivore`).

```{r}
counts %>% 
  semi_join(
    birds %>% 
      filter(diet == "insectivore"),
    by = c("spp" = "species"))
```

Note: The above operation is a (much more parsimonious!) version of:

```{r}
insectivores <-
  birds %>% 
  filter(diet == "insectivore") %>% 
  pull(species)

counts %>% 
  filter(spp %in% insectivores)
```

### Anti-joins

An `anti_join()` subsets the data in the target table by the key values that are *not* present in the joining table.

For example, we can subset the `counts` data to counts of species observed who do not have an insectivorous diet:

```{r}
counts %>% 
  anti_join(
    birds %>% 
      filter(diet == "insectivore"),
    by = c("spp" = "species"))
```

Note: The above operation is a (much more parsimonious!) version of:

```{r}
insectivores <-
  birds %>% 
  filter(diet == "insectivore") %>% 
  pull(species)

counts %>% 
  filter(!spp %in% insectivores)
```
<hr>

To better understand joins, I **strongly**  recommend reading the R for Data Science chapter (<a href = "https://r4ds.had.co.nz/relational-data.html#relational-data" target = "_blank">link</a>) on joining data. Joining data frames is one of the most important skills for managing data!

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Compound key** (or compound primary key): A set of variables in a data frame that, combined, represent the primary key of a table.
* **Core tidyverse package** or **Core tidyverse**: A subset of the *tidyverse* packages that are attached with `library(tidyverse)`.
* **Filtering join**: Subset a target table to only rows in which key values match (or are absent from) the keys within a source table.
* **Foreign key**: A variable in a data frame that refers to the primary key of another data frame.
* **Key** (variable): A variable in a data frame (can also be used to refer to names assigned to objects stored in your computer's memory).
* **Mutating join**: Use matching keys to add columns to a target table from a source table.
* **Primary key**: A variable in a data frame that is used to identify unique records.
* **Source table**: In a join, this is the table that is referenced by the target table (in a mutating join, the source table provides the new variables for the target table) -- this is typically the table with the primary key.
* **Target table**: In a join, the target table is the table that you wish to join data to (usually the table with the foreign key).
* **Tidy data** (noun): A data format developed by Hadley Wickham (based on Codd's rules) in which every row represents an observation, every column represents a variable, and every level of observation represents a table.
:::

<button class="accordion">Functions</button>
::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *lubridate*, *purrr*, *readr*, *tibble*, *tidyr*, and *tidyverse* are loaded with `library(tidyverse)`.

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_3.5_joins.csv"
) %>%
  read_csv() %>%
  kableExtra::kable(
    align = c("c", "c", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```

:::

:::


<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
