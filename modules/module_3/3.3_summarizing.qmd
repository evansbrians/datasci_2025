---
title: "3.3 Introduction to summarizing"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "../../images/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

```{r setup, include=FALSE}
library(tidyverse)

knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  error = TRUE)

rm(has_annotations)
```

<hr>

<div>
![](../../images/hex_complex.png){.intro_image}

**Summarizing** in the tidyverse describes the process of calculating a summary statistic, or multiple summary statistics of a data frame and returning the resultant data as a tibble data frame. Fundamentally, the summarize process is actually three processes in one:

* Summarizing adds a new variable or variables to a tibble, like `mutate()`
* Summarizing reduces the columns in a tibble, like `select()`
* Summarizing removes duplicate rows, like `distinct()`

This lesson includes a video introduction to summarizing and a written tutorial that reviews and adds to the video content. If you are a little exhausted from the *super* long subsetting lesson (I know I am!), this one is much shorter because summarizing is very straightforward! In completing this lesson, you will learn how to:

* Use `summarize()`, with and without `group_by()` to summarize data frames by a variable or variables
* Count the number of observations with `n()`
* Use `group_by()` while calculating and assigning a new variable in a dataset
* Use `ggplot()` to plot summarized data
* Summarize data by year and month

**Important!** Before starting this tutorial, be sure that you have completed all preliminary and  previous lessons!

</div>

## Data for this lesson

Please click on the buttons below to explore the metadata for this lesson!

<button class="accordion">Metadata: Video lesson</button>
::: panel
In the video portion of this lesson, we will explore the file [spotted_lanternfly.rds]{.mono}. The data are formatted as a tibble data frame object comprised of the following variables:

* [datetime]{.mono}, datetime: The date and time in which an observation took place.
* [user]{.mono}, character: The user id for a given iNaturalist user (*Note: In combination with `datetime`, this variable represents the **compound key** for this table -- a compound key is a set of variables in a data frame that, combined, represent the primary key of the data frame.*).
* [state]{.mono}, character: The state in which an observation was made.
* [place_guess]{.mono}, character: The location in which an observation was made (based on the coordinates of the observation).
* [longitude]{.mono}, numeric: The longitudinal coordinates of an observation, in decimal degrees.
* [latitude]{.mono}, numeric: The latitudinal coordinates of an observation, in decimal degrees.
* [image_url]{.mono}, character: The web address of the picture submitted with an observation.
* [quality_grade]{.mono}, character: Whether the observation was verified by experts ("research" grade) or has not been able to be verified ("casual" grade).
* [description]{.mono}, character: A notes column where users can input comments about their observation

:::

<button class="accordion">Metadata: Written tutorial</button>
::: panel
In the written portion of this lesson, we will explore the file [district_birds.rds]{.mono}. We have already used this dataset *a lot*, so I will spare you the details of how and why these data were collected (but see the introduction to this module if you missed it). The data are a formatted as a list object -- we will use the `captures` list item (a tibble data frame) for this lesson:

* [capture_id]{.mono}, character: The **primary key** for a unique capture record.
* [visit_id]{.mono}, character: A **foreign key** to the [visits]{.mono} table.
* [band_number]{.mono}, character: The numbers assigned to an aluminum band that has been placed on a bird.
* [color_combo]{.mono}, character: The combination of aluminum and color bands placed on a bird
* [spp]{.mono}, character: A species code that acts as a foreign key to the [birds]{.mono} table.
* [sex]{.mono}, character: A code representing the sex of a bird, where: "F" is female, "M" is male, "U" is unknown, and [NA]{.mono} represents missing data.
* [age]{.mono}, character: A code representing the age of a bird, where: "AHY" is an adult, "ASY" is an adult that is more than two years old, "HY" is a juvenile, "L" is a nestling, "SY" is two years old, and "U" is unknown.
* [wing]{.mono}, numeric: The length of a bird's wing (unflattened wing chord), in millimeters.
* [tl]{.mono}, numeric: The length of a bird's tail, in millimeters.
* [mass]{.mono}, numeric: The weight of a bird, in grams.
* [bp_cp]{.mono}, character: The breeding condition of a bird, where: "-" stands for a bird that is not in breeding condition, "BP" is a brood patch, "CP" is a cloacal protuberance, "U" is unknown, and [NA]{.mono} represents missing data.
* [fat]{.mono}, character: The fat measured on a bird, that ranges from "0" for no fat, "T" for trace fat, and up to "5" for the maximum amount of fat. [NA]{.mono} values represent missing data.

:::

## Introductory video

### Set up your video session

Please do the following to ensure that you are working in a clean session:

1. In the *Environment* tab of your *workspace pane*, ensure that your *Global Environment* is empty. If it is not, click the *broom* to remove all objects. *Note: Conversely, you can remove all items with `rm(list = ls())`*.
2. In the *History* tab of your *workspace pane*, ensure that your history is empty. If it is not, click the *broom* to remove your history.
3. Open the script file [summarize_lanternfly.R]{.mono} (Windows: [Ctrl + O]{.mono}; Mac: [Cmd + O]{.mono}).

### Video content

Before you begin, some notes on the video content:

* The processes in which I use the `slice()` function could have more parsimoniously been completed with the `slice_max()` function.
* I am currently much more in favor of running `aes()` outside of the `ggplot()` function (rather than nesting).
* I do not conform to the course style guide in this video!
* I made this video in the middle of 2022 -- this is why the number of spotted lanternfly observations decrease a little in that year. It is also why your help file will look differently than mine -- there has been some big changes to the options of the function!
* For the sake of time, we will not be covering the lubridate package in depth in this course.

{{< video https://www.youtube.com/embed/1ngdQKVTO7o >}}

## Set up your session (tutorial)

**Important!** Before continuing, please save and close [summarize_lanternfly.R]{.mono}.

Please do the following to ensure that you are working in a clean session:

1. In the *Environment* tab of your *workspace pane*, ensure that your *Global Environment* is empty. If it is not, click the *broom* to remove all objects. *Note: Conversely, you can remove all items with `rm(list = ls())`*.
2. In the *History* tab of your *workspace pane*, ensure that your history is empty. If it is not, click the *broom* to remove your history.

Now that we are working in a clean session:

1. Create a script file (Windows: [Ctrl + Shift + N]{.mono}; Mac: [Cmd + Shift + N]{.mono}).
2. Save your script file as "[scripts/summarize_written_content.R]{.mono}".
3. Add metadata as a comment on the top of the file (e.g., `# My code for the summarizing tutorial`).
4. Following your metadata, create a new **code section** (Windows: [Ctrl + Shift + R]{.mono}; Mac: [Cmd + Shift + R]{.mono}) and call it "`setup`".
5. Following your section header, attach the packages that comprise the **core tidyverse** (`library(tidyverse)`)

At this point, your script should look something like:

```{r eval = FALSE}
# My code for the summarizing tutorial

# setup --------------------------------------------------------

library(tidyverse)
```

Now we are going to add our data for this lesson ... let's do this as a "Now you!" challenge:

:::{.now_you}
<button class="accordion">{{< fa user-circle size=2x >}}&nbsp; In a single piped statement:

* Read in the list [district_birds.rds]{.mono};
* Use the `pluck` function to subset the list to just the data associated with the name `captures`;
* Subset `captures` to the columns `spp`, `sex`, `wing`, `mass`, and `bp_cp`;
* Use `replace_na()` to change [NA]{.mono} values in `bp_cp` to `-`;
* Use `filter()` to remove any rows with a `bp_cp` value of "U";
* Assign the resultant object to your global environment with the name `measures`.

</button>
::: panel

```{r}
# Read in the data and subset to the list item and variables of
# interest:

measures <-
  
  # Read in the file:
  
  read_rds("data/raw/district_birds.rds") %>% 
  
  # Extract the list item assigned to the name "captures":
  
  pluck("captures") %>% 
  
  # Select the columns of interest:
  
  select(
    spp:sex,
    wing, 
    mass:bp_cp
  ) %>% 
  
  # Convert `NA` values in `bp_cp` to "-":
  
  mutate(
    bp_cp = 
      replace_na(bp_cp, "-")
  ) %>% 
  
  # Subset the data to where `bp_cp` does not equal "U":
  
  filter(bp_cp != "U")

# Or:

measures <-
  
  # Read in the file:
  
  read_rds("data/raw/district_birds.rds") %>% 
  
  # Extract the list item assigned to the name "captures":
  
  pluck("captures") %>% 
  
  # Select the columns of interest:
  
  select(
    spp:sex,
    wing, 
    mass:bp_cp
  ) %>% 
  
  # Convert `NA` values in `bp_cp` to "-":
  
  mutate(
    bp_cp = 
      replace_na(bp_cp, "-")
  ) %>% 
  
  # Subset the data to where `bp_cp` does not equal "U":
  
  filter(!bp_cp == "U")
```

:::
Please the give the above a try and then click the button to see how I answered this question!
:::

## Summarize

The `summarize` function allows you to calculate summary statistics for a grouped dataset.

Let's run the below and think about what occurred:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(spp) %>% 
  
  # Calculate the average wing length of each group:
  
  summarize(
    mean_wing = 
      mean(wing, na.rm = TRUE)
  )
```

The above provided the average wing length by species ... but what is summarize doing?

We *could* have used `mutate()` to calculate the mean wing length by species:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(spp) %>% 
  
  # Calculate the average wing length of each group:
  
  mutate(
    mean_wing = 
      mean(wing, na.rm = TRUE)
  )
```

... then ungroup the data with the *dplyr* `ungroup` function:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(spp) %>% 
  
  # Calculate the average wing length of each group:
  
  mutate(
    mean_wing = 
      mean(wing, na.rm = TRUE)
  ) %>% 
  
  # Remove the grouping:
  
  ungroup()
```

*Note: Leaving data grouped is VERY dangerous! I always suggest removing a grouping after the grouping is no longer necessary.*

... then selected our columns of interest with `select()`:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(spp) %>% 
  
  # Calculate the average wing length of each group:
  
  mutate(
    mean_wing = 
      mean(wing, na.rm = TRUE)
  ) %>% 
  
  # Remove the grouping:
  
  ungroup() %>% 
  
  # Select the columns of interest:
  
  select(spp, mean_wing)
```

... then subset the data to unique rows with `distinct()`:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(spp) %>% 
  
  # Calculate the average wing length of each group:
  
  mutate(
    mean_wing = 
      mean(wing, na.rm = TRUE)
  ) %>% 
  
  # Remove the grouping:
  
  ungroup() %>% 
  
  # Select the columns of interest:
  
  select(spp, mean_wing) %>% 
  
  # Remove duplicate rows:
  
  distinct()
```

But that is a lot of coding ... summarize saves us loads of time and really enhances code parsimony!

*Note: We will cover grouping data in more depth in the near future ... it is super powerful!*

## Multiple groups

I often use the `summarize` function, in combination with `n()` for calculating the number of observations per group:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(spp) %>% 
  
  # Count the number of observations per group:
  
  summarize(n = n())
```

*Note: The function `n()` is a row counter. It counts the number of rows per group. Although the above can be produced with `tally()`, I typically use this version, as it is more flexible (because I can add more summary statistics other than simply counts).*

What if we wanted to summarize the number of observations by multiple groups though? We simply separate additional groups in `group_by()` with a comma. In doing so, any function (e.g., `split()`, `filter()`, `mutate()`) will run on each group separately.

In the code below, I summarize the number of observations by species and sex:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(spp, sex) %>% 
  
  # Count the number of observations per group:
  
  summarize(n = n())
```

But notice the warning message we received ... the data are still grouped by `spp`! By default, `summarize()` will only drop the last group used (in this case, `sex` was dropped) -- when we supply two or more groups, the resultant data will be grouped by default. If we summarize based on a single group, we do not have to think about it. 

Historically, we had to use `ungroup()` to remove the grouping from the resultant data:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(spp, sex) %>% 
  
  # Count the number of observations per group:
  
  summarize(n = n()) %>% 
  
  # Remove the grouping:
  
  ungroup()
```

*Note: Although we received a warning message for the `summarize` function, notice in the output that the resultant data are no longer grouped by `spp`.*

Thanks to a fairly new feature, `.groups = "drop"` (May 2020), we can now remove the grouping structure from the data without the additional `ungroup` function: 

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(spp, sex) %>% 
  
  # Count the number of observations per group:
  
  summarize(
    n = n(),
    .groups = "drop"
  )
```

## Rename groups

We can rename a group on the fly right inside of the `group_by` function. For example, the variable name `spp` might not be very informative for all of our readers. We can change this to `species` with:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(species = spp, sex) %>% 
  
  # Count the number of observations per group:
  
  summarize(
    n = n()
  ) %>% 
  
   # Remove the grouping:
  
  ungroup()
```

:::{.now_you}
<button class="accordion">{{< fa user-circle size=2x >}}&nbsp; Modify the above such that:

* The [NA]{.mono} values in sex are removed;
* The code does not include `ungroup()` and the resultant object is *not* grouped
* The resultant object is a four column tibble with the names `species` (instead of `spp`), `F` (female), `M` (male), and `U` (unknown).

</button>
::: panel

```{r}
measures %>% 
  
  # Remove rows where `sex` is NA:
  
  filter(
    !is.na(sex)
  ) %>% 
  
  # Group the data:
  
  group_by(species = spp, sex) %>% 
  
  # Count the number of observations per group:
  
  summarize(
    n = n(),
    .groups = "drop"
  ) %>% 
  
  # Reshape the data frame to the desired structure:
  
  pivot_wider(
    names_from = sex,
    values_from = n
  )

# Or:

measures %>% 
  
  # Remove rows where `sex` is NA:
  
  drop_na(sex) %>% 
  
  # Group the data:
  
  group_by(species = spp, sex) %>% 
  
  # Count the number of observations per group:
  
  summarize(
    n = n(),
    .groups = "drop"
  ) %>% 
  
  # Reshape the data frame to the desired structure:
  
  pivot_wider(
    names_from = sex,
    values_from = n
  )
```

:::
Please the give the above a try and then click the button to see how I answered this question!
:::

## Avoiding [group_by()]{.mono}

As mentioned previously in ***Lesson 2.1 Reshaping data frames***, `summarize()` has gained a new argument, `.by = ...`. We simply specify the grouping variable (unquoted) using the new argument.

To see how this works, let's again count the number of captures by `spp`:

```{r}
measures %>% 
  
  # Count the number of observations per species and sex:
  
  summarize(
    n = n(),
    .by = spp
  )
```

That is very straightforward! A huge advantage to this approach is that the resultant data object is *not* grouped, even when multiple grouping variables are used. To illustrate this, let's again group the data by `spp` and `sex`. We then supply a vector of variables of interest to the `.by = ...` argument:

```{r}
measures %>% 
  
  # Count the number of observations per species:
  
  summarize(
    n = n(),
    .by = 
      c(spp, sex)
  )
```

The resultant data frame is not grouped!

So is `group_by()` a relic of the past? No!!! A difference between `group_by()` and `.by = ...` is that we can calculate and assign a new column during the `group_by()` process (thus `group_by()` includes a mutation). We cannot (currently) do so with `.by = ...`. As such, this works:

```{r}
measures %>% 
  
  # Group the data:
  
  group_by(species = spp, sex) %>% 
  
  # Count the number of observations per group:
  
  summarize(
    n = n(),
    .groups = "drop"
  )
```

... but we currently cannot do so with `.by = ...`

```{r, error = TRUE}
measures %>% 
  
  # Count the number of observations per group:
  
  summarize(
    n = n(),
    .by = 
      c(species = spp, sex)
  )
```

`group_by()` lives!

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Code section**:  A portion of an R script file that is delineated by a section header.
* **Compound key** (or compound primary key): A set of variables in a data frame that, combined, represent the primary key of a table.
* **Core tidyverse package** or **Core tidyverse**: Packages that are attached with `library(tidyverse)`.
* **Foreign key**: A variable in a data frame that refers to the primary key of another data frame.
* **Primary key**: A variable in a data frame that is used to identify unique records.
* **Experimental** (function): A function currently being tested for permanent distribution in a package (these functions are usually, but not always, safe to use).
* **NA** (value): A missing data value in an atomic vector.
* **Summarize**:  The process of calculating a summary statistic, or multiple summary statistics of a data frame and returning the resultant data as a tibble data frame. 
:::

<button class="accordion">Functions</button>
::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *lubridate*, *purrr*, *readr*, *tibble*, *tidyr*, and *tidyverse* are loaded with `library(tidyverse)`.

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_2.6_summarizing.csv"
) %>% 
  read_csv() %>% 
kableExtra::kable(
  align = c("c", "c", "l")
) %>%
kableExtra::kable_styling(
  font_size = 12,
  bootstrap_options = "hover")
```

:::

:::


<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
| Indent code                 | Ctrl + I         | command + I
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
