---
title: "3.2 Introduction to subsetting"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

```{r setup, include=FALSE}
library(tidyverse)

knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  error = TRUE)

rm(has_annotations)
```

<hr>

<div>
![](../../images/hex_complex.png){.intro_image}

**Subsetting** describes the process of reducing the number of items in a list (including columns in a data frame!), rows in a data frame, or values in an atomic vector. This is almost certainly the most common process that we do when managing or exploring data. Thus far, we have used a mix of tidyverse (e.g., `select()`) and base R (e.g., `$`) functions to subset data. It is now time that we more fully integrate (or even *embrace* ) tidyverse code styling and functionality into our coding process! Much of this lesson will be a review of functions that you have already used (diving a bit more deeply), but my goal is to place all of our subsetting operations in one place. In completing this lesson, you will learn how to use tidyverse tools to:

* Subset columns by index and name with `select()`
* Change column names with `select()` and `rename()`
* Enhance column selection with `everything()` and `where()`
* Extract a variable from a data frame as a vector with `pull()`
* Subset rows with the `slice()` family of functions
* Subset rows by condition with `filter()`
* Remove duplicate rows with `distinct()`

**Important!** Before starting this tutorial, be sure that you have completed all preliminary and  previous lessons!

</div>


## Data for this lesson

Please click on the buttons below to explore the metadata for this lesson!

<button class="accordion">Metadata: Video lesson</button>
::: panel
In the video portion of this lesson, we will explore the [*.rds]{.mono} file `weather_tidy.rds`. The data are formatted as a list object  comprised of the following tibble data frames and variables:

`stations`

* [station]{.mono}, character: The **primary key** for each weather station -- recall that a primary key is a unique identifier for a row (i.e., observation) in a data frame.
* [longitude]{.mono}, numeric: The longitudinal coordinates of a weather station, in decimal degrees.
* [latitude]{.mono}, numeric: The latitudinal coordinates of a weather station, in decimal degrees.
* [elevation]{.mono}, numeric: The elevation of a weather station, in meters above sea level.
* [state]{.mono}, character: The state where a weather station is located
* [name]{.mono}, character: The name of a weather station

`observations`

* [station]{.mono}, character: The **foreign key** key to each weather station -- recall that a foreign key is a variable that refers to the primary key of another data frame.
* [date]{.mono}, character: The date of an observation. Note that the [station]{.mono} and [date]{.mono} columns comprise the **compound key** for this table -- a compound key is a set of variables in a data frame that, combined, represent the primary key of the data frame.
* [precip]{.mono}, character: The daily precipitation at a weather station, in millimeters.
* [snow]{.mono}, character: The daily snowfall at a weather station, in millimeters.
* [temperature_min]{.mono}, character: The daily minimum temperature ($^\circ$C) at a weather station.
* [temperature_max]{.mono}, character: The daily maximum temperature ($^\circ$C) at a weather station.
:::

<button class="accordion">Metadata: Written tutorial</button>
::: panel
In the written portion of this lesson, we will explore the file `district_birds.rds`. This is a tidy dataset that contains a subset of records from the Smithsonian Migratory Bird Center's participatory science project, [Neighborhood Nestwatch](https://nationalzoo.si.edu/migratory-birds/neighborhood-nestwatch). The data are formatted as a list object comprised of the following tibble data frames and variables that we will use in this lesson:

`birds`

* [species]{.mono}, character: A four-letter code for each species that serves as a primary key for this table.
* [common_name]{.mono}, character: The common names for each species, as used in the United States.
* [foraging]{.mono}, character: The foraging strategy of each species.
* [diet]{.mono}, character: The dietary niche of each species.

`captures`

* [capture_id]{.mono}, character: The primary key for a unique capture record.
* [visit_id]{.mono}, character: A foreign key to the [visits]{.mono} table.
* [band_number]{.mono}, character: The numbers assigned to an aluminum band that has been placed on a bird.
* [color_combo]{.mono}, character: The combination of aluminum and color bands placed on a bird
* [spp]{.mono}, character: A species code that acts as a foreign key to the [birds]{.mono} table.
* [sex]{.mono}, character: A code representing the sex of a bird, where: "F" is female, "M" is male, "U" is unknown, and [NA]{.mono} represents missing data.
* [age]{.mono}, character: A code representing the age of a bird, where: "AHY" is an adult, "ASY" is an adult that is more than two years old, "HY" is a juvenile, "L" is a nestling, "SY" is two years old, and "U" is unknown.
* [wing]{.mono}, numeric: The length of a bird's wing (unflattened wing chord), in millimeters.
* [tl]{.mono}, numeric: The length of a bird's tail, in millimeters.
* [mass]{.mono}, numeric: The weight of a bird, in grams.
* [bp_cp]{.mono}, character: The breeding condition of a bird, where: "-" stands for a bird that is not in breeding condition, "BP" is a brood patch, "CP" is a cloacal protuberance, "U" is unknown, and [NA]{.mono} represents missing data.
* [fat]{.mono}, character: The fat measured on a bird, that ranges from "0" for no fat, "T" for trace fat, and up to "5" for the maximum amount of fat. [NA]{.mono} values represent missing data.

`visits`

* [visit_id]{.mono}, character: The primary key for a unique visit record.
* [site_id]{.mono}, character: A foreign key to the [sites]{.mono} table.
* [date]{.mono}, character: The date in which a visit occurred.
:::

## Introductory video

### Set up your video session

Please do the following to ensure that you are working in a clean session:

1. In the *Environment* tab of your *workspace pane*, ensure that your *Global Environment* is empty. If it is not, click the *broom* to remove all objects. *Note: Conversely, you can remove all items with `rm(list = ls())`*.
2. In the *History* tab of your *workspace pane*, ensure that your history is empty. If it is not, click the *broom* to remove your history.

Now that we are working in a clean session:

1. Open the script file `working_with_tidy_data.R` (Windows: [Ctrl + O]{.mono}; Mac: [Cmd + O]{.mono}).
2. Select the set up and mutation **code sections** and run the selected code (Windows: [Ctrl + Enter]{.mono}; Mac: [Cmd + Return]{.mono}).

### Video content

Before you begin, some notes on the video content:

* I created this video before the package *lubridate* was elevated to a **core tidyverse** package (February 2023). As such, if you have attached the *tidyverse* library, you no longer have to explicitly load `library(lubridate)` nor use `lubridate::`.
* I demonstrate the use of the `-` operator for negated selection ... I do not recommend using `-` for this purpose!
* Since making this video, I have changed my mind on the use of `drop_na()` and offer an alternate version in the written portion of this tutorial.
* I do not conform to the course style guide in this video! The biggest violations are:
    * I did not use hanging parentheses.
    * `select()` and `c()` should not have been on the same line.
    * `select()` and `where()` should not have been on the same line. 
    * `slice()` and `c()` should not have been on the same line.
    * `filter()` and `is.na()` should not have been on the same line.
    * I should have put `max()` on its own line if it had more than one argument, and placed each of the arguments on their own line. This would have ensured that each argument was indented two spaced relative to the function call.
    * I should have hit enter after the opening parentheses of `select()` and `filter()` when the functions arguments are placed on multiple lines. Doing so would have ensured that each argument of the function is on its own line and indented two spaces relative to the function call.
* Your [working_with_tidy_data.R]{.mono} file may look slightly different than the one used in the video tutorial. Your version of the file has been updated to adhere to the course style guide.

{{< video https://www.youtube.com/embed/E8SDseOmmhk >}}

## Set up your session (tutorial)

**Important!** Before continuing, please save and close `working_with_tidy_data.R`.

Please do the following to ensure that you are working in a clean session:

1. In the *Environment* tab of your *workspace pane*, ensure that your *Global Environment* is empty. If it is not, click the *broom* to remove all objects. *Note: Conversely, you can remove all items with `rm(list = ls())`*.
2. In the *History* tab of your *workspace pane*, ensure that your history is empty. If it is not, click the *broom* to remove your history.

Now that we are working in a clean session:

1. Create a script file (Windows: [Ctrl + Shift + N]{.mono}; Mac: [Cmd + Shift + N]{.mono}).
2. Save your script file as "`scripts/subsetting_written_content.R`".
3. Add metadata as a comment on the top of the file (e.g., `# My code for the subsetting tutorial`).
4. Following your metadata, create a new **code section** (Windows: [Ctrl + Shift + R]{.mono}; Mac: [Cmd + Shift + R]{.mono}) and call it "`setup`".
5. Following your section header, attach the packages that comprise the **core tidyverse** (`library(tidyverse)`)

At this point, your script should look something like:

```{r eval = FALSE}
# My code for the subsetting tutorial

# setup --------------------------------------------------------

library(tidyverse)
```

Now we are going to add our data for this lesson ... let's do this as two "Now you!" challenges:

:::{.now_you}
<button class="accordion">{{< fa user-circle size=2x >}}&nbsp; In a single piped statement:

* Read in the list `district_birds.rds`
* Assign the names of the individual list items to your global environment

</button>
::: panel

```{r, results = "hide"}
# Read in the data and assign the name of each list item to the global
# environment:

read_rds("data/raw/district_birds.rds") %>% 
  list2env(.GlobalEnv)
```

:::

<button class="accordion">{{< fa user-circle size=2x >}}&nbsp; In a single line of code, please remove the names `counts` and `sites` from your global environment.

</button>
::: panel

```{r}
# Remove `counts` and `sites` from the global environment:

rm(counts, sites)
```

:::
Please the give the above a try and then click the button to see how I answered this question!
:::

## Subset data frame columns

The `select()` family of functions is used to subset data frame columns. 

Let's take a look at the full `captures` data frame (*Note: You may need to modify the width of your viewer pane to see all of the columns at once*):

```{r}
captures
```

### Subset by column name

**Single column:** To select a single column, we can provide a one-value character vector with the name of the column (*quotes are not necessary!*):

```{r}
captures %>% 
  select(band_number)
```

::: mysecret

{{< fa user-secret size=2x >}} [What about extracting columns with a number?]{style="font-size: 1.25em; padding-left: 0.5em;"}

In the video, I demonstrated that you can also use the column number to extract a column. I do **not** recommend doing so because:

* The order of columns in a data frame may change;
* It does a poor job of communicating which column or columns are being selected.
:::

**Adjacent columns:** We can select a vector of adjacent columns by adding a colon between the first and last column of interest:

```{r}
captures %>% 
  select(band_number:age)
```

**Non-adjacent columns:** We can select a vector of non-adjacent columns simply by separating our columns-of-interest with a comma:

```{r}
captures %>% 
  select(band_number, age)
```

**Sets of columns:** We can select non-adjacent *and* adjacent columns in a single select operation:

```{r}
captures %>% 
  select(
    capture_id,
    band_number:age
  )
```

... or multiple sets of adjacent columns:

```{r}
captures %>% 
  select(
    capture_id,
    band_number:color_combo,
    wing:mass
  )
```

The above could have also been written as:

```{r}
captures %>% 
  select(
    capture_id,
    band_number,
    color_combo,
    wing:mass
  )
```


### Remove columns

**Remove a single column**: A negated selection will return all columns except for those specified by the negation operator, the `!`. Here, we will remove the column `capture_id`:

```{r}
captures %>% 
  select(!capture_id)
```

**Remove sets of columns**:  The negation operator can be used with multiple columns as well.

We can remove a set of adjacent columns using `:` to specify a range of columns to remove:

```{r}
captures %>% 
  select(!capture_id:color_combo)
```

To remove a set of non-adjacent columns, we have to wrap our column names in the combine function, `c`:

```{r}
captures %>% 
  select(
    !c(
      capture_id:visit_id, 
      color_combo
    )
  )
```

### Select columns that satisfy a condition

We can select all columns that match a specified condition by nesting the *tidyselect* function `where()` inside of select.

For example, we can subset `captures` to all variables that are numeric with:

```{r}
captures %>% 
  select(
    where(is.numeric)
  )
```

... or to all variables that are characters with:

```{r}
captures %>% 
  select(
    where(is.character)
  )
```

*Note: We will soon learn even more powerful ways to select variables in a data frame!*

### Rearrange columns during selection

We can use `select()` in conjunction with the *tidyselect* function `everything()` to change the order of columns.

For example, perhaps we want to continue the selection above and make `spp` the first column:

```{r}
captures %>% 
  select(
    !c(
      capture_id:visit_id, 
      color_combo
    )
  ) %>% 
  select(
    spp, 
    everything()
  )
```

In the above, I removed the columns that I was not interested in and then specified that I wanted to position `spp` before all of the other remaining columns.

*Note: The tidyselect package is not a part of the core tidyverse, but `everything()` and `where()` are referenced by the dplyr package (among others) and are thus made available to us with `library(tidyverse)`.*

### Changing column names

**Using select**: During the column selection process, we can change the name of a selected column:

```{r}
captures %>% 
  select(
    band_number,
    color_combo,
    species = spp
  )
```

**Using rename**: If we do not need to subset the columns, we may want to choose the `rename()` function instead:

```{r}
captures %>% 
  rename(species = spp)
```

:::{.now_you}
<button class="accordion">{{< fa user-circle size=2x >}}&nbsp; Subset captures to the fields `band number`, `spp`, `sex`, `wing`, `tl` (tail length), and `mass`. Globally assign the resultant object to the name `measures`.

</button>
::: panel

```{r, results = "hide"}
measures <-
  captures %>% 
  select(
    band_number, 
    spp:sex, 
    wing:mass
  )
```

:::

Please the give the above a try and then click the button to see how I answered this question!

:::


::: mysecret
{{< fa user-secret size=2x >}} [Should I use negated selection?]{style="font-size: 1.25em; padding-left: 0.5em;"}

A decision that you will sometimes have to make when subsetting is whether to subset by providing the names of your columns of interest or with negation. I typically choose the method that requires the least amount of coding.
:::

## Extract a list item

Up to this point, we have used the extraction operator, `$`, to extract a list item from a recursive object (lists and data frames). For example, in the below, I extract the character vector assigned to `foraging` and subset the vector to unique values:

```{r}
unique(birds$foraging)
```

A piped version of the above would look like:

```{r}
birds %>% 
  .$foraging %>% 
  unique()
```

If the **parent** object is a data frame, we can use the function `pull()` to extract a vector:

```{r}
birds %>% 
  pull(foraging) %>% 
  unique()
```

The above is preferred because it does a much better job of communicating the process relative to the odd `.$` statement (*though such statements will still be of use to us!* ).

Unfortunately, `pull()` only works for data frame class objects (including tibbles). Notice that using `pull()` for a list class object generates an error:

```{r, error = TRUE}
read_rds("data/raw/district_birds.rds") %>% 
  pull(birds)
```

A more widely applicable extraction option is the function `pluck()` from the *purrr* package (part of the core tidyverse). We can use `pluck()` to extract a column from a data frame:

```{r}
birds %>% 
  pluck("foraging") %>% 
  unique()
```

... or a list item from a list class object:

```{r}
read_rds("data/raw/district_birds.rds") %>% 
  pluck("birds")
```

Although `pluck()` can be more broadly applied, notice that the function requires the use of quotation marks. Because of this behavior (which will hopefully change in the future), I always use `pull()` to extract a vector from a data frame and reserve the use of `pluck()` for extracting items from list class objects.

## Subset rows by position

The most straightforward (and *sometimes* useful) way to subset the rows of a data frame is to extract rows by position. 

### Slice a row by row number

Using the function `slice()`, we can subset a row by position by providing the row number that we would like to retrieve:

```{r}
measures %>% 
  slice(1)
```

To slice adjacent rows, we provide a vector of row numbers, with lower and upper values separated with a `:` operator:

```{r}
measures %>% 
  slice(1:5)
```

For non-adjacent rows, we supply a vector of rows using the combine function, `c()`:

```{r}
measures %>% 
  slice(
    c(2, 3, 5)
  )
```

### Subset to first or last rows

The function `slice_head()` can be a handy tool for just grabbing the top row: 

```{r}
measures %>% 
  slice_head()
```

... or a specified number of rows from the top of the data frame:

```{r}
measures %>% 
  slice_head(n = 5)
```

The opposite of `slice_head()` is `slice_tail()`, which can be used to grab the last row in a data frame:

```{r}
measures %>% 
  slice_tail()
```

... or the last several rows in a data frame:

```{r}
measures %>% 
  slice_tail(n = 5)
```

### Slice and arrange

The `slice` functions become a very powerful tool for data exploration and wrangling when used in conjunction with `arrange()`. For example, perhaps we want to see the five lowest mass values in the `measures` data:

```{r}
measures %>% 
  arrange(mass) %>% 
  slice_head(n = 5)
```

We can now (as of 2020) conduct this operation much more simply using `slice_min()` (see `?slice`):

```{r}
measures %>% 
  slice_min(mass, n = 5)
```

Likewise, if we want to grab the top 5 values, we can use `slice_max()`:

```{r}
measures %>% 
  slice_max(mass, n = 5)
```

## Subset rows by condition

We can subset rows based on whether values satisfy a given condition. This is called **filtering** and is most often achieved using the `filter` function.

**Filter by one variable**: To filter based on condition, we provide the name of the target column, a logical operator and the condition upon which to filter the data.

For example, in the below, I filter `measures` to rows where the wing value is greater than 80 mm:

```{r}
measures %>% 
  filter(wing > 80)
```

... and here to where the value is greater than or equal to 80 mm:

```{r}
measures %>% 
  filter(wing >= 80)
```

We can also filter based on a character value. Below, I filter `birds` to where the value in the `species` column is "GRCA" (Gray catbird):

```{r}
birds %>% 
  filter(species == "GRCA")
```

::: mysecret

{{< fa user-secret size=2x >}} [A word of warning!]{style="font-size: 1.25em; padding-left: 0.5em;"}

When you filter a data frame based on a condition, all [NA]{.mono} values will be dropped! That can lead to unexpected behavior if you are not careful.

:::

### Filter & summary statistics

It is often useful to supply a derived summary statistic as a condition. For example, below I filter `measures` to where the value of the `wing` column is equal to the maximum wing length value:

```{r}
measures %>% 
  filter(
    wing == 
      max(wing, na.rm = TRUE)
  )
```

... and here to where the `wing` value is equal to the minimum wing length value:

```{r}
measures %>% 
  filter(
    wing == 
      min(wing, na.rm = TRUE)
  )
```

::: mysecret

{{< fa user-secret size=2x >}} [Remove NA values for summary statistics ...]{style="font-size: 1.25em; padding-left: 0.5em;"}

It is often necessary to include `na.rm = TRUE` when conducting statistical summaries. Otherwise, summaries of columns that contain missing values will return a value of [NA]{.mono}.
:::

### Filter with logical negation

Negation is a powerful tool for filtering. Using the `!=` operator, we can filter values that are NOT equal to the specified condition:

```{r}
birds %>% 
  filter(diet != "omnivore")
```

We can also use the logical negation operator itself, `!`, to negate a filtering statement:

```{r}
birds %>% 
  filter(!diet == "omnivore")
```

The above works, because the negation operator simply converts the logical value `TRUE` to `FALSE` and the logical value `FALSE` to `TRUE`. For example:

```{r}
!c(TRUE, FALSE)
```

### Filter [NA]{.mono} values

We sometimes want to remove **[NA]{.mono}** values (missing values) from a vector. Notice that the logical test below does not work:

```{r}
c(1, NA, 2) == NA
```

Instead, we test whether a value is [NA]{.mono} with the primitive `is.na` function:

```{r}
c(1, NA, 2) %>% 
  is.na()
```

*Notice that this function is a logical test of whether a given value is [NA]{.mono} -- since a logical test returns a value or `TRUE` or `FALSE`, it is unnecessary to supply relational operators.*

Below, I use `is.na()` and `filter()` to subset `measures` to where `tl` (tail length) values are [NA]{.mono}:

```{r}
measures %>% 
  filter(
    is.na(tl)
  )
```

We can filter to values that are not [NA]{.mono} using the negation operator, `!`:

```{r}
measures %>% 
  filter(
    !is.na(tl)
  )
```

We can use the *tidyr* (core tidyverse) function `drop_na()`, with no arguments, to remove all rows that contain an [NA]{.mono} in any variable (**use carefully!**):

```{r}
measures %>% 
  drop_na()
```

... we can also specify the variable of interest and remove only rows that contain an [NA]{.mono} for that variable:

```{r}
measures %>% 
  drop_na(tl)
```

### Filter by multiple conditions

When we want to filter based on whether a given value or values match multiple conditions, we can chain together sets of filtering statements:

```{r}
measures %>% 
  filter(wing > 80) %>% 
  filter(wing < 90)
```

... or *much more parsimoniously*, separate filtering statements with the logical operator `&`:

```{r}
measures %>% 
  filter(
    wing > 80 & 
      wing < 90
  )
```

... or, *even more parsimoniously*, simply separate the two filters with a comma:

```{r}
measures %>% 
  filter(
    wing > 80,
    wing < 90
  )
```

::: mysecret

{{< fa user-secret size=2x >}} [Sometimes chained filters are better ...]{style="font-size: 1.25em; padding-left: 0.5em;"}

While less parsimonious, chained filter statements can sometimes be less memory-intensive than using `&` or `,`. You will not recognize a difference until your data are *very* large (like millions of records).
:::

In the above, each of the conditions of the filter must be met. While that is often our goal, sometimes we want to filter the data to where either condition is met.

Let's see what happens when we try to filter the data to Gray catbird (GRCA) *AND* Northern cardinal (NOCA):

```{r}
birds %>% 
  filter(
    species == "GRCA",
    species == "NOCA"
  )
```

This returns no rows, because no species is both Gray catbird *and* Northern cardinal!

To address this, we can use the *or* operator, `|`:

```{r}
birds %>% 
  filter(
    species == "GRCA" | 
      species == "NOCA"
  )
```

... or, more parsimoniously, use the `%in%` operator. This will extract a value that is within a vector of provided values:

```{r}
birds %>% 
  filter(
    species %in% 
      c("GRCA", "NOCA")
  )
```

*Note: For a more in-depth discussion of the use of `%in%` versus `==`, see ["Preliminary lesson two: Values; Section 4. Logical values (4.2.4 Logic and sets)"](https://smbc.shinyapps.io/L1-rValues/#section-logical-values){target="_blank"}*

### Filter with a reference table

Tidy data can present a challenge when we need to use information across tables. To address this, we can `pull()` a variable of interest from a reference table and use that variable within our logical test.

For example, perhaps we want to look at the capture records for birds caught in 2018. The date of each capture event is stored in the `visits` table. The variable that connects the two tables is `visit_id`, which is the **primary key** of the `visits` table and a **foreign key** in the `captures` table.

We can use the *lubridate* (core tidyverse) function `year` to subset the visits table:

```{r}
visits %>% 
  filter(
    year(date) == 2018
  )
```

... we can use `pull()` to extract a vector of dates and assign a name to the vector in our global environment:

```{r}
visit_ids_2018 <-
  visits %>% 
  filter(
    year(date) == 2018
  ) %>% 
  pull(visit_id)
```

We can then subset `captures` to where values in the `visit_id` column are `%in%` the character vector named `visit_ids_2018`:

```{r}
captures %>% 
  filter(visit_id %in% visit_ids_2018)
```

:::{.now_you}
<button class="accordion">{{< fa user-circle size=2x >}}&nbsp; Subset the `birds` data frame to `species` that are *NOT* in the `captures` data frame (*Note: The foreign key in this table is `spp`*).

</button>
::: panel

```{r}
birds %>% 
  filter(!species %in% captures$spp)
```

:::

Please the give the above a try and then click the button to see how I answered this question!

:::

### Filter multiple variables

You can continue to add filtering statements using a single variable, or multiple variables. For example, we can filter by wing length and subset the data to where the species is Gray catbird (GRCA) with this chained analysis:

```{r}
measures %>% 
  filter(wing > 80) %>% 
  filter(wing < 90) %>% 
  filter(spp == "GRCA")
```

... or within a single function (*way more parsimonious*):

```{r}
measures %>% 
  filter(
    wing > 80,
    wing < 90,
    spp == "GRCA"
  )
```

### Subset to unique rows

Our final subsetting operation of this lesson is the function `distinct()`. Distinct is used to subset the data to unique rows -- in other words, any rows that are duplicates will be removed.

For example, we can subset our `measures` data to just the field `spp` with `select()` and then remove duplicate rows with `distinct()`:

```{r}
measures %>% 
  select(spp) %>% 
  distinct()
```

You can also avoid the `select` function altogether by specifying your columns of interest inside `distinct()`:

```{r}
measures %>% 
  distinct(spp)
```

We can then use `pull()` to extract a vector of data:

```{r}
measures %>% 
  distinct(spp) %>% 
  pull()
```

You can also specify multiple columns with `distinct()`, which can be super useful for finding errors in the data we manage. For example:

* *Only* males have a cloacal protuberance,
* For most of our species, males should not have a brood patch (BP) -- though the males of some species *may* have a BP. 
* All birds with a CP or BP should have a known sex. 

We can explore this using `distinct()`:

```{r}
captures %>% 
  drop_na(sex, bp_cp) %>% 
  distinct(sex, bp_cp) %>% 
  arrange(sex, bp_cp)
```

A quick look at the data with `distinct()` (and some helper functions) has revealed that there are errors in the data that must be fixed!

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Code section**:  A portion of an R script file that is delineated by a section header.
* **Core tidyverse package** or **Core tidyverse**: A subset of the *tidyverse* packages that are attached with `library(tidyverse)`.
* **Filter** (verb): Subset data by logical condition.
* **Foreign key**: A variable in a data frame that refers to the primary key of another data frame.
* **NA** (value): A missing data value in an atomic vector.
* **Primary key**: A variable in a data frame that is used to identify unique records.
* **Subset** (verb): The process of reducing the number of items in a list (including columns in a data frame!), rows in a data frame, or values in an atomic vector.

:::

<button class="accordion">Functions</button>
::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *dplyr*, *purrr*, *readr*, *tibble*, *tidyr*, and *tidyverse* are loaded with `library(tidyverse)`. The functions `rlang::set_names` and `tidyselect::everything` are also attached with `library(tidyverse)`.

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_3.2_subsetting.csv"
) %>% 
  read_csv() %>% 
kableExtra::kable(
  align = c("c", "c", "l")
) %>%
kableExtra::kable_styling(
  font_size = 12,
  bootstrap_options = "hover")
```

:::

:::


<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
| Indent code                 | Ctrl + I         | command + I
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
