---
title: "3.1 Introduction to mutation"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

```{r setup, include=FALSE}
library(tidyverse)
library(DT)

knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  error = TRUE)

rm(has_annotations)
```

<hr>

<div>
![](../../images/hex_complex.png){.intro_image}

**Mutation** describes the process of adding columns to a data frame and/or modifying existing columns (or adding/modifying list items to/in a list). This lesson includes a video introduction to mutation and a written tutorial that reviews and adds to the video content. In completing this lesson, you will learn how to:

* Modify a single column or multiple columns with `mutate()`
* Set values to [NA]{.mono}
* Set [NA]{.mono} values to a different value
* Modify some columns while removing others with `transmute()`

**Note**: I teach the function `transmute` in this lesson. While useful, this function has been **superseded**. Superseded functions are those for which there is a better alternative function or argument that has been developed. The functions will not receive new features but will still receive bug fixes. Please see the Posit team's description of a function's [Lifecycle stages](https://lifecycle.r-lib.org/articles/stages.html#:~:text=can%20fix%20it.-,Superseded,you%20what%20we%20recommend%20instead%20.){target="_blank"} for more information.

**Important!** Before starting this tutorial, be sure that you have completed all preliminary and  previous lessons.

</div>

## Data for this lesson

Please click on the buttons below to explore the metadata for this lesson!

<button class="accordion">Metadata: Video lesson</button>
::: panel
In the video portion of this lesson, we will explore the [*.rds]{.mono} file [weather_tidy.rds]{.mono}. The data are formatted as a list object comprised of the following tibble data frames and variables:

[stations]{.mono}

* [station]{.mono}, character: The **primary key** for each weather station -- recall that a primary key is a unique identifier for a row (i.e., observation) in a data frame.
* [longitude]{.mono}, numeric: The longitudinal coordinates of a weather station, in decimal degrees.
* [latitude]{.mono}, numeric: The latitudinal coordinates of a weather station, in decimal degrees.
* [elevation]{.mono}, numeric: The elevation of a weather station, in meters above sea level.
* [state]{.mono}, character: The state where a weather station is located
* [name]{.mono}, character: The name of a weather station

[observations]{.mono}

* [station]{.mono}, character: The **foreign key** key to each weather station -- recall that a foreign key is a variable that refers to the primary key of another data frame.
* [date]{.mono}, character: The date of an observation. Note that the [station]{.mono} and [date]{.mono} columns comprise the **compound key** for this table -- a compound key is a set of variables in a data frame that, combined, represent the primary key of the data frame.
* [precip]{.mono}, character: The daily precipitation at a weather station, in millimeters.
* [snow]{.mono}, character: The daily snowfall at a weather station, in millimeters.
* [temperature_min]{.mono}, character: The daily minimum temperature ($^\circ$C) at a weather station.
* [temperature_max]{.mono}, character: The daily maximum temperature ($^\circ$C) at a weather station.
:::

<button class="accordion">Metadata: Written tutorial</button>
::: panel
In the written portion of this lesson, we will explore the file [district_birds.rds]{.mono}. This is a tidy dataset that contains a subset of records from the Smithsonian Migratory Bird Center's participatory science project, [Neighborhood Nestwatch](https://nationalzoo.si.edu/migratory-birds/neighborhood-nestwatch). The data are a list file and we will use the `captures` list item (a tibble data frame). The tibble includes the following variables:

* [capture_id]{.mono}, character: The primary key for a unique capture record.
* [visit_id]{.mono}, character: A foreign key to a table that describes when and where a visit occurred (the [visits]{.mono} table).
* [band_number]{.mono}, character: The numbers assigned to an aluminum band that has been placed on a bird.
* [color_combo]{.mono}, character: The combination of aluminum and color bands placed on a bird
* [spp]{.mono}, character: A species code that acts as a foreign key to the [birds]{.mono} table.
* [sex]{.mono}, character: A code representing the sex of a bird, where: "F" is female, "M" is male, "U" is unknown, and [NA]{.mono} represents missing data.
* [age]{.mono}, character: A code representing the age of a bird, where: "AHY" is an adult, "ASY" is an adult that is more than two years old, "HY" is a juvenile, "L" is a nestling, "SY" is two years old, and "U" is unknown.
* [wing]{.mono}, numeric: The length of a bird's wing (unflattened wing chord), in millimeters.
* [tl]{.mono}, numeric: The length of a bird's tail, in millimeters.
* [mass]{.mono}, numeric: The weight of a bird, in grams.
* [bp_cp]{.mono}, character: The breeding condition of a bird, where: "-" stands for a bird that is not in breeding condition, "BP" is a brood patch, "CP" is a cloacal protuberance, "U" is unknown, and [NA]{.mono} represents missing data.
* [fat]{.mono}, character: The fat measured on a bird, that ranges from "0" for no fat, "T" for trace fat, and up to "5" for the maximum amount of fat. [NA]{.mono} values represent missing data.
:::

## Introductory video

In this lesson, you will code along with the script file [working_with_tidy_data.R]{.mono} -- this file should be located in the [scripts]{.mono} folder of your project directory. 

Before you begin, some notes on the video content:

* I unfortunately use phrases like "*assign the object to the global environment*" and "*retrieve the objects from the global environment*". Remember that the global environment only contains names, *not* objects. When we run a name, R looks in our global environment for that name and then uses that name to retrieve an object from our computer's memory.
* I refer to *names* often as "bindings" and "keys" -- this is technically correct, but might be confusing. Note that both of these terms are synonymous with "name".
* I do not conform to the course style guide in this video!
* Your [working_with_tidy_data.R]{.mono} file may look slightly different than the one used in the video tutorial. Your version of the file has been updated to adhere to the course style guide.
    
{{< video https://www.youtube.com/embed/x5OJa705Gcg?si=mGFvAa3O8_i9givP >}}

## Set up your session (tutorial)

**Important!** Before continuing, please save and close [working_with_tidy_data.R]{.mono}.

Please do the following to ensure that you are working in a clean session:

1. In the *Environment* tab of your *workspace pane*, ensure that your *Global Environment* is empty. If it is not, click the *broom* to remove all objects. *Note: Conversely, you can remove all items with `rm(list = ls())`*.
2. In the *History* tab of your *workspace pane*, ensure that your history is empty. If it is not, click the *broom* to remove your history.

Now that we are working in a clean session:

1. Create a script file (Windows: [Ctrl + Shift + N]{.mono}; Mac: [Cmd + Shift + N]{.mono}).
2. Save your script file as "[scripts/mutate_written_content.R]{.mono}".
3. Add metadata as a comment on the top of the file (e.g., `# My code for the mutation tutorial`).
4. Following your metadata, create a new **code section** (Windows: [Ctrl + Shift + R]{.mono}; Mac: [Cmd + Shift + R]{.mono}) and call it "`setup`".
5. Following your section header, attach packages that comprise the **core tidyverse** (`library(tidyverse)`)

At this point, your script should look something like:

```{r eval = FALSE}
# My code for the mutation tutorial

# setup --------------------------------------------------------

library(tidyverse)
```

Now we are going to add our data for this lesson ... let's do it as a "Now you!" challenge:

:::{.now_you}
<button class="accordion">{{< fa user-circle size=2x >}}&nbsp; In a single piped statement:

* Read in the list [district_birds.rds]{.mono};
* Subset the list to just the data associated with the name `captures`;
* Subset `captures` to the columns `spp`, `sex`, `age`, `wing`, `tl`, `mass`, `bp_cp`, and `fat`;
* Assign the resultant object to your global environment with the name `measures`.
</button>
::: panel

```{r}
# Read in the data and subset to the list item and variables of
# interest:

measures <-
  read_rds("data/raw/district_birds.rds")$captures %>% 
  select(spp:fat)
  
# Or:

measures <-
  read_rds("data/raw/district_birds.rds")$captures %>% 
  select(!capture_id:color_combo)

# Or:

measures <-
  read_rds("data/raw/district_birds.rds") %>% 
  .$captures %>% 
  select(spp:fat)

# Or:

measures <-
  read_rds("data/raw/district_birds.rds") %>% 
  .$captures %>% 
  select(!capture_id:color_combo)
```

:::
Please the give the above a try and then click the button to see how I answered this question!
:::

## Add or modify a column

The `mutate` function can be used to modify an existing column or columns in a data frame or add new columns. 

For example, a commonly used measure of avian body condition is the ratio of a bird's weight to the length of its wing. Below, I calculate the ratio between the `mass` and `wing` of each observation in `measures` and assign the data to a new column named `mass_wing`:

```{r}
measures %>% 
  mutate(mass_wing = mass / wing)
```

It might seem obvious, but `mutate()` divided the values in the `mass` column by the values in the `wing` column. Let's have a look at what that means though. Both columns are a vector of the same length. In R, when you divide one vector by another, the calculation is conducted *by position*. You can verify this with the following calculation:

```{r}
1:2 / 4:5
```

In the above, the value 1 is divided by 4 and 2 is divided by 5.

::: mysecret

{{< fa screwdriver-wrench size=2x >}} [A peak under the hood!]{style="font-size: 1.25em; padding-left: 0.5em;"}

A *huge* difference between tidyverse functions and those in base R is that the names of a parent object's children are passed to the function. 

For example, the following two statements are equivalent (but the version without the `$` function is much more parsimonious!):

```{r, eval = FALSE}


measures %>% 
  mutate(mass_wing = mass / wing)

measures %>% 
  mutate(mass_wing = .$mass / .$wing)
```

:::

I should note that assigning a variable name is not necessary, but is important because we can end up with some ugly (and difficult to use) column names without it:

```{r}
measures %>% 
  mutate(mass / wing)
```

Naming is also an important consideration when you want to modify an existing column. For example, perhaps we want to change the unit of `mass` from grams to ounces (1 gram is ~0.0353 ounces). Notice what happens if we do not add a new column name:

```{r}
measures %>% 
  mutate(mass * 0.0353)
```

If we wish to modify `mass` in place, we should assign the new vector to the name assigned to the original vector:

```{r}
measures %>% 
  mutate(mass = mass * 0.0353)
```

We can also use mutate to add new data to the data frame. The only rule is that the added vector (i.e., column) must be either a length of 1 or the same length as the data frame. 

For example, let's add an `id`, which will basically just be the row number (*Note: This doesn't make a good **primary key** though!*) 

```{r, error = TRUE}
measures %>% 
  mutate(
    id = 1:nrow(.)
  )
```

I like to use the *dplyr* function `row_number()` for this task. This function generates a sequence of integer values from 1 to the number of rows in a data frame:

```{r}
measures %>% 
  mutate(
    id = row_number()
  )
```

We can specify the location of our new column using the `.before = ...` argument of mutate (see `?mutate` for more options):

```{r}
measures %>% 
  mutate(
    id = row_number(),
    .before = spp
  )
```

::: mysecret

{{< fa user-secret size=2x >}} [But do not use row numbers as a primary key!]{style="font-size: 1.25em; padding-left: 0.5em;"}

Row numbers should rarely (if ever) be used as primary key values. I use it during R sessions in a pinch and never save datasets to my hard drive with row number as a variable. We will learn more about what makes a good primary key in a future lesson.
:::

## Mutate multiple columns

We often want to modify or add multiple columns in a single step. For example, perhaps we want to change the unit of wing measurement from millimeters to centimeters (1 cm = 10 mm) *and* the unit of mass measurement from grams to ounces (1 gram is ~0.0353 ounces). We *could* chain together multiple `mutate()` statements:

```{r}
measures %>% 
  mutate(wing = wing / 10) %>% 
  mutate(mass = mass * 0.0353)
```

Instead, however, it is more parsimonious to conduct the mutate operations within the same `mutate()` statement. We simply separate each mutate argument with a comma:

```{r}
measures %>% 
  mutate(
    wing = wing / 10,
    mass = mass * 0.0353
  )
```

If a given mutation is dependent on another operation inside the mutate function, you have to be careful regarding the order of operations. For example, perhaps we want to calculate the ratio of `mass` by `wing` length, with wing length in centimeters and mass in ounces. We *could* conduct the calculation with a new `mutate()` call:

```{r}
measures %>% 
  mutate(
    wing = wing / 10,
    mass = mass * 0.0353
  ) %>% 
  mutate(mass_wing = mass / wing)
```

Or, more parsimoniously, within the *same* mutate call (but *after* the unit conversion):

```{r}
measures %>% 
  mutate(
    wing = wing / 10,
    mass = mass * 0.0353,
    mass_wing = mass / wing
  )
```

The resultant `mass_wing` value is correct. However, the resultant value would be incorrect if we placed the `wing / mass` mutation *before* our unit conversion:

```{r}
measures %>% 
  mutate(
    wing_mass = wing / mass,
    wing = wing / 10,
    mass = mass * 0.0353
  )
```

The above is incorrect because the arguments inside `mutate()` are evaluated in order!

## Special case: [NA]{.mono} values

An **[NA]{.mono} **value represents missing data -- such values may be inappropriate if the data are not actually missing. For example, in the `captures` data frame, the column `bp_cp` represents the breeding condition of a bird. "BP" stands for brood patch, a measure of female breeding condition. "CP" stands for cloacal protuberance, a measure of male breeding condition. If a bird does not have a BP or CP, the bird is not in breeding condition. This variable was measured each time a bird was in the hand but was often not recorded when a bird was not in breeding condition. 

Let's look at the distribution of values associated with this with the `table()` function (see `?table`):

```{r}
measures %>% 
  .$bp_cp %>% 
  table(useNA = "always")
```

We see that, in this dataset, there are 5,965 [NA]{.mono} values! Given that this variable was measured during each capture event, this is a problem. In talking with the field manager of the project, I discovered that field biologists were initially told to record BP and CP only if they saw an indication of breeding condition. Later they were told to enter a dash ("-") if there was no indication. Given that they measured this variable upon every capture, those [NA]{.mono} values should actually be "-"!

#### Replace [NA]{.mono}

We can replace [NA]{.mono} values with the *tidyr* function `replace_na()`. Working inside of `mutate()`, we:

* Assign the name of the column we would like to modify;
* Add the function `replace_na()`;
* Supply the name assigned to the target vector as the first argument of `replace_na()`
* Supply the value to replace [NA]{.mono} values with as the second argument of `replace_na()`. 

```{r}
measures %>% 
  mutate(
    bp_cp = 
      replace_na(bp_cp, "-")
  )
```

Below, after our mutation, I extract the column of interest with `.$` and use `table()` again so that we can really see the results:

```{r}
measures %>% 
  mutate(
    bp_cp = 
      replace_na(bp_cp, "-")
  ) %>% 
  .$bp_cp %>% 
  table(useNA = "always")
```

#### Convert to [NA]{.mono}

It is often necessary to convert a value *to* [NA]{.mono}. The value "U" in the variable `bp_cp` represents "unknown". This value was recorded when the breeding condition of a bird was not measured (for example, the bird escaped before the measurement was taken). As such, the value "U" truly *should be* [NA]{.mono}. Let's look again at the original distribution of `bp_cp`:

```{r}
measures %>% 
  .$bp_cp %>% 
  table(useNA = "always")
```

We can use the *dplyr* function `na_if()` to convert a value to [NA]{.mono}. Working inside of `mutate()`, we:

* Assign the name of the column we would like to modify;
* Add the function `na_if()`;
* Supply the name assigned to the target vector as the first argument of `na_if()`
* Supply the value to replace with [NA]{.mono} as the second argument of `na_if()`.

```{r}
measures %>% 
  mutate(
    bp_cp = 
      na_if(bp_cp, "U")
  ) %>% 
  .$bp_cp %>% 
  table(useNA = "always")
```

What if we wanted to convert [NA]{.mono} values to `-` and "U" to [NA]{.mono}? This is a situation in which the order of operations is important!

We *could* pipe the mutate statements together:

```{r}
measures %>% 
  mutate(
    bp_cp = 
      replace_na(bp_cp, "-")
  ) %>% 
  mutate(
    bp_cp = na_if(bp_cp, "U")
  ) %>% 
  .$bp_cp %>% 
  table(useNA = "always")
```

... but, because variables in a mutate statement are evaluated in order, we can conduct both operations inside of the same `mutate()` function:

```{r}
measures %>% 
  mutate(
    bp_cp = 
      replace_na(bp_cp, "-"),
    bp_cp = 
      na_if(bp_cp, "U")
  ) %>% 
  .$bp_cp %>% 
  table(useNA = "always")
```

::: mysecret

{{< fa user-secret size=2x >}} [You can pipe inside of `mutate()` too!]{style="font-size: 1.25em; padding-left: 0.5em;"}

Notice that the first assigned `bp_cp` is a reference to the data generated with `replace_na(bp_cp, "-")`. Such intermediate assignments are not necessary. 
We *could* avoid the intermediate assignment by nesting the operation:

```{r, eval = FALSE}
measures %>% 
  mutate(
    bp_cp = 
      na_if(
        replace_na(bp_cp, "-"),
        "U"
      )
  )
```

... but I find the above *very* hard to read (even though the operation is only nested two levels deep).

A (great) alternative is to chain the `replace_na()` and `na_if()` functions together with a pipe:

```{r, eval = FALSE}
measures %>% 
  mutate(
    bp_cp = 
      replace_na(bp_cp, "-") %>% 
      na_if("U")
  )
```

Notice in the above that the output of `replace_na(bp_cp, "-")` is passed to the first argument of `na_if()`. I like to make the process even more clear by piping from the original data:

```{r, eval = FALSE}
measures %>% 
  mutate(
    bp_cp =
      bp_cp %>% 
      replace_na("-") %>% 
      na_if("U")
  )
```

:::

### Add & subset columns

The `transmute` function works similarly to mutate, but allows us to add and subset columns in a data frame in one step.

Let's see what happens when we use `transmute` with our `mass_wing` calculation.

```{r}
measures %>% 
  transmute(mass_wing = mass / wing)
```

This dropped all of the other columns!

What if we wanted to do the equivalent of the below, where we conduct our mutate and then subset the columns to species and `mass_wing`?

```{r}
measures %>% 
  mutate(mass_wing = mass / wing) %>% 
  select(spp, mass_wing)
```

To do this with `transmute()`, we can simply add `spp` as an additional column:

```{r}
measures %>% 
  transmute(
    spp,
    mass_wing = mass / wing
  )
```

We can also rename the column in the same step:

```{r}
measures %>% 
  transmute(
    species = spp,
    mass_wing = mass / wing
  )
```

<div class = 'mysecret'>
<i class="fas fa-user-secret" style='font-size:36px'></i>&nbsp;&nbsp;</i> 
The `transmute` function is pretty much just a combination of `mutate()` and `select()`. The decision of when to use `transmute()` vs. `mutate()` should be determined by code parsimony and the ability of your code to communicate the steps taken during data processing. Although the function has been superseded, I still use it often!
</div>

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Code section**:  A portion of an R script file that is delineated by a section header.
* **Compound key** (or compound primary key): A set of variables in a data frame that, combined, represent the primary key of a table.
* **Core tidyverse package** or **Core tidyverse**: A subset of the *tidyverse* packages that are attached with `library(tidyverse)`.
* **Foreign key**: A variable in a data frame that refers to the primary key of another data frame.
* **Mutation**: The process of adding columns to a data frame and/or modifying existing columns (or adding/modifying list items to/in a list).
* **NA** (value): A missing data value in an atomic vector.
* **Primary key**: A variable in a data frame that is used to identify unique records.
* **Superseded** (function): A function for which a new function or argument has been added to a package (these functions should typically be avoided).

:::

<button class="accordion">Functions</button>
::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *dplyr*, *readr*, *tibble*, *tidyr*, and *tidyverse* are loaded with `library(tidyverse)`.

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_2.4_mutation.csv"
) %>% 
  read_csv() %>% 
kableExtra::kable(
  align = c("c", "c", "l")
) %>%
kableExtra::kable_styling(
  font_size = 12,
  bootstrap_options = "hover")
```

:::

:::


<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
