---
title: "Module 3: Working with tidy data"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: false
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<hr>

<div>

![](../../images/hex_complex.png){.intro_image}

Welcome to **Module 3: Working with tidy data**! This set of lessons introduces the primary functions that we will use for working with data frames (especially tidy data frames). We have covered *some* of these functions already, but I include them again here to help you build a mental model of when to use a given function for a given task. You will learn:

-   How to add and modify columns;
-   A variety of methods for subsetting data;
-   The process of summarizing data;
-   How to join data between data frames.

Before continuing, please be sure that you have completed all of the preliminary course content (Preliminary lessons 1-4) and all of the content from Modules 1 and 2.

</div>

## Module overview

In this set of lessons, I try to organize a variety of data frame operations into common applications. A word of warning as we proceed -- we are starting to accumulate a lot of functions! As you learn a new function, or a new argument for a function that you have already learned, I *strongly* suggest taking time to develop your own mental model for organizing these functions (I do not presume that my organizational system fits all learners). This module is divided into the following sections:

-   **3.1 Introduction to mutation**: Mutation is the process of adding columns to a data frame or modifying an existing column. In this tutorial, that includes a video (runtime: 16:51), you will learn the basics of mutation with dplyr functions.
-   **3.2 Introduction to subsetting**: In this video (runtime: 21:11) and written tutorial, you will learn a variety of dplyr methods for subsetting columns and rows by position, name, and logic.  
-   **3.3 Introduction to summarizing**: In this video (runtime: 22:39) and written tutorial, we will cover summarize() – an amazing tool for exploring and communicating data! This dplyr function performs mutate(), select(), and distinct() in a single step – we will use summarize() a lot in this course!
-   **3.4 Introduction to joining data frames**:  Joining data gives us the power to apply database like techniques when referencing data stored in multiple data frames. In this lesson, that includes a video (from my GIS in R course; runtime: 28:57), you will learn the basics of joining data with *dplyr*.
-   **3.5 Course style guide, part 3**: The complete set of code formatting rules that I ask you to follow in the course. The provided rules are closely aligned with the [tidyverse style guide](https://style.tidyverse.org/){target="_blank"}.

Lessons 3.1-3.4 above are provided as video and written content. The written material predominantly provides you with additional practice/examples, but also highlights recent changes in the tidyverse and some elements of the content that you may have missed while coding along.

## Getting started

Please download the attached zip file [module_3_files.zip]{.mono} and:

* Place any R script files ([*.R]{.mono}) in the [data_sci/scripts]{.mono} folder. If there are any script files you already have, please overwrite the previous file.
* Place any data files ([*.csv]{.mono} and [*.rds]{.mono}) in the correct folder. If there are any data files you already have, please overwrite the previous file.
    * Place the following data files in the folder [data/raw]{.mono}:
        * [district_birds.rds]{.mono}
        * [messy_birds.rds]{.mono}
        * [spotted_lanternfly.rds]{.mono}
    * Place [weather_tidy.rds]{.mono} in the folder [data/processed]{.mono}.

## About this week's data

This week we will use the following data files in our exercises:

**[district_birds.rds]{.mono}**: This is a tidy dataset that contains a subset of records from the Smithsonian Migratory Bird Center's [Neighborhood Nestwatch](https://nationalzoo.si.edu/migratory-birds/neighborhood-nestwatch) (NN) program. NN is a community science project where scientists visits backyards, neighborhoods, and schools to conduct bird banding demonstrations and sample bird populations. The data include tables for sites, visits, point counts, and capture events, and a table that provides natural history information for observed birds. Geographic coordinate values have been jittered to protect the privacy of NN participants.

**[messy_birds.rds]{.mono}**: This is an intentionally messy version of a subset of the Neighborhood Nestwatch data in `district_birds.rds`. 

**[spotted_lanternfly.rds]{.mono}**: This is a tabular dataset of iNaturalist observations of spotted lanternfly (*Lycorma delicatula*), an invasive pest species whose spread is of commercial and ecological concern. Each row is an observation submitted by a community science participant via a web or smartphone application. I downloaded these data using the *rinat* package in R.

**[weather_tidy.rds]{.mono}**: The data were collected from 2010-2020 at five NOAA weather stations located in California, North Carolina, New York, and Wisconsin. The file contains measures of precipitation, snow, and temperatures during the month of March.

## Readings and resources

<button class="accordion" style="margin-bottom:1em">Glossary of terms (I am a button ... click me!)</button>

::: panel
::: glossary_table

```{r, message = FALSE, echo = FALSE}
library(tidyverse)

file.path(
  here::here(),
  "dev_scripts/glossary/glossary_source.R"
) %>% 
  source()

get_glossary_table_module(module = 3) %>%
  kableExtra::kable(
    align = c("l", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```
:::
:::

<button class="accordion" style="margin-bottom:1em">Functions used through the end of this module (I am a button ... click me!)</button>

::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *ggplot*, *tibble*, and *tidyr* are loaded with `library(tidyverse)`. Although the *magrittr* package is not a part of the core tidyverse, the `%>%` function is imported by the *dplyr* (core tidyverse) library.

::: function_table

```{r, message = FALSE, echo = FALSE}
library(tidyverse)

file.path(
  "function_tables",
  "functions_through_module_3.csv"
) %>% 
  read_csv() %>% 
  kableExtra::kable(
    align = c("c", "c", "l", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```

:::
:::


-   Wickham & Grolemund:

    -   [5.1-5.5: Data transformation](https://r4ds.had.co.nz/transform.html#transform){target="_blank"}
    -   [5.6 Groups summaries](https://r4ds.had.co.nz/transform.html?q=group#grouped-summaries-with-summarise){target="_blank"}
    -   [12.1-12.5: Tidy data](https://r4ds.had.co.nz/tidy-data.html){target="_blank"}
    -   [13: Relational data](https://r4ds.had.co.nz/relational-data.html){target="_blank"}

-   [Wickham, H. 2014. Tidy data. *Journal of Statistical Software* 59: 1-23.](https://vita.had.co.nz/papers/tidy-data.pdf)

-   **Cheat sheets:** I *strongly* recommend printing the cheat sheets to have a handy reference to tidyverse functions and how they are used!

    -   [Data tidying (tidyr)](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf){target="_blank"}
    -   [Data transformation (dplyr)](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf){target="_blank"}
    
<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}
</script>
