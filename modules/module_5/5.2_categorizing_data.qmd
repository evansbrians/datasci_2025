---
title: "5.2 Categorizing data"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
editor_options: 
  chunk_output_type: console
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

```{r setup, include=FALSE}
library(tidyverse)

knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  error = TRUE)

rm(has_annotations)
```

<hr>

<div>
![](../../images/hex_complex.png){.intro_image}

Classifying and reclassifying objects is a common task associated with cleaning, exploring, and preparing data for analysis or visualization. If we are not careful, we can generate errors in our data during this process -- such errors can drastically change the interpretation of our analyses. For example, I often ask for the raw data and code used to process those data when peer-reviewing manuscripts. I have sent several manuscripts back because the authors' results were based on an error in how they did their data classification! The process of finding and fixing classification errors, and the classification process itself, can be *super* time-consuming. In this video lesson (runtime -- 28:05) and written tutorial, you will learn how to use tidyverse tools that will save you an incredible amount of time and greatly improve the integrity of your data. Specifically, you will learn how to:

* Classify numeric vectors with base R's `cut()`;
* Use *dplyr* to classify or reclassify values into two (`if_else()`) or more (`case_when()`) classes;
* Use *stringr* (`str_replace()`) and regex to clean, classify, and reclassify character vectors.

**Important!** Before starting this tutorial, be sure that you have completed all preliminary and previous lessons!

</div>


## Data for this lesson

<button class="accordion">Please click this button to explore the metadata for this lesson!
</button>
::: panel
In this lesson, we will explore the file [birds_cicadas_lc.rds]{.mono}. The data are formatted as a list of the following tibble data frames:

**[birds]{.mono}**: This is a point shapefile that represents sick birds that were brought to City Wildlife, a wildlife rehabilitation center in the District of Columbia, in the spring of 2021. These data were obtained directly from City Wildlife staff. Location information for birds brought into the center were obtained by Brian through geocoding addresses via the Google Maps API with the R package *ggmap*. Relevant variables include:

* [patient_id]{.mono}, character: The **primary key** for each patient, assigned to bird upon intake.
* [admission_date]{.mono}, date: The date that a bird was brought to City Wildlife.
* [common_name]{.mono}, character: The common name for the species of bird. 
* [age]{.mono}, character: The age of a given bird. 
* [attitude]{.mono}, character: Behavioral observations of a given bird upon intake.
* [canopy]{.mono}, numeric: The proportion of canopy cover at the location where a bird was found. 
* [imp]{.mono}, numeric: The proportion of impervious surface (e.g., pavement, rooftops) at the location where a bird was found. 
* [nlcd]{.mono}, numeric: The dominant land cover class at the location where a bird was found.

**[cicadas]{.mono}**: iNaturalist observations of Brood X cicadas in 2021.

* [datetime]{.mono}, datetime: The date and time that a cicada was observed.
* [canopy]{.mono}, numeric: The proportion of canopy cover at the location where a cicada was observed. 
* [imp]{.mono}, numeric: The proportion of impervious surface (e.g., pavement, rooftops) at the location where a cicada was observed. 
* [nlcd]{.mono}, numeric: The dominant land cover class at the location where a cicada was observed.

**[bad_coords]{.mono}**: Coordinates of birds that were brought to the wildlife rehabilitation center. Brian intentionally messied these data to prove a point!

* [id]{.mono}, character: The **primary key** for each patient, assigned to bird upon intake.
* [longitude]{.mono}, numeric: The longitudinal coordinate of where a bird was found... note that longitudes in the Western Hemisphere should always be negative!
* [latitude]{.mono}, numeric: The latitudinal coordinate of where a bird was found... note that latitudes in the Northern Hemisphere should always be positive!

**[nlcd_key]{.mono}**: A key to the [Multi-Resolution Land Characteristics (MRLC) Consortium](https://www.mrlc.gov/){target="_blank"} land cover classes. Variables include:

* [id]{.mono}, numeric: The value assigned to each land cover class.
* [name]{.mono}, character: A name assigned to each land cover class.
* [color_value]{.mono}, character: The recommended color to use for each land cover class.
* [description]{.mono}, character: A description of the type of land cover that each land cover class represents.

:::

## Set up your video session

Please do the following to ensure that you are working in a clean session:

1. In the *Environment* tab of your *workspace pane*, ensure that your *Global Environment* is empty. If it is not, click the *broom* to remove all objects. *Note: Conversely, you can remove all items with `rm(list = ls())`*.
2. In the *History* tab of your *workspace pane*, ensure that your history is empty. If it is not, click the *broom* to remove your history.
3. Open the script file [categorize.R]{.mono} (Windows: [Ctrl + O]{.mono}; Mac: [Cmd + O]{.mono}).

## Video content

Notes: 

* You will see me complain about my usage of hanging parentheses ... but that is now my preference!
* Your script will not exactly match my video script. Wherever possible, I have modified the script to adhere to the course style guide (e.g., indentation) and replaced single quotes with double quotes.
* I talk about error messages that you will receive with [NA]{.values} in `if_else()` and `case_when()` ... this no longer produced an error (as of early 2023)!

{{< video https://www.youtube.com/embed/r9k-GdyiH4U >}}

## Written tutorial

In this written portion of the tutorial, we will again attach the core packages in the tidyverse to our current session and:

* Read in [data/processed/birds_cicadas_lc.rds]{.mono};
* Extract the list item assigned to the name `cicadas` with `pluck()`;
* Globally assign the object to the name `cicadas`.

```{r}
# R script for the categorize compendium

# setup -------------------------------------------------------------------

library(tidyverse)

# Read in the data for this lesson:

cicadas <-
  read_rds("data/processed/birds_cicadas_lc.rds") %>% 
  pluck("cicadas")
```

Let's also create a toy tibble data frame to help us in our exploration. We will:

* Create a variable named `numbers` that contains values ranging from 0 to 100 in increments of 10;
* Create a variable named `fruit` that contains the first 11 values from the sample vector `fruit` that is included in the *stringr* package (see `?fruit`);
* Globally assign the resultant object to the name `example_df`.

```{r}
# Run the following to create an example data frame that we will use:

example_df <-
  tibble(
    numbers = 
      seq(
        0,
        100, 
        by = 10
      ),
    fruit = fruit[1:11]
  )
```

### Numeric to factor with `cut()`

The base R function `cut()` can help us convert a numeric variable into an **ordinal factor**. Ordinal factors are variables that clearly represent ordered levels (e.g., "small" and "big"; "low", "medium", and "high"). I personally find `cut()` to be a bit painful, but I believe that it is worthwhile to understand how to use it.

To see how this works, let's start with a tibble with a single column that contains integer values 1 through 5:

```{r}
tibble(x = 1:5)
```

We will add a new column to the above data frame with `mutate()` and `cut()`. The two required arguments of cut are:

* The variable that will be classified (the first argument);
* A vector of breaks upon which to base the classification (these can be thought of as **boundary values** -- or "boundaries" that define the minimum and maximum values of a group).

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      cut(
        x,
        breaks = c(1, 3, 5)
      )
  )
```

The above produced a factor, but what the heck does it mean? Notice that the first value in our resultant vector was `NA`, the values `2` and `3` were evaluated to the factor level `(1,3]` and the values `4` and `5` were evaluated to the factor level `(3,5]`. An unfortunate aspect of cut is the potentially confusing notation of our output. The table below may help:

:::{style="background-color: white; font-size: 14px;"}

|Notation | x              | y              | Description
|:-------:|:--------------:|:--------------:|:---------------------------|
| (x, y]  | > x   (open)   | <= y (closed)  | Classes do not include the lower break value, but do include the upper break value
| [x, y)  | >= x  (closed) | < y  (open)    | Classes include the lower break value, but do not include the upper break value
| [x, y]  | >- x (closed)  | <= y  (closed) | Classes include both the lower and upper break values

:::

To understand this, it is useful to understand what is meant by "open" and "closed" boundaries:

* An **open boundary** does not include the boundary value and is signified with `(` for a lower open boundary and `)` for an upper open boundary. 
* A **closed boundary** includes the boundary value and is signified with `[` for a lower closed boundary and `]` for an upper closed boundary.

So, matching the descriptions of the overly-dense notation with our output above, we can see that:

* The value `1` evaluated to `NA` because the first factor level is defined as values greater than `1` (the lower boundary is defined as "open");
* The value `3` belongs to the first class `(1,3]` because that class includes the value `3` and the upper boundary is defined as "closed";
* The value `5` is included in the class `(3, 5]` because that upper boundary is "closed".

Confused yet? If so, it is going to get worse before it gets better. This behavior can be modified with two arguments of `cut()`, `include_lowest = ...` and `right = ...`. By default, these arguments are `include.lowest = FALSE` and `right = TRUE`.

The easier of the two is `right = ...`, so we will start there. If `right = TRUE`, the default, this means that the interval is open on the left (lower boundary) and closed on the right (upper) boundary. This is the default behavior and is why our resultant classes were noted as `(x,y]`. 

Conversely, if `right = FALSE`, the interval is closed on the left and open on the right.  Let's specify `right = FALSE` and see what happens:

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      cut(
        x,
        breaks = c(1, 3, 5),
        right = FALSE
      )
  )
```

Now, our lower boundary value, `1`, is included within the first class `[1,3)`, because the interval is closed on the left. The value `3` is included within the closed boundary value of the second class. The value `5` is now `NA` because the upper boundary is open.

Let's now tackle the `include.lowest = ...` argument. This is where things are going to get *really* annoying:

If `include.lowest = FALSE` (the default) and `right = TRUE` (the default), then the lowest boundary value is not included in either class:

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      cut(
        x,
        breaks = c(1, 3, 5),
        include.lowest = FALSE,
        right = TRUE
      )
  )
```

If `include.lowest = FALSE` (the default) and `right = FALSE`, then the highest boundary value is not included in either class:

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      cut(
        x,
        breaks = c(1, 3, 5),
        include.lowest = FALSE,
        right = FALSE
      )
  )
```

If `include.lowest = TRUE` and `right = TRUE`, then the lowest boundary value is included in the first class, but not the second class:

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      cut(
        x,
        breaks = c(1, 3, 5),
        include.lowest = TRUE,
        right = TRUE
      )
  )
```

Finally, if `include.lowest = TRUE` and `right = FALSE`, then the highest boundary value is included in the second class, but not the first class.

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      cut(
        x,
        breaks = c(1, 3, 5),
        include.lowest = TRUE,
        right = FALSE
      )
  )
```

We are through with the tough stuff (*Phew! That was hell!* ), so let's get to the fun part. Once we have our classes, we can use the `labels = ...` argument and a character vector of labels to assign to our classes:

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      cut(
        x,
        breaks = c(1, 3, 5),
        labels = c("little", "big"),
        include.lowest = TRUE,
        right = FALSE
      )
  )
```

Now that is a result I can wrap my brain around!

::: mysecret

{{< fa user-secret size=2x >}} [`cut()`? What a @&#*ing loathsome function!]{style="font-size: 1.25em; padding-left: 0.5em;"}

I do use this function a lot, but mainly just to test the boundary behavior of classified ordinal values when I am forced by a package to use base R-style functions (e.g., the *terra* package). The decision of which combination of `include.lowest = ...` and `right = ...` depends on where you wish to split your categories. Because the behavior of these functions (and the help file, see `?cut`) is so obtuse, I *strongly* recommend generating toy data and observing how your classes behave at the boundaries *before* applying this to real data!

::: 

#### `cut()`, applied

If you are still with me, let's use `cut()` to classify our impervious surface data (`imp`) into "rural", "suburban", and "urban", and count the number of cicada observations in each class. We will classify these data such that values:

* Below 10% impervious surface are classified as "rural";
* Ranging from 10 to <40% impervious surface are classified as "suburban";
* Greater than or equal to 40% impervious surface are classified as "urban".

Before I apply the above to real data, I like to generate a toy data frame with which to test the boundary behavior. We can use the base R function `seq` for this, the arguments of which are:

* `from`: The lowest value in the sequence;
* `to`: The highest value in the sequence;
* `by`: The increment between values.

```{r}
tibble(
  imp = 
    seq(
      from = 0,
      to = 100,
      by = 10
    )
)
```

We can now play around with the arguments of `include.lowest = ...` and `right = ...` to ensure that we have the correct combination for the boundary behavior target classes.

```{r}

# Generate a toy data frame for testing:

tibble(
  imp = 
    seq(
      from = 0,
      to = 100,
      by = 10
    )
) %>% 
  
  # Classify the data:
  
  mutate(
    imp_class = 
      cut(
        imp,
        breaks = 
          c(
            0, 
            10, 
            40, 
            100
          ),
        include.lowest = TRUE,
        right = FALSE
      )
  )
```

... and apply this to our cicada-counting operation:

```{r}
cicadas %>% 
  
  # Classify the data:
  
  mutate(
    imp_class = 
      imp %>% 
      cut(
        breaks = 
          c(
            0, 
            10, 
            40, 
            100
          ),
        labels = 
          c(
            "rural",
            "suburban",
            "urban"
          ),
        include.lowest = TRUE,
        right = FALSE
      )
  ) %>%
  
  # Count the number of observations per class:
  
  summarize(
    n = n(),
    .by = imp_class
  ) %>% 
  
  # Plot the number of observations per class:
  
  ggplot() +
  aes(
    x = imp_class,
    y = n
  ) +
  geom_bar(stat = "identity") +
  theme_bw()
```

I know that `cut()` is tough, and I totally get it if you are annoyed, luckily our *dplyr* functions for classifying data are much more straightforward!

### Two classes with `if_else()`

The `if_else` function is used to divide a value into two classes, and is usually used within `mutate()`. We are required to supply the following arguments:

* `condition = ...`: A logical test of a variable.
* `true = ...`: The value to assign if the logical test evaluates to `TRUE`.
* `false = ...`: The value to assign if the logical test evaluates to `FALSE`.

Are you ready to be annoyed with me? Let's classify our integers from 1 through 5 again, assigning values less than 3 as "little" and all other values as "big":

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      if_else(
        condition = x < 3,
        true = "little",
        false = "big"
      )
  )
```

Because our of the order of these arguments, this can be simplified as:

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      if_else(
        x < 3,
        "little",
        "big"
      )
  )
```

We can also add categories for missing values. By default, these will be classified as [NA]{.mono}:

```{r}
tibble(
  x = c(NA, 1:5)
) %>% 
  mutate(
    x_classified = 
      if_else(
        x < 3,
        "little",
        "big"
      )
  )
```

With the `missing = ...` argument, we can specify a new value for those data:

```{r}
tibble(
  x = c(NA, 1:5)
) %>% 
  mutate(
    x_classified = 
      if_else(
        x < 3,
        "little",
        "big",
        missing = "I dunno"
      )
  )
```

Let's turn to real data:

* Reclassify cicada observations into the classes "forested", representing observations where the proportion cover of tree canopy is greater than 40%, and "open" for classes where `canopy` is less than or equal to 40%;
* Plot the number of observations in each land cover class.

```{r}
cicadas %>% 
  
  # Classify the data:
  
  mutate(
    canopy_class = 
      if_else(
        canopy > 40,
        "forested",
        "open"
      )
  ) %>% 
  
  # Count the number of observations per class:
  
  summarize(
    n = n(),
    .by = canopy_class
  ) %>% 
  
  # Plot the number of observations per class:
  
  ggplot() +
  aes(
    x = canopy_class,
    y = n
  ) +
  geom_bar(stat = "identity") +
  theme_bw()
```

### More than two classes with `case_when()`

When you have more than two classes, `if_else()` is not the right choice. Here, I suggest using the `case_when()` statement. The syntax is a little different, but still not too difficult to master. For each category, you supply a logical test and the value to assign, separated by a formula function (`~`):

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      case_when(
        x < 3 ~ "too cold",
        x == 3 ~ "just right",
        x > 3 ~ "too hot"
      )
  )
```

The above is evaluated in order. Every logical test that evaluates to `TRUE` is excluded from the subsequent operations. As such, the above could also be written as:

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      case_when(
        x < 3 ~ "too cold",
        x > 3 ~ "too hot",
        TRUE ~ "just right"
      )
  )
```

Another option is to use the `.default = ...` argument. This will specify a value to assign for values where none of the logical tests evaluated to `TRUE`:

```{r}
tibble(x = 1:5) %>% 
  mutate(
    x_classified = 
      case_when(
        x < 3 ~ "too cold",
        x > 3 ~ "too hot",
        .default = "just right"
      )
  )
```

We sometimes want to classify data based on multiple variables. For this, let's turn again to real data. 

Perhaps we want to assign classes to the `cicada` observations based on *both* impervious surface (`imp`) and canopy cover (`canopy`) and count the number of observations in each class. We will assign the following classes:

|Class              | Impervious surface (`imp`) | Canopy cover (`canopy`)
|:-----------------:|:-------------------------:|:--------------------:|
| rural-open        | less than 10%              | less than or equal to 40%  
| rural-forested    | less than 10%              | greater than 40%    
| suburban-open     | 10 to less than 40%        | less than or equal to 40% 
| suburban-forested | 10 to less than 40%        | greater than 40% 
| urban-open        | greater than 40%           | less than or equal to 40% 
| urban-forested    | greater than 40%           | greater than 40% 

This is a time in which we can use ye-olde base R's `&` function without shame! Let's conduct our analysis according to the above by defining each category:

```{r}
cicadas %>% 
  
  # Classify the data:
  
  mutate(
    lc_class = 
      case_when(
        imp < 10 & canopy <= 40 ~ "rural-open",
        imp < 10 & canopy > 40 ~ "rural-forested",
        imp >= 10 & imp < 40 & canopy <= 40 ~ "suburban-open",
        imp >= 10 & imp < 40 & canopy > 40 ~ "suburban-forested",
        imp > 40 & canopy <= 40 ~ "urban-open",
        imp > 40 & canopy > 40 ~ "urban-forested"
      )
  ) %>% 
  
  # Count the number of observations per class:
  
  summarize(
    n = n(),
    .by = lc_class
  ) %>% 
  
  # Plot the number of observations per class:
  
  ggplot() +
  aes(
    x = lc_class,
    y = n
  ) +
  geom_bar(stat = "identity") +
  theme_bw()
```

As you might imagine, we can simplify the above. Because `case_when` statements are evaluated in order, we can avoid lengthy arguments like `imp >= 10 & imp < 40 & canopy <= 40` by classifying our more extreme `imp` values first:

```{r}
cicadas %>% 
  
  # Classify the data:
  
  mutate(
    lc_class = 
      case_when(
        imp < 10 & canopy <= 40 ~ "rural-open",
        imp < 10 & canopy > 40 ~ "rural-forested",
        imp > 40 & canopy <= 40 ~ "urban-open",
        imp > 40 & canopy > 40 ~ "urban-forested",
        canopy <= 40 ~ "suburban-open",
        canopy > 40 ~ "suburban-forested"
      )
  ) %>% 
  
  # Count the number of observations per class:
  
  summarize(
    n = n(),
    .by = lc_class
  ) %>% 
  
  # Plot the number of observations per class:
  
  ggplot() +
  aes(
    x = lc_class,
    y = n
  ) +
  geom_bar(stat = "identity") +
  theme_bw()
```

## Classifying and reclassifying strings

The tidyverse package *stringr* offers easy-to-use tools for finding information about strings, modifying strings, and replacing them. Using *stringr* functions, we do not need to supply all of the characters in a character vector -- we are searching for matches in only a portion of a string. As such, this process is known as **partial string matching**. Herein, I will focus our attention in this section on stringr tools that I use most frequently when classifying strings.

### Detecting strings

We have previously used the function `str_detect()` to determine whether a string matches a provided pattern. This function is a type of logical test, thus the output of the test will be `TRUE` or `FALSE`. We supply a character vector and the pattern to search for. As a reminder, the arguments for `str_detect()` are:

* `string = ...`: The character vector (or assigned name) that we would like to modify;
* `pattern = ...`: The pattern to search for.

Because the output of `str_detect()` is a logical vector, we can use the function in conjunction with `filter()` to subset a data frame.

In the code below, I subset `example_df` to rows where the string in the character vector `fruit` matches the pattern "rr":

```{r}
example_df %>% 
  filter(
    str_detect(fruit, pattern = "rr")
  )
```

I can also subset `example_df` to rows where `fruit` does not contain the pattern "rr" with:

```{r}
example_df %>% 
  filter(
    !str_detect(fruit, pattern = "rr")
  )
```

Because the output of `str_detect()` is a logical value, the function can be used to classify data into two classes when used in conjunction with `if_else()` and `mutate()`:

```{r}
example_df %>% 
  mutate(
    fruit_classes = 
      if_else(
        str_detect(fruit, pattern = "rr"),
        "contains rr",
        "does not contain rr"
      )
  )
```

When used with the negation operator, `!`, we can use `mutate()`, `if_else()`, and `str_detect()` to classify the data based on strings that do not contain "rr":

```{r}
example_df %>% 
  mutate(
    fruit_classes = 
      if_else(
        !str_detect(fruit, pattern = "rr"),
        "does not contain rr",
        "contains rr"
      )
  )
```

Likewise, we can use `str_detect()` with `case_when()` and `mutate()` to assign more than two classes:

```{r}
example_df %>% 
  mutate(
    fruit_classes = 
      case_when(
        str_detect(fruit, pattern = "rr") ~ "contains rr",
        str_detect(fruit, pattern = "ap") ~ "contains ap",
        TRUE ~ "does not contain rr or ap"
      )
  )
```

Remember that you have to be careful when writing a `case_when()` statement -- only tests that evaluate to `FALSE` are passed on to the next logical test in the series. For example, watch what happens when we test whether a string contains `rr` *then* test whether a string contains `bl`:

```{r}
example_df %>% 
  mutate(
    fruit_classes = 
      case_when(
        str_detect(fruit, pattern = "rr") ~ "contains rr",
        str_detect(fruit, pattern = "bl") ~ "contains bl",
        TRUE ~ "does not contain rr or bl"
      )
  )
```

In the above, only the "blood orange" was assigned to the class "contains_bl"! To address this, we can refine our logical test a bit:

```{r}
example_df %>% 
  mutate(
    fruit_classes = 
      case_when(
        str_detect(fruit, pattern = "rr") &
          str_detect(fruit, pattern = "bl") ~ "contains rr and bl",
        str_detect(fruit, pattern = "rr") ~ "contains rr",
        str_detect(fruit, pattern = "bl") ~ "contains bl",
        TRUE ~ "does not contain rr or bl"
      )
  )
```

The above first searched for strings that contain both "rr" *and* "bl", and assigned the value "contains rr and bl" to those classes. It was safe to assign the results of the next test to "contains rr" because character values that contained both "rr" and "bl" were already assigned.

### Metacharacters

A search pattern can refer to literal characters or a combination of literal and metacharacters. A **literal character** is a symbol representing the value of a single symbol within a string. A **metacharacter** is a symbol that has a special meaning during pattern processing. Combined, literal and metacharacters make up **regular expressions** (regex), which are sequences of characters that describe search patterns. In the examples above, I only provided literal characters. There are a number of metacharacters that can enhance our ability to efficiently search for patterns.

**Anchor metacharacters** define the start and end of strings. We can search for a symbol at the start of a string by preceding a symbol with a `^`. Here, we'll search for fruit that start with "a":

```{r}
example_df %>% 
  filter(
    str_detect(fruit, pattern = "^a")
  )
```

We can search for a symbol that ends a string by following the symbol with a `$`. Here, let's search for fruit that end in "y":

```{r}
example_df %>% 
  filter(
    str_detect(fruit, pattern = "y$")
  )
```

**The "or" metacharacter**: We can search for multiple potential strings by separating strings with an or metacharacter (`|`). We simply provide the symbols that we would like to search for, with each set of symbols separated by `|`:

```{r}
example_df %>% 
  filter(
    str_detect(fruit, "banana|blackberry|boysenberry")
  )
```

Because we are searching for sets of symbols, and not the full character values, we can *carefully* reduce this down to just the symbols that define our values of interest:

```{r}
example_df %>% 
  filter(
    str_detect(fruit, "ba|kb|bo")
  )
```

:::{class="mysecret"}
<i class="fa fa-user-secret" aria-hidden="true" style = "font-size: 150%; padding-right: 5px;"></i>
Use regex like the above *very carefully*! If you do not have complete knowledge of your character values, or if your underlying data changes, this can cause huge problems! Additionally, this should also be used sparingly, as it does not do a great job of communicating data manipulation steps.
:::

Importantly, filtering statements, regex and otherwise, can be used together. Below, I subset to berries that start with "b" but are not bananas, blackberries, or boysenberries:

```{r}
example_df %>% 
  filter(
    !str_detect(fruit, "ba|kb|bo"),
    str_detect(fruit, "^b")
  )
```

### Replacing strings

We can sometimes use *stringr* itself to reclassify character vectors (avoiding the need for `if_else()` and `case_when()` altogether!). 

For example, perhaps I want to classify fruit that are commonly called "berries" into their botanical classes.

First let's subset the data to fruit that contain the string "berry":

```{r}
example_df %>% 
  filter(
    str_detect(fruit, "berry")
  )
```

Botanically, bilberries and blueberries are true berries (baccae). We can use the function `str_replace()` to replace part of a string. The arguments for `str_replace()` are:

* `string = ...`: The character vector (or assigned name) that we would like to modify;
* `pattern = ...`: The pattern to search for;
* `replacement = ...`: The string to replace the pattern with.

Let's replace the pattern "bil" or "blue" with "true\ ":

```{r}
example_df %>% 
  filter(
    str_detect(fruit, "berry")
  ) %>% 
  mutate(
    fruit = 
      fruit %>% 
      str_replace("bil|blue", "true ")
  )
```

Blackberries and boysenberries are known as aggregate fruits. We can pipe the output from our previous `str_replace()` function into a new `str_replace()` function to change those names as well:

```{r}
example_df %>% 
  filter(
    str_detect(fruit, "berry")
  ) %>% 
  mutate(
    fruit = 
      fruit %>% 
      str_replace("bil|blue", "true ") %>% 
      str_replace("black|boysen", "aggregate ")
  )
```

### Removing strings

Sometimes the easiest way to reclassify a character vector is to remove strings. Let's look once again at our `example_df`, subset to fruits that contain the pattern "berry":

```{r}
example_df %>% 
  filter(
    str_detect(fruit, "berry")
  )
```

Given that these are all berries, the suffix "berry" does not contain any new information. As such, we may want to remove it. To do so, we can use the function `str_remove`. The arguments of `str_remove()` are:

* `string = ...`: The character vector (or assigned name) that we would like to modify;
* `pattern = ...`: The pattern to search for and remove.

For example, we can remove the string "berry" with:

```{r}
example_df %>% 
  filter(
    str_detect(fruit, "berry")
  ) %>% 
  mutate(
    fruit = str_remove(fruit, "berry")
  )
```

I imagine that this would also be useful in our classified data frame of berry types:

```{r}
example_df %>% 
  filter(
    str_detect(fruit, "berry")
  ) %>% 
  mutate(
    fruit = 
      fruit %>% 
      str_replace("bil|blue", "true ") %>% 
      str_replace("black|boysen", "aggregate ") %>% 
      str_remove(" berry")
  )
```

### *stringr* and labels

The rules that apply to variable names when wrangling data are quite different than those associated with reporting data. Does your boss/advisor/dog want to see your results in snake_case? No, they do not.

You can modify a string to "sentence case" using the function `str_to_sentence()`. This will capitalize the first letter of the string. To use the function, you simply provide the name assigned to the string that you would like to convert to sentence case:

```{r}
example_df %>% 
  mutate(
    fruit = str_to_sentence(fruit)
  )
```

There are those who are fond of "title case" (I am not one of them). With title case, most of the words will be capitalized. To do so, you use the function `str_to_title()` and supply the name assigned to the string that you would like to modify:

```{r}
example_df %>% 
  mutate(
    fruit = str_to_title(fruit)
  )
```

:::{class="mysecret"}
<i class="fa fa-user-secret" aria-hidden="true" style = "font-size: 150%; padding-right: 5px;"></i>
I have just barely scratched the surface of using stringr and regex here. I consider stringr and regex to be crucial tools for working with spatial and non-spatial data alike! I **strongly** suggest exploring these tools further!
:::

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Boundary value** (when classifying numeric vectors): The value that represents the minimum and maximum values of a class.
* **Literal character**: In regex, this is used to search for exact character matches in the case (i.e., lower vs. upper) and order of characters.
* **Metacharacter**: Special characters used to modify the conditions of a regex search string (such a a choice of letters or position of literal characters in a string). Note: Metacharacters are not R functions!
* **Ordinal factor** (or, more generally, variable): A variable that is represented as ordered levels.
* **Closed boundary**: When classifying numeric values, this describes a boundary that includes the boundary value.
* **Open boundary**: When classifying numeric values, this describes a boundary that does not include the boundary value.
* **Regular expressions (regex)**: An algorithm used to search strings (character values).
:::

<button class="accordion">Functions</button>
::: panel

::: mysecret

{{< fa user-secret size=2x >}} [**Important!**]{style="font-size: 1.25em; padding-left: 0.5em;"}

* Primitive functions, as well as functions in the *base*, *stats*, and *utils* packages, are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *lubridate*, *purrr*, *readr*, *stringr*, *tibble*, *tidyr*, and *tidyverse* are loaded with `library(tidyverse)`.
* I do not include functions that I recommend avoiding.
* Regular expressions metacharacters are not functions!
:::

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_5.2_categorizing_data.csv"
) %>%
  read_csv() %>%
  kableExtra::kable(
    align = c("c", "c", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```

:::

:::

<button class="accordion">Metacharacters in regex</button>
::: panel

::: mysecret
{{< fa user-secret size=2x >}} [Metacharacters are not R functions!]{style="font-size: 1.25em; padding-left: 0.5em;"}

When you are given a list of functions that you may use in a given problem set, recall that regex metacharacters are not functions. As such, they will not be included in your function list. You may use *any* metacharacter to address a given problem!
:::

* **Alternation constraint**, `(...)`: Constrains the use of a metacharacter to just the symbols inside of parentheses
* **Anchor**, `^...`: Specify the start of a string
* **Anchor**, `...$`: Specify the end of a string
* **Character class**, `[...]`: Define a *set* of symbols that you would like to match
* **Metacharacter escape**, `\\`: Treat a metacharacter as a literal character
* **Optional match**, `?`: Specify that the preceding symbol is optional
* **Range** (in a character class), `[...-...]`: Define a *range* of symbols that you would like to match in a given position
* **Or**, `...|...`: Specify a match of one string "or" another string
* **Repetition**, `...*`: Specify that a symbol can appear no times or an unlimited number of times
* **Repetition**, `...+`: Specify that a symbol appears at least once or an unlimited number of times
* **Repetition**, `{...}`: Specify the number of times a symbol should appear
* **Repetition**, `{...,...}`: Specify that a symbol may appear within a range of repetitions
* **Wild card**, `.`: Specify that a character value at a given location can be any symbol
:::

<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
| Indent code                 | Ctrl + I         | command + I
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
