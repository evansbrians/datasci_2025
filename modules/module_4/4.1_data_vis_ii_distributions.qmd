---
title: "4.1 Data visualization with ggplot II: Exploring continuous distributions"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

```{r, include = FALSE}
knitr::opts_chunk$set(
  error = TRUE
)
```


![](../../images/hex_complex.png){.intro_image}

In this written lesson (no video content), we will continue our exploration of using the core tidyverse package *ggplot* to visualize data. We will use explore different ways to visualize the distribution of a variable. We will pay special attention on what unique perspective, or what sort of information, each type of plot offers for understanding data distributions.

Throughout, you will enhance your knowledge on:

* Aesthetic mappings
* Layers (geometries)
* Modifying scales
* The coordinate system
* Labels
* Themes
* Saving plots

## Review

Recall that the *ggplot* package is built on on the design principles of Leland Wilkinson's book <a href = "https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448" target = "_blank">The Grammar of Graphics</a>.

The grammar of graphics considers the structure of a given data visualization to be defined by the:

* **Data**: The information being plotted
* **Aesthetic mappings**: How the data are mapped to visual attributes
* **Layers (geometries)**: Expression of the data in the plot
* **Scales**: Maps from data to aesthetic space
* **Coordinate system**: Projection of data (e.g., x and y Cartesian coordinates)
* **Facets**: Subsets of data within a given plot (i.e., plots are broken into subplots based on some grouping variable)
* **Theme**: Styling of non-data elements in a plot

## Setup

Please start by loading the *tidyverse* metapackage:

```{r, message = FALSE}
library(tidyverse)
```

Recall that *ggplot2* is a member of the **core tidyverse** and therefore does not need to be explicitly loaded if `library(tidyverse)` is within the setup section of your script!

We will use the dataset `district_birds.rds` forthis lesson. Please read in the dataset and globally assign it to the name `dc_birds`:

```{r}
dc_birds <- 
  read_rds("data/raw/district_birds.rds")
```

## Geometries

### Binned variables: `geom_histogram`

Histograms provide an easy-to-interpret visual summary of the distribution of the values in a variable.

Let's generate a plot to visualize the distribution of wing lengths for adult (`age == "AHY"`) House wrens (`spp == "HOWR"`) of known sex:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U"
  ) %>% 
  drop_na(wing) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram() +
  theme_bw()
```

The y-axis of a histogram is `count`, which makes the results easy to interpret. Each bar represents a range values on the x-axis and the height of each bar is the number of observations within that value range.

With the plot above, we are getting a sense of the distribution of wing lengths, but we can clearly see that there are some crazy values in the data. A House wren with a 90 mm wing would be terrifying! 

Knowing a bit about the biology of the species, we can safely assume that any wing measurement above 60 represents measurement error. Let's subset the data to where the wing length is less than 60 and visualize the distribution again:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram() +
  theme_bw()
```

*Note: `filter()` automatically removes `NA` values from a variable that is tested in the filtering statement. As such, it was no longer necessary to use `drop_na()`!*

That is lot better and gives us a closer look at the distribution. Notice the message, however, that is printed when we plotted the histogram. The `bins` represent the number of bars that the continuous data are grouped into, which is defined by the `bins = ...` argument. 

It is clear, given the distribution, that the number of bars is not appropriate for these data. When a histogram looks jagged like this and/or contains missing values, it usually represents constraints associated with measurement precision.

For example, let's add more bins to the data and have a look at the distribution:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(bins = 50) +
  theme_bw()
```

We can clearly see that a lot of our bins are missing values. Wing length is measured in millimeters and the maximum measurement precision is 0.5 mm. As such, those missing values likely represent bins that do not contain realistic measurements (e.g., 45.1 - 45.4 mm).

Instead of specifying the number of bins, we can account for this by specifying the width of bins (`binwidth`). For example, if most of our data are measured in whole values of mm, we can specify `binwidth = 1`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  theme_bw()
```

The above provides a more complete picture of the distribution of wing lengths, displaying a normal distribution with a mode of roughly 50 mm.

It should be noted that histograms are super useful for observing distributions but the number of and width bins is arbitrary. The choice is up to the coder and can obscure the distribution of the data.

::: mysecret

<i class="fas fa-user-secret" style = "font-size: 36px;"></i> Always choose the number of bins that most accurately communicates your data and provide a description of how the number of bins was chosen! When confronted with a histogram in the wild, think about why the scientist chose the number of bins that they did and how the interpretation of the data distribution might be influenced by bin width. 
:::

### Statistical density: `geom_density`

The function `geom_density` empowers you to communicate and explore the continuous pattern of data distribution as it relates to a given variable.

Let's take a look at a density plot using the same values we started with last time:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U"
  ) %>% 
  drop_na(wing) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(fill = "#aaddff") +
  theme_bw()
```

The y-axis of this plot is the statistical density, which describes the probability that a given value will occur within a continuous variable. A limitation to density plots is that the y-axis can often be difficult to interpret!

The long tail at the right of this distribution suggests that there are outliers in the data, but it is a bit difficult to see what values those outliers represent. From our histogram, we know that filtering wing lengths to less than sixty likely removes outliers. Let's apply that same filter here:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(fill = "#aaddff") +
  theme_bw()
```

*Note: Once again, we were able to remove the `drop_na(wing)` function because `NA` values in a target variable are removed by default with `filter()`!*

This distribution is perhaps more messy than we would prefer. With histograms, we can specify the width of bins. With density plots, we specify the bandwidth (`bw = ...`) -- this describes the degree of smoothing to apply to the distribution.

For example, if we supply a bandwidth value of 0.1 (see `?geom_density`) ...

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(
    fill = "#aaddff",
    bw = 0.1  
  ) +
  theme_bw()
```

... we can clearly see the aforementioned limitations in measurement precision for wing length!

If we add a bandwidth value of `1`, we get a normal distribution that obscures fine-scale variation in the distributional pattern:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(
    fill = "#aaddff",
    bw = 1 
  ) +
  theme_bw()
```

This illustrates that, like histograms, the choice of bandwidth can be somewhat arbitrary and greatly influences the interpretation of your distribution! To avoid putting my thumb on the scale, I typically choose the default bandwidth selector (see `?bw.nrd0`), as it is a good representation of the overall distributional pattern in your data.

### Statistical summary: `geom_boxplot`

Sometimes, we are more interested in core summary statistics that describe a distribution than the distribution itself. A boxplot will return information on:

* The median value
* The first and third interquartile range
* Outliers

Let's apply this. For example, we can already safely assume that wing lengths greater than 60 are outliers. Let's take a quantitative approach to identifying outliers in wing lengths using a boxplot. To do so, we will map `spp` to the x-axis, `wing` to the y-axis, and add the geometry `geom_boxplot()`. 

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing
  ) +
  geom_boxplot(fill = "#aaddff") +
  theme_bw()
```

The plot above provides a very clear statistical description of the distribution:

* The line in the middle of the box represents the median value;
* The bottom and top of the box represent the **hinges**, which are the 1st and 3rd quartiles of the range (25th and 75th percentiles);
* The lines extending from the box are the **whiskers**, which represent the values no further than 1.5 times the interquartile range relative to the hinges;
* The dots represent outliers, which are defined here as data points outside of the whiskers.

If we agree with that the dots represent outliers (i.e., are not biologically meaningful), we can use these to inform our histogram ...

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  theme_bw()
```

... and our density plot:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(fill = "#aaddff") +
  theme_bw()
```

## Continuous distributions of groups

We often want to compare the distributions between two or more groups. In this section, we will explore various considerations when doing so.

### One grouping variable

#### Histograms

You might be tempted to draw a histogram in which the fill color of the bars is determined by some grouping variable. For example, perhaps we want to know how wing length varies between female and male House wren. To so, we can set `fill = sex`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_histogram(binwidth = 1) +
  theme_bw()
```

This plot is very confusing. The default position of the bars is `"stack"`. The height of each bar is the total number of observations across groups. The distribution of males is clear because each blue bar is the number of males. Each red bar is the number of females, but these values do not start at zero -- they start at the height of the blue bar. This makes comparing the two distributions unduly challenging. 

To get around this, we can use the argument `position = "identity"`. This will ensure that the bars for each sex start at zero.

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_histogram(
    binwidth = 1, 
    position = "identity"
  ) +
  theme_bw()
```

The above almost completely hid the female distribution! That is because there are much fewer females in the dataset than males and, because "M" is the second item in the group, male bars are added after female bars.

We can make both sets of bars visible by applying transparency to the geometry with the argument `alpha = ...`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_histogram(
    binwidth = 1, 
    position = "identity", 
    alpha = 0.7
  ) +
  theme_bw()
```

An easier way to visualize this is to place each group within their own facet with `facet_wrap()`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~ sex) +
  theme_bw()
```

With facet plots, however, it is important to consider how the facets are arranged. Although the above demonstrates that more males have been captured than females, size differences between the sexes is hard to interpret. If our goal is to compare the wing length distribution between sexes, it is much more clear to place the facets in a single column with `ncol = 1`.

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

The above successfully communicates that females, on average, have shorter wings than males and more males have been captured than females.

#### Density

Density plots are great for comparing distributional differences among groups. Let's look a closer look at the distribution of male and female House wren wing lengths:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(fill = "#aaddff") +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

The above is a continuous version of our last histogram. 

Unlike histograms, density plots with color can provide a clear comparison of the distributions between groups:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_density() +
  theme_bw()
```

Similarly to histograms, however, these differences can be displayed more clearly by adding transparency such that we can see the full distribution of each sex:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_density(alpha = 0.6) +
  theme_bw()
```

#### Boxplots

Boxplots are super useful for comparing statistical summaries of groups. Let's look at the difference between male and female wing lengths statistically:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = sex,
    y = wing
  ) +
  geom_boxplot(fill = "#aaddff") +
  theme_bw()
```

We can see in the above that the median wing length of males is longer than the median wing length of females. We can take this one step further by testing whether the median wing values are statistically different from one another by visualizing whether the 95% confidence intervals overlap. The argument `notch = TRUE` provides an approximation of the 95% confidence intervals for comparing the difference in median values among groups:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = sex,
    y = wing
  ) +
  geom_boxplot(
    fill = "#aaddff",
    notch = TRUE
  ) +
  theme_bw()
```

If the notches above overlapped, this would suggest that the 95% confidence intervals overlap as well, thus the two values would not be statistically distinguishable. Because our notches do not overlap, this suggests that the median wing length of males is statistically higher than that of females.

### Two or more grouping variables

I typically do not use histograms to compare the distribution of two or more grouping variables, so this section will focus on boxplots and statistical density plots.

#### Boxplots

As mentioned before, boxplots are a great way to identify differences among multiple groups. Let's use a facet plot to compare female and male wing lengths of Carolina chickadees ("CACH"), Carolina wrens ("CARW"), and House wrens ("HOWR"):

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U"
  ) %>% 
  drop_na(wing) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing
  ) +
  geom_boxplot(fill = "#aaddff") +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

I would not call the above plot particularly successful, because the outliers obscured potential differences in the distributions.

We can remove all outliers with the `geom_boxplot()` argument `outliers = FALSE`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U"
  ) %>% 
  drop_na(wing) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing
  ) +
  geom_boxplot(
    fill = "#aaddff",
    outliers = FALSE
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

Using the distribution of the whiskers when all outliers are removed, we can then remove outliers across species by filtering the data itself. Let's set the range of wing length to between 45 and 70 mm:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing
  ) +
  geom_boxplot(fill = "#aaddff") +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

The above removed shared outliers across species. This information will allow us to further isolate the core of the distribution for other plot types!

It is sometimes more clear to compare between differences by using fill colors instead of facets:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing,
    fill = sex
  ) +
  geom_boxplot() +
  theme_bw()
```

Because the boxes in the plot above are paired, this clearly shows a difference in wing length between sexes for each species.

If, instead, our goal was to compare between species for each sex, we can simply switch the variables mapped to the x-axis and fill color:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = sex,
    y = wing,
    fill = spp
  ) +
  geom_boxplot() +
  theme_bw()
```

The above two plots really demonstrate how aesthetic mappings can influence what you are communicating about your data!

#### Density

With a density plot, we typically map a variable to the fill color aesthetic and a second variable to facets. Let's look at the statistical density distributions of wing lengths for each species and sex:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_density(alpha = 0.6) +
  facet_wrap(
    ~ spp,
    ncol = 1
  ) +
  theme_bw()
```

This plot does not demonstrate differences in sex by species as clearly as the boxplot, but it does communicate both differences in sex and differences in species more successfully overall. We can make differences between species even more apparent by switching our aesthetic and facet mappings:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = spp
  ) +
  geom_density(alpha = 0.6) +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

If we were more interested in communicating the wing length differences of a given sex between species, this plot is much more clear!

#### Density with violin plots

Violin plots provide a clear visualization of differences in the shapes of distributions across multiple groups. Let's look at the differences in wing length between sexes for each species using `geom_violin()`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing,
    fill = sex
  ) +
  geom_violin() +
  theme_bw()
```

Violin plots are actually density plots, but the right- and left-hand sides of each violin are mirrored density distributions. Note, however, that the values of statistical density in violin plots are not shown, just the shape of the distribution.

Because we are often used to seeing statistical density displayed on the vertical axis, I typically flip the coordinate system of my violin plots:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing,
    fill = sex
  ) +
  geom_violin() +
  coord_flip() +
  theme_bw()
```

By flipping the coordinate system, we can clearly visualize the differences between sexes and species. 

## Fine tuning distribution plots with scales

### Facet scales

The reason for change:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

No better, changes both axes:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free"
  ) +
  theme_bw()
```

Even worse, changes just x:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_x"
  ) +
  theme_bw()
```

Oh big mama:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  theme_bw()
```

### Expansion

Get rid o' that ugly little space beneath 'em thar bars:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  theme_bw()
```

That looks nice (*probably good for the final product!*), but was perhaps a lot of work. Instead, we can use the `expansion` function inside of `scale_y_continuous()`. This function was released in dplyr 3.3.0 back in 2020. We supply a vector of two numbers with `mult = c(min, max)`. The first number is the proportional expansion at the lower limit, relative to the current distribution of the data, and the second is the proportion to expand relative to upper limit:

```{r}
captures %>% 
  select(spp) %>% 
  left_join(
    birds %>% 
      select(
        species, 
        common_name, 
        diet
      ),
    by = c("spp" = "species")
  ) %>% 
  group_by(common_name, diet) %>% 
  summarize(
    n = n(),
    .groups = "drop"
  ) %>% 
  slice_max(n, n = 10) %>% 
  ggplot() +
  aes(
    x = diet, 
    y = n,
    fill = common_name
  ) +
  geom_bar(
    stat = "identity",
    color = "#424242",
    linewidth = 0.3
  ) +
  scale_y_continuous(
    expand = 
      expansion(
        mult = c(0, 0.05)
      )
  )
```

We can also set the expansion by using a number in the same units as the y-axis by using the argument `add =` (rather than `mult = `) as an argument of `expansion()`:

```{r}
captures %>% 
  select(spp) %>% 
  left_join(
    birds %>% 
      select(
        species, 
        common_name, 
        diet
      ),
    by = c("spp" = "species")
  ) %>% 
  group_by(common_name, diet) %>% 
  summarize(
    n = n(),
    .groups = "drop"
  ) %>% 
  slice_max(n, n = 10) %>% 
  ggplot() +
  aes(
    x = diet, 
    y = n,
    fill = common_name
  ) +
  geom_bar(
    stat = "identity",
    color = "#424242",
    linewidth = 0.3
  ) +
  scale_y_continuous(
    expand = 
      expansion(
        add = c(0, 100)
      )
  )
```

As I hinted at above, however, for finished plots I usually opt for exploring the data and providing fixed values within the `limits` argument of `scale_y_continuous()`.

## Fine tuning distribution plots with themes


## Review: Positives and negatives of distribution visualizations

Benefits and drawbacks of histograms:

**Benefits**:

* Returns the distribution of a binned numeric variable
* Can get a clear sense of modality in your data (but see below)
* You can get a sense of potential outliers in your data

**Drawbacks**:

* The bins can often obscure the underlying distribution pattern in the data
* No data in a given bin may represent measurement precision rather than a pattern in the data
* The number of bins are arbitrary and can greatly influence the interpretation of distribution

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 55
  ) %>% 
  drop_na(wing, sex) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(bins = 10) +
  facet_wrap(
    ~ sex,
    nrow = 2
  ) +
  theme_bw()
```



**Benefits**:

* Can clearly show that there are outliers in the data
* Can often provide a clear visual comparison of difference in the distribution between groups
* Can provide an easy and clear way to display difference in distributions across multiple groups

**Costs**:

* The two sides of each distribution are typically mirror images of one another
* Outliers can obscure the distribution of the data
* Unable to identify which values are outliers

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp %in% 
      c(
        "CACH", 
        "CARW",
        "HOWR"
      ),
    age == "AHY",
    sex != "U",
    # wing < 55
  ) %>% 
  drop_na(wing, sex) %>% 
  ggplot() +
  # aes(x = wing) +
  # geom_histogram() +
  # geom_density(fill = "#dcdcdc") +
  geom_violin(
    aes(
      x = spp,
      y = wing,
      fill = sex
    )
  ) +
  # geom_boxplot(
  #   aes(
  #     x = spp,
  #     y = wing,
  #     fill = sex
  #   )
  # ) +
  theme_bw()
```

### `geom_boxplot`: Statistical summaries of continuous distributions

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp %in% 
      c(
        # "CACH", 
        # "CARW",
        "HOWR"
      ),
    age == "AHY",
    sex != "U",
    # wing < 55
  ) %>% 
  drop_na(wing, sex) %>% 
  ggplot() +
  # aes(x = wing) +
  # geom_histogram() +
  # geom_density(fill = "#dcdcdc") +
  geom_boxplot(
    aes(
      x = spp,
      y = wing,
      fill = sex
    )
  ) +
  # geom_boxplot(
  #   aes(
  #     x = spp,
  #     y = wing,
  #     fill = sex
  #   )
  # ) +
  theme_bw()
```

**Benefits**:

* Can clearly show which values are outliers
* Reduces the distribution into clear, consistent, identifiable regions

**Costs**:

* No ability to view the modality in your data

### The best of both worlds? 

You can plot ...

## Themes

Now that we have a plot that we like (maybe ... my color choices were questionable at best ... hopefully you found better ones?), it is time to specify the **themes**. Recall that themes determine how the non-data elements look.

One trick that I didn't show in the lecture is my preferred theme, `theme_bw()`. I usually use this as a starting point for my plots:

```{r eval = TRUE, message = FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  ) +
  facet_wrap(~ sex) +
  theme_bw()
```

Now we can modify specific theme elements inside the `theme` function. We almost always have to modify the size of the axis labels and titles. Text theme elements are modified by passing arguments to `element_text()`. Let's make our axis text larger:

```{r eval = TRUE, message = FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  ) +
  facet_wrap(~ sex) +
  theme_bw() +
  theme(
    axis.text = element_text(size = 12)
  )
```

Perhaps we do not want the dull gray boxes on top of our facets. We could spice them up by adding the yellow from Mrs. Felicity Fox's dress (#F6CD58) with the theme argument `strip.background =` with `element_rect()`:

```{r eval = TRUE, message = FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  ) +
  facet_wrap(~ sex) +
  theme_bw() +
  theme(
    axis.text = element_text(size = 12),
    strip.background = element_rect(fill = '#F6CD58')
  )
```

We can make our axis lines stronger using the argument `axis.line = ` and `element_line()`:

```{r eval = TRUE, message = FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  ) +
  facet_wrap(~ sex) +
  theme_bw() +
  theme(
    axis.text = element_text(size = 12),
    strip.background = element_rect(fill = '#F6CD58'),
    axis.line = element_line(linewidth = 1)
  )
```

**Almost everything** we modify in the `theme()` is done so using `element_[type of element]`. An exception is the `unit` function. Let's see how it looks by adjusting a major weak point in our plot so far ... the spacing between the panels. Let's add some space with the `panel.spacing =` argument and the function `unit()`:

```{r eval=TRUE, error=TRUE, message=FALSE}
chickadees %>% 
  ggplot() +
  aes(
    x = wing, 
    y = mass,
    color = spp
  ) +
  geom_point(
    size = 2.75, 
    alpha = 0.25
  ) +
  geom_smooth(
    method = "lm",
    formula = y ~ x, 
    se = FALSE,
    linewidth = 1.5
  ) +
  scale_y_continuous(
    limits = c(7, 13),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(50, 70),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    "Species",
    values = c("#595B18", "#CA621E")
  ) +
  labs(
    title = "Wing length and mass of Black-capped and Carolina chickadees",
    x = "Wing length (mm)", 
    y = "Mass (g)"
  ) +
  facet_wrap(~ sex) +
  theme_bw() +
  theme(
    axis.text = element_text(size = 12),
    strip.background = element_rect(fill = '#F6CD58'),
    axis.line = element_line(linewidth = 1),
    panel.spacing = 
      unit(2, 'lines')
  )
```

Be sure to look through the help file (`?theme`) at all of the various options you have for changing the theme of a plot!

<br>

::: mysecret

<i class="fas fa-user-secret" style = "font-size: 36px;"></i> I adjust my themes at the very end of my ggplot code. You typically need to adjust themes iteratively when you save a file. Having `theme()` at the end of your ggplot code section makes it easier to find and modify.

:::

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Aesthetic mappings**: How the data are mapped to visual attributes.
* **Data** (in the Grammar of Graphics): The information being plotted.
* **Layers (geometries)**: Expression of the data in the plot.
* **Scales**: Maps from data to aesthetic space.
* **Coordinate system**: Projection of data (e.g., x and y Cartesian coordinates).
* **Facets**: Subsets of data within a given plot (i.e., plots are broken into subplots based on some grouping variable).
* **Theme**: Styling of non-data elements in a plot.
:::

<button class="accordion">Functions</button>
::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *tibble* and *tidyverse* are loaded with `library(tidyverse)`.

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_4.1_intro_to_data_vis.csv"
) %>% 
  read_csv() %>% 
  kableExtra::kable(
    align = c("c", "c", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```

:::

:::


<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
