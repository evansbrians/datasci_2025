---
title: "4.1 Data visualization with ggplot II: Exploring continuous distributions"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
---

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
<script src="https://kit.fontawesome.com/03064bdd6c.js" crossorigin="anonymous"></script>
<link rel="icon" 
type="image/png" 
href = "www/hex_icon.png" />
</head>

```{r, include = FALSE}
knitr::opts_chunk$set(
  error = TRUE
)
```


![](../../images/hex_complex.png){.intro_image}

In this written lesson (no video content), we will continue our exploration of using the core tidyverse package *ggplot* to visualize data. We will explore different ways to visualize the distribution of a variable. We will pay special attention on what unique perspective, or what sort of information, each type of plot offers for understanding data distributions.

Throughout, you will enhance your knowledge on:

* Aesthetic mappings
* Layers (geometries)
* Modifying scales
* The coordinate system
* Labels
* Themes

## Review

Recall that the *ggplot* package is built on on the design principles of Leland Wilkinson's book <a href = "https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448" target = "_blank">The Grammar of Graphics</a>.

The grammar of graphics considers the structure of a given data visualization to be defined by the:

* **Data**: The information being plotted
* **Aesthetic mappings**: How the data are mapped to visual attributes
* **Layers (geometries)**: Expression of the data in the plot
* **Scales**: Maps from data to aesthetic space
* **Coordinate system**: Projection of data (e.g., x and y Cartesian coordinates)
* **Facets**: Subsets of data within a given plot (i.e., plots are broken into subplots based on some grouping variable)
* **Theme**: Styling of non-data elements in a plot

## Setup

Please start by loading the *tidyverse* metapackage:

```{r, message = FALSE}
library(tidyverse)
```

Recall that *ggplot2* is a member of the **core tidyverse** and therefore does not need to be explicitly loaded if `library(tidyverse)` is within the setup section of your script!

We will use the dataset `district_birds.rds` forthis lesson. Please read in the dataset and globally assign it to the name `dc_birds`:

```{r}
dc_birds <- 
  read_rds("data/raw/district_birds.rds")
```

## Geometries

### Binned variables: `geom_histogram`

Histograms provide an easy-to-interpret visual summary of the distribution of the values in a variable.

Let's generate a plot to visualize the distribution of wing lengths for adult (`age == "AHY"`) House wrens (`spp == "HOWR"`) of known sex:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U"
  ) %>% 
  drop_na(wing) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram() +
  theme_bw()
```

The y-axis of a histogram is `count`, which makes the results easy to interpret. Each bar represents a range values on the x-axis and the height of each bar is the number of observations within that value range.

With the plot above, we are getting a sense of the distribution of wing lengths, but we can clearly see that there are some crazy values in the data. A House wren with a 90 mm wing would be terrifying! 

Knowing a bit about the biology of the species, we can safely assume that any wing measurement above 60 represents measurement error. Let's subset the data to where the wing length is less than 60 and visualize the distribution again:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram() +
  theme_bw()
```

*Note: `filter()` automatically removes `NA` values from a variable that is tested in the filtering statement. As such, it was no longer necessary to use `drop_na()`!*

That is lot better and gives us a closer look at the distribution. Notice the message, however, that is printed when we plotted the histogram. The `bins` represent the number of bars that the continuous data are grouped into, which is defined by the `bins = ...` argument. 

It is clear, given the distribution, that the number of bars is not appropriate for these data. When a histogram looks jagged like this and/or contains missing values, it usually represents constraints associated with measurement precision.

For example, let's add more bins to the data and have a look at the distribution:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(bins = 50) +
  theme_bw()
```

We can clearly see that a lot of our bins are missing values. Wing length is measured in millimeters and the maximum measurement precision is 0.5 mm. As such, those missing values likely represent bins that do not contain realistic measurements (e.g., 45.1 - 45.4 mm).

Instead of specifying the number of bins, we can account for this by specifying the width of bins (`binwidth`). For example, if most of our data are measured in whole values of mm, we can specify `binwidth = 1`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  theme_bw()
```

The above provides a more complete picture of the distribution of wing lengths, displaying a normal distribution with a mode of roughly 50 mm.

It should be noted that histograms are super useful for observing distributions but the number of and width bins is arbitrary. The choice is up to the coder and can obscure the distribution of the data.

::: mysecret

<i class="fas fa-user-secret" style = "font-size: 36px;"></i> Always choose the number of bins that most accurately communicates your data and provide a description of how the number of bins was chosen! When confronted with a histogram in the wild, think about why the scientist chose the number of bins that they did and how the interpretation of the data distribution might be influenced by bin width. 
:::

### Statistical density: `geom_density`

The function `geom_density` empowers you to communicate and explore the continuous pattern of data distribution as it relates to a given variable.

Let's take a look at a density plot using the same values we started with last time:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U"
  ) %>% 
  drop_na(wing) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(fill = "#aaddff") +
  theme_bw()
```

The y-axis of this plot is the statistical density, which describes the probability that a given value will occur within a continuous variable. A limitation to density plots is that the y-axis can often be difficult to interpret!

The long tail at the right of this distribution suggests that there are outliers in the data, but it is a bit difficult to see what values those outliers represent. From our histogram, we know that filtering wing lengths to less than sixty likely removes outliers. Let's apply that same filter here:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(fill = "#aaddff") +
  theme_bw()
```

*Note: Once again, we were able to remove the `drop_na(wing)` function because `NA` values in a target variable are removed by default with `filter()`!*

This distribution is perhaps more messy than we would prefer. With histograms, we can specify the width of bins. With density plots, we specify the bandwidth (`bw = ...`) -- this describes the degree of smoothing to apply to the distribution.

For example, if we supply a bandwidth value of 0.1 (see `?geom_density`) ...

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(
    fill = "#aaddff",
    bw = 0.1  
  ) +
  theme_bw()
```

... we can clearly see the aforementioned limitations in measurement precision for wing length!

If we add a bandwidth value of `1`, we get a normal distribution that obscures fine-scale variation in the distributional pattern:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(
    fill = "#aaddff",
    bw = 1 
  ) +
  theme_bw()
```

This illustrates that, like histograms, the choice of bandwidth can be somewhat arbitrary and greatly influences the interpretation of your distribution! To avoid putting my thumb on the scale, I typically choose the default bandwidth selector (see `?bw.nrd0`), as it is a good representation of the overall distributional pattern in your data.

### Statistical summary: `geom_boxplot`

Sometimes, we are more interested in core summary statistics that describe a distribution than the distribution itself. A boxplot will return information on:

* The median value
* The first and third interquartile range
* Outliers

Let's apply this. For example, we can already safely assume that wing lengths greater than 60 are outliers. Let's take a quantitative approach to identifying outliers in wing lengths using a boxplot. To do so, we will map `spp` to the x-axis, `wing` to the y-axis, and add the geometry `geom_boxplot()`. 

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing < 60
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing
  ) +
  geom_boxplot(fill = "#aaddff") +
  theme_bw()
```

The plot above provides a very clear statistical description of the distribution:

* The line in the middle of the box represents the median value;
* The bottom and top of the box represent the **hinges**, which are the 1st and 3rd quartiles of the range (25th and 75th percentiles);
* The lines extending from the box are the **whiskers**, which represent the values no further than 1.5 times the interquartile range relative to the hinges;
* The dots represent outliers, which are defined here as data points outside of the whiskers.

If we agree with that the dots represent outliers (i.e., are not biologically meaningful), we can use these to inform our histogram ...

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  theme_bw()
```

... and our density plot:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(fill = "#aaddff") +
  theme_bw()
```

## Continuous distributions of groups

We often want to compare the distributions between two or more groups. In this section, we will explore various considerations when doing so.

### One grouping variable

#### Histograms

You might be tempted to draw a histogram in which the fill color of the bars is determined by some grouping variable. For example, perhaps we want to know how wing length varies between female and male House wren. To so, we can set `fill = sex`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_histogram(binwidth = 1) +
  theme_bw()
```

This plot is very confusing. The default position of the bars is `"stack"`. The height of each bar is the total number of observations across groups. The distribution of males is clear because each blue bar is the number of males. Each red bar is the number of females, but these values do not start at zero -- they start at the height of the blue bar. This makes comparing the two distributions unduly challenging. 

To get around this, we can use the argument `position = "identity"`. This will ensure that the bars for each sex start at zero.

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_histogram(
    binwidth = 1, 
    position = "identity"
  ) +
  theme_bw()
```

The above almost completely hid the female distribution! That is because there are much fewer females in the dataset than males and, because "M" is the second item in the group, male bars are added after female bars.

We can make both sets of bars visible by applying transparency to the geometry with the argument `alpha = ...`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_histogram(
    binwidth = 1, 
    position = "identity", 
    alpha = 0.7
  ) +
  theme_bw()
```

An easier way to visualize this is to place each group within their own facet with `facet_wrap()`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~ sex) +
  theme_bw()
```

With facet plots, however, it is important to consider how the facets are arranged. Although the above demonstrates that more males have been captured than females, size differences between the sexes is hard to interpret. If our goal is to compare the wing length distribution between sexes, it is much more clear to place the facets in a single column with `ncol = 1`.

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

The above successfully communicates that females, on average, have shorter wings than males and more males have been captured than females.

#### Density

Density plots are great for comparing distributional differences among groups. Let's take a closer look at the distribution of male and female House wren wing lengths:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_density(fill = "#aaddff") +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

The above is a continuous version of our last histogram. 

Unlike histograms, density plots with color can provide a clear comparison of the distributions between groups:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_density() +
  theme_bw()
```

Similarly to histograms, however, these differences can be displayed more clearly by adding transparency such that we can see the full distribution of each sex:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_density(alpha = 0.6) +
  theme_bw()
```

#### Boxplots

Boxplots are super useful for comparing statistical summaries of groups. Let's look at the difference between male and female wing lengths statistically:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = sex,
    y = wing
  ) +
  geom_boxplot(fill = "#aaddff") +
  theme_bw()
```

We can see in the above that the median wing length of males is longer than the median wing length of females. We can take this one step further by testing whether the median wing values are statistically different from one another by visualizing whether the 95% confidence intervals overlap. The argument `notch = TRUE` provides an approximation of the 95% confidence intervals for comparing the difference in median values among groups:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(
    x = sex,
    y = wing
  ) +
  geom_boxplot(
    fill = "#aaddff",
    notch = TRUE
  ) +
  theme_bw()
```

If the notches above overlapped, this would suggest that the 95% confidence intervals overlap as well, thus the two values would not be statistically distinguishable. Because our notches do not overlap, this suggests that the median wing length of males is statistically higher than that of females.

### Two or more grouping variables

I typically do not use histograms to compare the distribution of two or more grouping variables, so this section will focus on boxplots and statistical density plots.

#### Boxplots

As mentioned before, boxplots are a great way to identify differences among multiple groups. Let's use a facet plot to compare female and male wing lengths of Carolina chickadees ("CACH"), Carolina wrens ("CARW"), and House wrens ("HOWR"):

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U"
  ) %>% 
  drop_na(wing) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing
  ) +
  geom_boxplot(fill = "#aaddff") +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

I would not call the above plot particularly successful, because the outliers obscured potential differences in the distributions.

We can remove all outliers with the `geom_boxplot()` argument `outliers = FALSE`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U"
  ) %>% 
  drop_na(wing) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing
  ) +
  geom_boxplot(
    fill = "#aaddff",
    outliers = FALSE
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

Using the distribution of the whiskers when all outliers are removed, we can then remove outliers across species by filtering the data itself. Let's set the range of wing length to between 45 and 70 mm:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing
  ) +
  geom_boxplot(fill = "#aaddff") +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

The above removed shared outliers across species. This information will allow us to further isolate the core of the distribution for other plot types!

It is sometimes more clear to compare between differences by using fill colors instead of facets:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing,
    fill = sex
  ) +
  geom_boxplot() +
  theme_bw()
```

Because the boxes in the plot above are paired, this clearly shows a difference in wing length between sexes for each species.

If, instead, our goal was to compare between species for each sex, we can simply switch the variables mapped to the x-axis and fill color:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = sex,
    y = wing,
    fill = spp
  ) +
  geom_boxplot() +
  theme_bw()
```

The above two plots really demonstrate how aesthetic mappings can influence what you are communicating about your data!

#### Density

With a density plot, we typically map a variable to the fill color aesthetic and a second variable to facets. Let's look at the statistical density distributions of wing lengths for each species and sex:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = sex
  ) +
  geom_density(alpha = 0.6) +
  facet_wrap(
    ~ spp,
    ncol = 1
  ) +
  theme_bw()
```

This plot does not demonstrate differences in sex by species as clearly as the boxplot, but it does communicate both differences in sex and differences in species more successfully overall. We can make differences between species even more apparent by switching our aesthetic and facet mappings:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = wing,
    fill = spp
  ) +
  geom_density(alpha = 0.6) +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

If we were more interested in communicating the wing length differences of a given sex between species, this plot is much more clear!

#### Density with violin plots

Violin plots provide a clear visualization of differences in the shapes of distributions across multiple groups. Let's look at the differences in wing length between sexes for each species using `geom_violin()`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing,
    fill = sex
  ) +
  geom_violin() +
  theme_bw()
```

Violin plots are actually density plots, but the right- and left-hand sides of each violin are mirrored density distributions. Note, however, that the values of statistical density in violin plots are not shown, just the shape of the distribution.

Because we are often used to seeing statistical density displayed on the vertical axis, I typically flip the coordinate system of my violin plots:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    str_detect(spp, "^CA|HOW"),
    age == "AHY",
    sex != "U",
    wing >= 45,
    wing <= 70
  ) %>% 
  ggplot() +
  aes(
    x = spp,
    y = wing,
    fill = sex
  ) +
  geom_violin() +
  coord_flip() +
  theme_bw()
```

By flipping the coordinate system, we can clearly visualize the differences between sexes and species. 

## Fine tuning distribution plots with scales

### Facet scales

Let's take a look at the axis scales for each facet in the histogram that we made previously:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1
  ) +
  theme_bw()
```

By default, the scales of the x- and y- axes are the same for each facet. This can limit our ability to communicate distributions of groups. If the goal of this plot is to show differences in the distribution of wing length between males and females, then differences in the height of the bars obscures that message. This can be confusing to our reader because the differences in the height of the bars are more extreme than the differences in male and female wing length distribution.

Within the `facet_wrap` function, you can define a single scale across facets, or a unique scale for each facet (with the argument `scales = ...`). This should be done carefully!

Let's generate unique scales for each facet using `scales = "free"`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free"
  ) +
  theme_bw()
```

Here, we can see that the height of the bars is much improved. However, notice that the values in the x-axis are no longer aligned. This makes comparing the distribution between sexes very difficult!

To maintain the scale of the x-axis across facets, but allow the y-axis to vary by facet, we can use `scales = "free_y"`. This will set the scale of the y-axis for each facet based on the range of values within a given group:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  theme_bw()
```

Because the bars are now the same height, the x-axis is maintained across facets, and the primary source of variation is the distribution of the bars, this allows us to clearly see the differences between male and female wing lengths. 

*Note: Sometimes, it is preferable to only change the scale of the x-axis. This can be accomplished with `scales = "free_x"`.*

### Expansion

Notice in our plot that the y-axis extends below zero:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  theme_bw()
```

Because this is a histogram, and therefore each bar represents count values, it is impossible to have values less than zero. It would make much more sense for the y-axis to begin at zero. 

We learned how to do this previously using the `scale_y_continuous()` argument `expand = c(0, 0)`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand = c(0, 0)
  ) +
  theme_bw()
```

We got rid of the empty space below the bars, but now our tallest bars reach the top of the plot. This illustrates a limitation of this method -- it modifies both the bottom and top of the y-axis. The first value supplied in the vector is a multiplicative expansion factor (mult) and the second value is an additive expansion factor (add). These factors are being applied to the limits of the axis using the following formulas: 

* $lower\_expansion = lower\_limit - (upper\_limit - lower\_limit) * mult - add$
* $upper\_expansion = upper\_limit + (upper\_limit - lower\_limit) * mult + add$

For example, if we had a lower limit of 1 and an upper limit of 10, the following `expand = ...` arguments would calculate the expansion as:

* `expand = c(0.1, 0)`: 
  * $lower\_expansion = 1 - (10 - 1) * 0.1 - 0$
  * $upper\_expansion = 10 + (10 - 1) * 0.1 + 0$
* `expand = c(0, 1)`: 
  * $lower\_expansion = 1 - (10 - 1) * 0 - 1$
  * $upper\_expansion = 10 + (10 - 1) * 0 + 1$
* `expand = c(0.1, 1)`: 
  * $lower\_expansion = 1 - (10 - 1) * 0.1 - 1$
  * $upper\_expansion = 10 + (10 - 1) * 0.1 + 1$

We can use the `expansion` function inside of `scale_y_continuous()` to define the upper and lower limits of the y-axis for each facet. This function was released in *ggplot2 3.3.0* in 2020. The `expansion` function has two arguments:

* `mult = ...`: A numeric vector of one or two multiplicative range expansion factors.
* `add = ...`: A numeric vector of one or two additive range expansion factors.

For example, using `expansion()` and `add = ...`, we can expand the y-axis by an additive expansion factor of 10:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        add = 10
      )
  ) +
  theme_bw()
```

If we supply a numeric vector of two additive expansion factors:

* The first value represents the expansion factor associated with the lower limit
* The second value represents the expansion factor associated with the upper limit

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        add = c(0, 10)
      )
  ) +
  theme_bw()
```

Conversely, we could use `expansion()` and `mult = ...` to expand the y-axis by a multiplicative expansion factor of 0.1:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = 0.1
      )
  ) +
  theme_bw()
```

If we supply a numeric vector of two multiplicative expansion factors:

* The first value represents the expansion factor associated with the lower limit 
* The second value represents the expansion factor associated with the upper limit

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(binwidth = 1) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  theme_bw()
```

The y-axis of this last plot clearly represents the distribution of wing lengths between males and females without unnecessary blank space in either facet. Here, the `mult = ...` argument allows us to scale the top of the y-axis relative to the values in each group.

## Fine tuning distribution plots with themes

We are now going to fine tune the theme elements of our plot but, before we do so, let's make our histogram look a little less ugly! We will:

* Convert the `sex` variable to a factor that contains the labels "Female" and "Male";
* Set the fill color of the bars to light blue;
* Add a black border line around the bars;
* Label the axis and plot titles with `labs()`;
* I have been using `theme_bw()` in all the code so far, just because I can not stand the default gray background. I will remove it here so that we can custom build our theme.

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  )
```

Now that we have a plot that we like, it is time to specify the **themes**. Recall that themes determine how the non-data elements look. 

One of the major benefits of *ggplot* is that it allows us to modify each specific theme element of our plot by using the `theme` function. 

**Almost everything** we modify in `theme()` is done by:

* Adding an argument that specifies which component of the plot we are modifying;
* Using a function that often follows the naming format `element_[type of element]`. 

The primary theme components to consider are elements pertaining to:

* Axis: The axes of the plot
* Legend: The plot legend
* Panel: The plotting area, or the region upon which data are displayed
* Plot: The entire plot window
* Strip: Facets

The primary elements that display how non-data components of the plot are drawn include:

* `element_blank()`: Draws nothing, and assigns no space
* `element_line()`: Lines
* `element_rect()`: Borders and backgrounds
* `element_text()`: Text

Let's start modifying the theme of our plot!

I like to go from big to small, and like to start by modifying the plot panel. Instead of using the pre-built `theme_bw()`, which removes the gray background from the plot, I like to do this using `panel.background = element_rect(...)`. In this, we can also add a black border around the plotting area:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      )
  )
```

I like to remove the default grid completely because it can lead to wacky issues that you will not notice unless you look *really* closely:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      ),
    panel.grid = element_blank()
  )
```

Next, we should decide on our gridlines. Gridlines are guides for our eyes to be drawn to important information in the plot and should not be included if this is not necessary. If we would like for our readers to see specific values associated with our bars in this plot, it makes sense to include horizontal gridlines. Let's add major gridlines that are colored light gray:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      ),
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(color = "#dcdcdc")
  )
```

Minor gridlines (`panel.grid.minor = ...`) are spaced halfway between major gridlines. These can further help readers align geometries with values on a given axis (if necessary).

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      ),
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(color = "#dcdcdc"),
    panel.grid.minor.y = element_line(color = "#dcdcdc")
  )
```

Let's differentiate minor gridlines and major gridlines by making minor gridlines dashed (`linetype = "dashed"`):

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      ),
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(color = "#dcdcdc"),
    panel.grid.minor.y = 
      element_line(
        color = "#dcdcdc",
        linetype = "dashed"
      )
  )
```

Still targeting the background at this point, if I have facets in my plot, I like to set the borders of the facet headers to black (`strip.background = ...`):

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      ),
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(color = "#dcdcdc"),
    panel.grid.minor.y = 
      element_line(
        color = "#dcdcdc",
        linetype = "dashed"
      ),
    strip.background = element_rect(color = "black")
  )
```

I often like to set my axis lines to a thicker width than the border box (`axis.line = ...`):

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      ),
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(color = "#dcdcdc"),
    panel.grid.minor.y = 
      element_line(
        color = "#dcdcdc",
        linetype = "dashed"
      ),
    strip.background = element_rect(color = "black"),
    axis.line = element_line(linewidth = .7)
  )
```

An exception to the naming convention used for most functions used within arguments of `theme()` is the `unit` function. We use `unit()` only when creating a unit object, or a vector of unit values. A unit value is typically just a single numeric value with an associated unit. We can use this function to modify the spacing between our facets with the `theme()` argument `panel.spacing = ...`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      ),
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(color = "#dcdcdc"),
    panel.grid.minor.y = 
      element_line(
        color = "#dcdcdc",
        linetype = "dashed"
      ),
    strip.background = element_rect(color = "black"),
    axis.line = element_line(linewidth = .7),
    panel.spacing = unit(0.75, "lines")
  )
```

Now let's turn our attention to the text of the plot! We can change the font associated with all text components of the plot using the `theme()` argument `text = ...` and the `element_text()` argument `family = ...`:

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      ),
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(color = "#dcdcdc"),
    panel.grid.minor.y = 
      element_line(
        color = "#dcdcdc",
        linetype = "dashed"
      ),
    strip.background = element_rect(color = "black"),
    axis.line = element_line(linewidth = .7),
    panel.spacing = unit(0.75, "lines"),
    text = element_text(family = "Times")
  )
```

Note: The argument `family = "Times"` only works on Mac computers. If you are a Windows user, you can instead specify the argument as `family = "serif"`. Another option for Windows users is to run the following in your console pane:

```{r eval = FALSE}
install.packages("extrafont")

extrafont::font_import()
```

After loading the fonts, you will have to add:

```{r eval = FALSE}
extrafont::loadfonts(device = "win")
```

Then you can change the font in your theme with `element_text(family = "Times New Roman")`!

After that aside, we will now return to modifying our plots theme.

We can change the font size of each text element by specifying the component to modify and using the `element_text()` argument `size = ...`. Here, we will set the font size of the

* Plot title to 18
* Axis titles to 16
* Axis text to 12
* Strip text to 16

```{r}
dc_birds %>% 
  pluck("captures") %>% 
  filter(
    spp == "HOWR",
    age == "AHY",
    sex != "U",
    wing <= 55,
    wing >= 45
  ) %>% 
  mutate(
    sex = 
      sex %>% 
      factor(
        labels = c("Female", "Male")
      )
  ) %>% 
  ggplot() +
  aes(x = wing) +
  geom_histogram(
    binwidth = 1,
    fill = "#aaddff",
    color = "#000"
  ) +
  facet_wrap(
    ~ sex,
    ncol = 1,
    scales = "free_y"
  ) +
  scale_y_continuous(
    expand =
      expansion(
        mult = c(0, 0.1)
      )
  ) +
  labs(
    x = "Wing length (mm)",
    y = "Number of observations",
    title = "Wing length distribution of male and female House wren"
  ) +
  theme(
    panel.background = 
      element_rect(
        fill = "white",
        color = "black"
      ),
    panel.grid = element_blank(),
    panel.grid.major.y = element_line(color = "#dcdcdc"),
    panel.grid.minor.y = 
      element_line(
        color = "#dcdcdc",
        linetype = "dashed"
      ),
    strip.background = element_rect(color = "black"),
    axis.line = element_line(linewidth = .7),
    panel.spacing = unit(0.75, "lines"),
    text = element_text(family = "Times"),
    plot.title = element_text(size = 18),
    axis.title = element_text(size = 16),
    axis.text = element_text(size = 12),
    strip.text = element_text(size = 16)
  )
```

<br>

::: mysecret

<i class="fas fa-user-secret" style = "font-size: 36px;"></i> I adjust my themes at the very end of my ggplot code. You typically need to adjust themes iteratively when you save a file. Having `theme()` at the end of your ggplot code section makes it easier to find and modify.

:::

## Reference

<button class="accordion">Glossary</button>
::: panel
* **Aesthetic mappings**: How the data are mapped to visual attributes.
* **Core tidyverse**:Packages that are attached with `library(tidyverse)`.
* **Data** (in the Grammar of Graphics): The information being plotted.
* **Hinges**: Graphical representation of the 1st and 3rd quartiles of the range (25th and 75th percentiles);
* **Layers (geometries)**: Expression of the data in the plot.
* **Scales**: Maps from data to aesthetic space.
* **Coordinate system**: Projection of data (e.g., x and y Cartesian coordinates).
* **Facets**: Subsets of data within a given plot (i.e., plots are broken into subplots based on some grouping variable).
* **Theme**: Styling of non-data elements in a plot.
* **Whisker**: Graphical representation of values that are no further than 1.5 times the interquartile range relative to the hinges;
:::

<button class="accordion">Functions</button>
::: panel
**Important!** Primitive functions as well as functions in the *base* and *utils* packages, are loaded by default when you start an R session. Functions in *tibble* and *tidyverse* are loaded with `library(tidyverse)`.

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_4.1_intro_to_data_vis.csv"
) %>% 
  read_csv() %>% 
  kableExtra::kable(
    align = c("c", "c", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```

:::

:::


<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
|Task                         | Windows          | Mac
|:----------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts | Ctrl + Alt + K   | command + option + K
| Open an existing script     | Ctrl + O         | command + O
| Create a new script         | Ctrl + shift + N | command + shift + N
| Save script file            | Ctrl + S         | command + S
| Execute code                | Ctrl + Enter     | command + return
| Copy                        | Ctrl + C         | command + C
| Paste                       | Ctrl + V         | command + V
| Add a pipe operator         | Ctrl + shift + M | command + shift + M
| Add an assignment operator  | Alt + dash       | option + dash
| Add a new code section      | Ctrl + shift + R | command + shift + R
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>
