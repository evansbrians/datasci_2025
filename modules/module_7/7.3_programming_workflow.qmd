---
title: "7.3 Programming workflow"
format:
  html:
    embed-resouces: true
    self-contained: true
    standalone: true
    toc: true
    toc-location: left
    number-sections: false
    search: true
    theme: 
      - cosmo
      - ../../custom_style.scss
editor: source
---
<hr>

```{r setup, include=FALSE}
library(tidyverse)

knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  error = TRUE)

rm(has_annotations)
```

![](../../images/hex_complex.png){.intro_image}

We have thus far used the project that I created for you in this course. In this video lesson (runtime -- 37:25) you will:

* Create your own project using RStudio and bash commands;
* Get some practice with the the solo GitHub workflow (pull, add, commit, push);
* Apply custom functions to tasks such as repetitive data processing and setting a plot theme;
* Apply iteration to simplify scripts;
* Learn how to use a source script to ensure that your script files are targeted to a given task.

*Note: While we do not use any new functions in this lesson, the content herein may provide useful practice for your final exam! If you are behind on course material (or overwhelmed by it), I recommend starting the video at 10:10.*

## Data for this lesson

<button class="accordion">Please click this button to explore the metadata for this lesson!
</button>
::: panel

In this lesson, we will explore the file `district_birds.rds`. We have already used this dataset *a lot*, so I will spare you the details of how and why these data were collected (but see the introduction to this module if you missed it). The data are a formatted as a list object comprised of the following tibble data frames and variables that we will use in this lesson:

[birds]{.mono}

* [species]{.mono}, character: A four-letter code for each species that serves as a primary key for this table.
* [common_name]{.mono}, character: The common names for each species, as used in the United States.
* [foraging]{.mono}, character: The foraging strategy of each species.
* [diet]{.mono}, character: The dietary niche of each species.

[counts]{.mono}

* [count_id]{.mono}, character: The primary key for a unique count record.
* [visit_id]{.mono}, character: A foreign key to the [visits]{.mono} table.
* [spp]{.mono}, character: A species code that acts as a foreign key to the [birds]{.mono} table.
* [count]{.mono}, double: The number of birds counted of a given species over a 10-minute time period.

[captures]{.mono}

* [capture_id]{.mono}, character: The primary key for a unique capture record.
* [visit_id]{.mono}, character: A foreign key to a table that describes when and where a visit occurred (the [visits]{.mono} table).
* [band_number]{.mono}, character: The numbers assigned to an aluminum band that has been placed on a bird.
* [color_combo]{.mono}, character: The combination of aluminum and color bands placed on a bird
* [spp]{.mono}, character: A species code that acts as a foreign key to the [birds]{.mono} table.
* [sex]{.mono}, character: A code representing the sex of a bird, where: "F" is female, "M" is male, "U" is unknown, and [NA]{.mono} represents missing data.
* [age]{.mono}, character: A code representing the age of a bird, where: "AHY" is an adult, "ASY" is an adult that is more than two years old, "HY" is a juvenile, "L" is a nestling, "SY" is two years old, and "U" is unknown.
* [wing]{.mono}, numeric: The length of a bird's wing (unflattened wing chord), in millimeters.
* [tl]{.mono}, numeric: The length of a bird's tail, in millimeters.
* [mass]{.mono}, numeric: The weight of a bird, in grams.
* [bp_cp]{.mono}, character: The breeding condition of a bird, where: "-" stands for a bird that is not in breeding condition, "BP" is a brood patch, "CP" is a cloacal protuberance, "U" is unknown, and [NA]{.mono} represents missing data.
* [fat]{.mono}, character: The fat measured on a bird, that ranges from "0" for no fat, "T" for trace fat, and up to "5" for the maximum amount of fat. [NA]{.mono} values represent missing data.

:::

## Video lesson

{{< video https://youtu.be/IWJIMSkq8eM >}}

## Reference

<button class="accordion">Glossary</button>
::: panel

* **Iteration**: The repeating of a given process a set number of times.
* **Key** (variable): A variable in a data frame (can also be used to refer to names assigned to objects stored in your computer's memory).
* **Memory profiling**: The process of analyzing a program's memory usage to identify and address issues related to memory consumption and management.
* **Memory (RAM)**: A temporary storage location for instructions (functions) and data.
* **Processing time**: The amount of time it takes for a given operation to be completed.
* **Project**: A collection of files that is referenced by a `.RProj` file.
* **Source script**: A script file that often contains data pre-processing steps and custom functions that are used across other scripts. 
* **Unix shell**: A command line interface to the Unix operating system.

:::

<button class="accordion">Functions</button>
::: panel

::: mysecret

{{< fa user-secret size=2x >}} [**Important!**]{style="font-size: 1.25em; padding-left: 0.5em;"}

* Primitive functions, as well as functions in the *base*, *stats*, and *utils* packages, are loaded by default when you start an R session. Functions in *dplyr*, *ggplot2*, *lubridate*, *purrr*, *readr*, *stringr*, *tibble*, *tidyr*, and *tidyverse* are loaded with `library(tidyverse)`.
* The functions `magrittr::%>%`, `rlang::{{}}`, `rlang::set_names` are attached with `library(tidyverse)`
* I do not include functions that I recommend avoiding.
* Regular expressions metacharacters are not functions!
:::

::: function_table

```{r, message = FALSE, echo = FALSE}
file.path(
  "function_tables",
  "functions_7.3_programming_workflow.csv"
) %>%
  read_csv() %>%
  kableExtra::kable(
    align = c("c", "c", "l")
  ) %>%
  kableExtra::kable_styling(
    font_size = 12,
    bootstrap_options = "hover")
```

:::

:::

<button class="accordion">Bash commands</button>
::: panel

:::{style="background-color: white; font-size: 14px;"}
|Command                          | Operation        
|:--------------------------------|:--------------------------------------------------------|
| cd [directory name]              | Navigate to a different directory
| cd ..                            | Navigate to a parent folder
| git add                          | Stage a file to be committed (to be stored in your local repository)
| git commit -m                    | Add a file to your local repository, with a message 
| git config --global user.name    | Configure the user name of your global options
| git config --global user.email   | Configure the user email of your global options
| git pull                         | Download any changes from your online GitHub repository
| git push                         | Upload any changes to your online GitHub repository
| git status                       | View the current state of your local and online repositories
| ls [directory name]              | List files in a directory
| mkdir [directory name]           | Make directory
| mv [current name] [new path]     | Move a file or change its name
| pwd                              | Print working directory
| rm [file name]                   | Remove a file   
| rm -rf                           | Remove a directory

:::
:::

<button class="accordion">Keyboard shortcuts</button>
::: panel

The most common keyboard shortcuts are provided below for Windows and Mac operating systems.

:::{style="background-color: white; font-size: 14px;"}
| Task                          | Windows          | Mac
|:------------------------------|:----------------:|:-------------------:|
| View all keyboard shortcuts   | Ctrl + Alt + K   | shift + option + K
| Select all                    | Ctrl + A         | command + A
| Copy                          | Ctrl + C         | command + C
| Paste                         | Ctrl + V         | command + V
| Open an existing script       | Ctrl + O         | command + O
| Create a new script           | Ctrl + shift + N | command + shift + N
| Save script file              | Ctrl + S         | command + S
| Add a new code section        | Ctrl + shift + R | command + shift + R
| Run code block                | Ctrl + Enter     | command + return
| Run code section              | Ctrl + Alt + T   | command + option + T
| Run code from start to cursor | Ctrl + Alt + B   | command + option + B
| Fix indentation               | Ctrl + I         | command + I
| Comment or un-comment code    | Ctrl + shift + C | command + shift C
| Comments as multiple lines    | Ctrl + shift + ? | Ctrl + shift + ?
| Add a pipe operator           | Ctrl + shift + M | command + shift + M
| Add an assignment operator    | Alt + dash       | option + dash
:::
:::

<button class="accordion">R Studio panes</button>
::: panel
Throughout this class, I will refer to the panes (sections) of the R Studio window. This graphic should help you remember them:
<img src = '../../images/rstudio_panes.png' style = "max-width: 100%; height: auto; padding-top: 20px; padding-bottom: 12px"></img>
*Note: I sometimes also describe the "workspace" pane as the "environment" pane.*
:::

<script>
var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
acc[i].addEventListener("click", function() {
this.classList.toggle("active");
var panel = this.nextElementSibling;
if (panel.style.display === "block") {
panel.style.display = "none";
} else {
panel.style.display = "block";
}
});
}
</script>


